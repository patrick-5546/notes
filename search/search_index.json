{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Patrick's Notes \u00b6 Welcome to my personal notes, where I am free to rant about whatever I want . I have big plans for this website, though I'm not sure if I have the time to match ; for a sneak peak, check out the open issues of the corresponding repository. I created this website to: Consolidate all my resources and references in one place. I just hate it when I recognize an error message but forget how I resolved it. Or when I revisit a tool and have to relearn how it works. Thus, I plan to record what I learn here while it is fresh in my memory. Further my understanding of what I learn by writing it in my own words. This improves learning retention and serves as a resource that I can use to refresh my memory. Build skills related to software development, including Git, CI/CD, iterative development, and documentation. Contents \u00b6 Setup: My Windows and Linux configurations About Me: Links to my LinkedIn profile","title":"Home"},{"location":"#patricks-notes","text":"Welcome to my personal notes, where I am free to rant about whatever I want . I have big plans for this website, though I'm not sure if I have the time to match ; for a sneak peak, check out the open issues of the corresponding repository. I created this website to: Consolidate all my resources and references in one place. I just hate it when I recognize an error message but forget how I resolved it. Or when I revisit a tool and have to relearn how it works. Thus, I plan to record what I learn here while it is fresh in my memory. Further my understanding of what I learn by writing it in my own words. This improves learning retention and serves as a resource that I can use to refresh my memory. Build skills related to software development, including Git, CI/CD, iterative development, and documentation.","title":"Patrick's Notes"},{"location":"#contents","text":"Setup: My Windows and Linux configurations About Me: Links to my LinkedIn profile","title":"Contents"},{"location":"setup/","text":"Setup \u00b6 My Windows laptop configuration as a computer engineering student. Philosophy \u00b6 Best of Both Worlds \u00b6 Windows and Linux excel at different things: Windows has a better GUI and more powerful productivity apps Linux is better for programming I use each OS to their advantage by running Windows on my personal device and using WSL to get a Linux environment on it. WSL vs dual-boot Dual-booting Windows and Linux was popular in the past, but WSL offers very similar performance in the majority of tasks while being much more convenient: WSL distributions can be started in a matter of seconds and can be used simultaneously with Windows apps. Especially with WSL adding the support for Linux GUI apps in Windows 11, there are a dwindling number of reasons to dual-boot. One such reason is that the computer has little RAM (< 16GB). Minimize Mouse Usage \u00b6 Every switch between using the mouse and keyboard takes time and energy, both of which I have little of. Thus, I use: Vim commands to write text/code without the need for a mouse. See the IDE page to learn more. Keyboard shortcuts in Windows as much as possible. Same Keyboard Shortcuts Across Programs \u00b6 To minimize the number of keyboard shortcuts I need to memorize, I configure the programs I use to have the same keyboard shortcuts. Consistent Across Computers \u00b6 To have the same experience on all the computers I use (personal, work, research, homelab), I: Created a setup repository that contains all my configuration files and a script that installs my Linux packages and Zsh plugins Wrote these notes so that I remember how everything works","title":"Setup"},{"location":"setup/#setup","text":"My Windows laptop configuration as a computer engineering student.","title":"Setup"},{"location":"setup/#philosophy","text":"","title":"Philosophy"},{"location":"setup/#best-of-both-worlds","text":"Windows and Linux excel at different things: Windows has a better GUI and more powerful productivity apps Linux is better for programming I use each OS to their advantage by running Windows on my personal device and using WSL to get a Linux environment on it. WSL vs dual-boot Dual-booting Windows and Linux was popular in the past, but WSL offers very similar performance in the majority of tasks while being much more convenient: WSL distributions can be started in a matter of seconds and can be used simultaneously with Windows apps. Especially with WSL adding the support for Linux GUI apps in Windows 11, there are a dwindling number of reasons to dual-boot. One such reason is that the computer has little RAM (< 16GB).","title":"Best of Both Worlds"},{"location":"setup/#minimize-mouse-usage","text":"Every switch between using the mouse and keyboard takes time and energy, both of which I have little of. Thus, I use: Vim commands to write text/code without the need for a mouse. See the IDE page to learn more. Keyboard shortcuts in Windows as much as possible.","title":"Minimize Mouse Usage"},{"location":"setup/#same-keyboard-shortcuts-across-programs","text":"To minimize the number of keyboard shortcuts I need to memorize, I configure the programs I use to have the same keyboard shortcuts.","title":"Same Keyboard Shortcuts Across Programs"},{"location":"setup/#consistent-across-computers","text":"To have the same experience on all the computers I use (personal, work, research, homelab), I: Created a setup repository that contains all my configuration files and a script that installs my Linux packages and Zsh plugins Wrote these notes so that I remember how everything works","title":"Consistent Across Computers"},{"location":"setup/ide/","text":"IDE Setup \u00b6 Demo \u00b6 Background \u00b6 Vim Neovim VS Code Followed the setup guide in the Resources section. My IDE of choice starts with Vim. Its main advantages are that it can be run in a terminal and used without every having to touch the mouse. Once the steep learning curve is overcome, coding becomes much faster. However Vim is primarily a text editor and does not natively support the features expected from a full IDE. On the other hand, VS Code supports debugging, remote development, Git, and much more through extensions. To get the best of both world's I connect a Vim backend to a VS Code frontend using VS Code's Neovim extension. Rather than emulating Vim functionality like other extensions do, this extension communicates with the Neovim executable. The disadvantage of emulation is performance and functionality that is dependent on its developers implementing them. That is not to say that I don't use Vim/Neovim by itself at all. It is convenient for making small changes to a file directly in the CLI , and is noticeably faster for large files. Learn about Vim and My IDE Setup \u00b6 Recommended Vim video tutorials: Vim Tutorial , Mastering the Vim Language , How to Do 90% of What Plugins Do (With Just Vim) The setup guide in the Resources section also demonstrates its capabilities Read the relevant files in my setup repository Quirks \u00b6 Several quirks that I have noticed with my VS Code configuration: R + Shift + K to replace a character with K will not work because Shift + K is used to open the description box Workaround: remap Shift + K , or replace in insert mode Undo and redo behavior is different in Vim and VS Code. Thus saving a file, making a change, then using U to undo will not bring the file back to its saved state Workaround: save every time, or map U and Ctrl + R to the VS Code implementation of undo and redo Setup \u00b6 Install Neovim Symbolic link .vimrc to the home directory in an Administrator PowerShell prompt New-Item -ItemType Symboliclink -Path \"$env:USERPROFILE\\.vimrc\" -Value \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\.vimrc\" Make a directory named nvim in $env:LOCALAPPDATA and symbolic link init.vim to it in an Administrator PowerShell prompt New-Item -ItemType Symboliclink -Path \"$env:LOCALAPPDATA\\nvim\\init.vim\" -Value \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\windows\\init.vim\" Install VS Code winget install - -id Microsoft . VisualStudioCode Install the VSCode Neovim , Which Key , and Settings Cycler extensions Other useful VS Code extensions Extension Name Description Edit csv View and edit csv files with a table UI Git History View git log, file history, compare branches or commits GitLens See who commited each line of code and when they did it Live Share Extension Pack Real-time collaborative development (like Google Docs for programming) Markdown Preview Enhanced Better markdown preview Peacock Change workspace border color to be able to quickly identify workspaces Remote Development Support for development using WSL , SSH, and Docker toggle semicolon Ctrl + ; to add or remove the semicolon at the end of a line vscode-icons Clean file icons for the file explorer vscode-pdf Display pdf file in VS Code Why symbolic link? \u00b6 A symbolic link is a file that points to another file. For example, I want my configuration files (i.e. $env:USERPROFILE\\.vimrc ) to point to files in my setup repository (i.e. $env:USERPROFILE\\Programming\\git_projects\\.setup\\.vimrc ). This enables updates I pull for my setup repository to be instantly applied to my setup. If this functionality does not matter to you, there is no need to symbolic link files. Relevant Files in My Setup Repository \u00b6 .vimrc windows/init.vim windows/vscode_sample_keybindings.json windows/vscode_sample_settings.json Resources \u00b6 VS Code / Neovim integration setup guide: VSCode with embedded Neovim init.vim without my changes settings.json and keybindings.json without my changes Vim configuration: tylerlum/vim_configuration , amix/vimrc Workaround :number and :relativenu not working in VS Code","title":"IDE"},{"location":"setup/ide/#ide-setup","text":"","title":"IDE Setup"},{"location":"setup/ide/#demo","text":"","title":"Demo"},{"location":"setup/ide/#background","text":"Vim Neovim VS Code Followed the setup guide in the Resources section. My IDE of choice starts with Vim. Its main advantages are that it can be run in a terminal and used without every having to touch the mouse. Once the steep learning curve is overcome, coding becomes much faster. However Vim is primarily a text editor and does not natively support the features expected from a full IDE. On the other hand, VS Code supports debugging, remote development, Git, and much more through extensions. To get the best of both world's I connect a Vim backend to a VS Code frontend using VS Code's Neovim extension. Rather than emulating Vim functionality like other extensions do, this extension communicates with the Neovim executable. The disadvantage of emulation is performance and functionality that is dependent on its developers implementing them. That is not to say that I don't use Vim/Neovim by itself at all. It is convenient for making small changes to a file directly in the CLI , and is noticeably faster for large files.","title":"Background"},{"location":"setup/ide/#learn-about-vim-and-my-ide-setup","text":"Recommended Vim video tutorials: Vim Tutorial , Mastering the Vim Language , How to Do 90% of What Plugins Do (With Just Vim) The setup guide in the Resources section also demonstrates its capabilities Read the relevant files in my setup repository","title":"Learn about Vim and My IDE Setup"},{"location":"setup/ide/#quirks","text":"Several quirks that I have noticed with my VS Code configuration: R + Shift + K to replace a character with K will not work because Shift + K is used to open the description box Workaround: remap Shift + K , or replace in insert mode Undo and redo behavior is different in Vim and VS Code. Thus saving a file, making a change, then using U to undo will not bring the file back to its saved state Workaround: save every time, or map U and Ctrl + R to the VS Code implementation of undo and redo","title":"Quirks"},{"location":"setup/ide/#setup","text":"Install Neovim Symbolic link .vimrc to the home directory in an Administrator PowerShell prompt New-Item -ItemType Symboliclink -Path \"$env:USERPROFILE\\.vimrc\" -Value \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\.vimrc\" Make a directory named nvim in $env:LOCALAPPDATA and symbolic link init.vim to it in an Administrator PowerShell prompt New-Item -ItemType Symboliclink -Path \"$env:LOCALAPPDATA\\nvim\\init.vim\" -Value \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\windows\\init.vim\" Install VS Code winget install - -id Microsoft . VisualStudioCode Install the VSCode Neovim , Which Key , and Settings Cycler extensions Other useful VS Code extensions Extension Name Description Edit csv View and edit csv files with a table UI Git History View git log, file history, compare branches or commits GitLens See who commited each line of code and when they did it Live Share Extension Pack Real-time collaborative development (like Google Docs for programming) Markdown Preview Enhanced Better markdown preview Peacock Change workspace border color to be able to quickly identify workspaces Remote Development Support for development using WSL , SSH, and Docker toggle semicolon Ctrl + ; to add or remove the semicolon at the end of a line vscode-icons Clean file icons for the file explorer vscode-pdf Display pdf file in VS Code","title":"Setup"},{"location":"setup/ide/#why-symbolic-link","text":"A symbolic link is a file that points to another file. For example, I want my configuration files (i.e. $env:USERPROFILE\\.vimrc ) to point to files in my setup repository (i.e. $env:USERPROFILE\\Programming\\git_projects\\.setup\\.vimrc ). This enables updates I pull for my setup repository to be instantly applied to my setup. If this functionality does not matter to you, there is no need to symbolic link files.","title":"Why symbolic link?"},{"location":"setup/ide/#relevant-files-in-my-setup-repository","text":".vimrc windows/init.vim windows/vscode_sample_keybindings.json windows/vscode_sample_settings.json","title":"Relevant Files in My Setup Repository"},{"location":"setup/ide/#resources","text":"VS Code / Neovim integration setup guide: VSCode with embedded Neovim init.vim without my changes settings.json and keybindings.json without my changes Vim configuration: tylerlum/vim_configuration , amix/vimrc Workaround :number and :relativenu not working in VS Code","title":"Resources"},{"location":"setup/software/","text":"Other Software \u00b6 Debloat Windows \u00b6 One click system tweaks and troubleshooting. To run, paste the following command into an Adminstrator PowerShell prompt: iex (( New-Object System . Net . WebClient ). DownloadString ( 'https://git.io/JJ8R4' )) Watch the video at the end of this article for an explanation of each option. Recommended options: Essential Tweaks [If dual-booting] Set Time to UTC Winget \u00b6 Using a package manager such as winget allows software to be quickly and easily installed, upgraded, and uninstalled using the terminal. Winget is relatively new and thus does not yet support as many packages as other Windows package managers, but since it is built into Windows 11 and quickly growing, it is definitely the way to go moving forwards. I have been using Chocolatey to get packages that are not yet available on winget, but this has become increasingly rare. Useful applications I installed using a package manager Application Name Description 7zip Compress and extract files of different formats Microsoft PowerToys Set of utilities for customizing Windows TeamViewer Remote desktop software TreeSize Free Disk space manager, shows sizes of folders including all subfolders VLC Media player supporting most of media codecs and video formats; basic video editor Winget quick reference \u00b6 Works with applications installed via other means By default, opens the installer window just like double clicking on an installation file -h will attempt to run command without the needs for user input Command Description winget search <query> Search for an app matching the query winget install --id <app_id> Install app winget list List all installed apps (outdated apps have something in the Available column winget list <query> List installed apps matching the query winget upgrade --id <app_id> Upgrade app winget upgrade --all Upgrade all apps winget uninstall --id <app_id> Uninstall app Winget resources \u00b6 winget command reference and examples Search winget packages, generate command that installs the desired packages Chocolatey quick reference Run the following commands in an Administrator PowerShell prompt: -y confirms all prompts so that the command runs without the need for user input Command Description choco install <package1> <package2> -y Install packages choco list -l List packages installed using Chocolatey choco pin add -n <package> Keep package at current version choco pin list List pinned packages choco pin remove -n <package> Allow package to be upgraded choco outdated List outdated packages choco upgrade <package> -y Upgrade package choco upgrade all -y Upgrade all packages choco uninstall <package> -y Uninstall package Installing Chocolatey Search Chocolatey packages Chocolatey command reference and examples Microsoft Store \u00b6 All applications, including those from the Microsoft Store, can be managed using winget. However, it is easier to manage Microsoft Store applications using the Microsoft Store app. Useful applications I installed using the Microsoft Store Application Name Description EarTrumpet Control the volume of each application (and system sounds) individually Microsoft To Do To do list OneNote (for Windows 10) Note-taking Snip & Sketch Take, annotate, and save screenshots","title":"Other Software"},{"location":"setup/software/#other-software","text":"","title":"Other Software"},{"location":"setup/software/#debloat-windows","text":"One click system tweaks and troubleshooting. To run, paste the following command into an Adminstrator PowerShell prompt: iex (( New-Object System . Net . WebClient ). DownloadString ( 'https://git.io/JJ8R4' )) Watch the video at the end of this article for an explanation of each option. Recommended options: Essential Tweaks [If dual-booting] Set Time to UTC","title":"Debloat Windows"},{"location":"setup/software/#winget","text":"Using a package manager such as winget allows software to be quickly and easily installed, upgraded, and uninstalled using the terminal. Winget is relatively new and thus does not yet support as many packages as other Windows package managers, but since it is built into Windows 11 and quickly growing, it is definitely the way to go moving forwards. I have been using Chocolatey to get packages that are not yet available on winget, but this has become increasingly rare. Useful applications I installed using a package manager Application Name Description 7zip Compress and extract files of different formats Microsoft PowerToys Set of utilities for customizing Windows TeamViewer Remote desktop software TreeSize Free Disk space manager, shows sizes of folders including all subfolders VLC Media player supporting most of media codecs and video formats; basic video editor","title":"Winget"},{"location":"setup/software/#winget-quick-reference","text":"Works with applications installed via other means By default, opens the installer window just like double clicking on an installation file -h will attempt to run command without the needs for user input Command Description winget search <query> Search for an app matching the query winget install --id <app_id> Install app winget list List all installed apps (outdated apps have something in the Available column winget list <query> List installed apps matching the query winget upgrade --id <app_id> Upgrade app winget upgrade --all Upgrade all apps winget uninstall --id <app_id> Uninstall app","title":"Winget quick reference"},{"location":"setup/software/#winget-resources","text":"winget command reference and examples Search winget packages, generate command that installs the desired packages Chocolatey quick reference Run the following commands in an Administrator PowerShell prompt: -y confirms all prompts so that the command runs without the need for user input Command Description choco install <package1> <package2> -y Install packages choco list -l List packages installed using Chocolatey choco pin add -n <package> Keep package at current version choco pin list List pinned packages choco pin remove -n <package> Allow package to be upgraded choco outdated List outdated packages choco upgrade <package> -y Upgrade package choco upgrade all -y Upgrade all packages choco uninstall <package> -y Uninstall package Installing Chocolatey Search Chocolatey packages Chocolatey command reference and examples","title":"Winget resources"},{"location":"setup/software/#microsoft-store","text":"All applications, including those from the Microsoft Store, can be managed using winget. However, it is easier to manage Microsoft Store applications using the Microsoft Store app. Useful applications I installed using the Microsoft Store Application Name Description EarTrumpet Control the volume of each application (and system sounds) individually Microsoft To Do To do list OneNote (for Windows 10) Note-taking Snip & Sketch Take, annotate, and save screenshots","title":"Microsoft Store"},{"location":"setup/terminal/","text":"Terminal Setup \u00b6 Demo \u00b6 Software Stack \u00b6 Windows Terminal \u00b6 Windows Terminal is a terminal application to access shells such as PowerShell, WSL distributions, and SSH all in one place. It can be customized aesthetically and functionally to the moon: Aesthetically, there are countless resources online to serve as a starting point. Functionality, I went through each setting and customized them based on what I was familiar with (Ubuntu terminal, keybindings from my Vim configuration). Oh My Posh \u00b6 Oh My Posh is a theme engine for any shell. Since it is compatible with all the major operating systems, I can use the same custom theme (based on atomic ) for all my Windows Terminal shells. Customizing Oh My Posh themes to use in Windows Terminal I would recommend not right aligning segments, as their formatting gets messed up when resizing panes. Opening a tab/pane in the same directory in Windows Terminal Add \"osc99\" : true , to your Oh My Posh theme. Resources: Oh My Posh fixed OSC 9;9 support for Zsh in v6.42.3 If not using Oh My Posh, refer to the related Windows Terminal documentation page Solution for Zsh Setup \u00b6 Clone my setup repository git clone - -depth = 1 https :// github . com / patrick - 5546 / setup . git \"$env:USERPROFILE\\git_projects\\.setup\" Install fonts that support symbols used by Oh My Posh (i.e., Nerd Fonts ) My fonts can be extracted from windows\\fonts.zip My settings, themes, and sample profiles can be found in windows\\windows_terminal_sample_settings.json The PowerShell and Zsh pages detail how I setup these shells to use in Windows Terminal Windows Terminal Shortcuts \u00b6 I have highlighted a few of the shortcuts that I regularly use. The shorcuts with italicized descriptions are ones I customized. All the available shortcuts are listed in the Actions tab of the settings page. Shortcut Description Ctrl + Shift + P Toggle command palette (same as VS Code) Ctrl + Shift + W Close windows (from Microsoft Edge) Ctrl + Shift + Space Open new tab dropdown Ctrl + Shift + # Open profile # in a new tab Ctrl + T Duplicate current tab (from Microsoft Edge) Ctrl + Tab Cycle forwards between tabs (same as Microsoft Edge) Ctrl + W Close tab (from Microsoft Edge) Alt + Shift + D Split pane the long way Ctrl + H / J / K / L Move between panes (from my IDE configuration) Ctrl + Q Close pane What are panes? A tab can be split into multiple panes, enabling you to run commands right next to each other. Check out the documentation page on panes to learn more. Relevant Files in My Setup Repository \u00b6 windows/fonts.zip windows/windows_terminal_sample_settings.json Resources \u00b6 Windows Terminal Color Schemes Windows Terminal Documentation Windows Terminal 2.0 Roadmap Oh My Posh documentation and included themes Complete Nerd Fonts Release Powershell -NoLogo parameter render spaces between blocks","title":"Terminal Setup"},{"location":"setup/terminal/#terminal-setup","text":"","title":"Terminal Setup"},{"location":"setup/terminal/#demo","text":"","title":"Demo"},{"location":"setup/terminal/#software-stack","text":"","title":"Software Stack"},{"location":"setup/terminal/#windows-terminal","text":"Windows Terminal is a terminal application to access shells such as PowerShell, WSL distributions, and SSH all in one place. It can be customized aesthetically and functionally to the moon: Aesthetically, there are countless resources online to serve as a starting point. Functionality, I went through each setting and customized them based on what I was familiar with (Ubuntu terminal, keybindings from my Vim configuration).","title":"Windows Terminal"},{"location":"setup/terminal/#oh-my-posh","text":"Oh My Posh is a theme engine for any shell. Since it is compatible with all the major operating systems, I can use the same custom theme (based on atomic ) for all my Windows Terminal shells. Customizing Oh My Posh themes to use in Windows Terminal I would recommend not right aligning segments, as their formatting gets messed up when resizing panes. Opening a tab/pane in the same directory in Windows Terminal Add \"osc99\" : true , to your Oh My Posh theme. Resources: Oh My Posh fixed OSC 9;9 support for Zsh in v6.42.3 If not using Oh My Posh, refer to the related Windows Terminal documentation page Solution for Zsh","title":"Oh My Posh"},{"location":"setup/terminal/#setup","text":"Clone my setup repository git clone - -depth = 1 https :// github . com / patrick - 5546 / setup . git \"$env:USERPROFILE\\git_projects\\.setup\" Install fonts that support symbols used by Oh My Posh (i.e., Nerd Fonts ) My fonts can be extracted from windows\\fonts.zip My settings, themes, and sample profiles can be found in windows\\windows_terminal_sample_settings.json The PowerShell and Zsh pages detail how I setup these shells to use in Windows Terminal","title":"Setup"},{"location":"setup/terminal/#windows-terminal-shortcuts","text":"I have highlighted a few of the shortcuts that I regularly use. The shorcuts with italicized descriptions are ones I customized. All the available shortcuts are listed in the Actions tab of the settings page. Shortcut Description Ctrl + Shift + P Toggle command palette (same as VS Code) Ctrl + Shift + W Close windows (from Microsoft Edge) Ctrl + Shift + Space Open new tab dropdown Ctrl + Shift + # Open profile # in a new tab Ctrl + T Duplicate current tab (from Microsoft Edge) Ctrl + Tab Cycle forwards between tabs (same as Microsoft Edge) Ctrl + W Close tab (from Microsoft Edge) Alt + Shift + D Split pane the long way Ctrl + H / J / K / L Move between panes (from my IDE configuration) Ctrl + Q Close pane What are panes? A tab can be split into multiple panes, enabling you to run commands right next to each other. Check out the documentation page on panes to learn more.","title":"Windows Terminal Shortcuts"},{"location":"setup/terminal/#relevant-files-in-my-setup-repository","text":"windows/fonts.zip windows/windows_terminal_sample_settings.json","title":"Relevant Files in My Setup Repository"},{"location":"setup/terminal/#resources","text":"Windows Terminal Color Schemes Windows Terminal Documentation Windows Terminal 2.0 Roadmap Oh My Posh documentation and included themes Complete Nerd Fonts Release Powershell -NoLogo parameter render spaces between blocks","title":"Resources"},{"location":"setup/terminal/powershell/","text":"PowerShell Setup \u00b6 PowerShell with file icons, autocomplete, and a custom theme. Followed the setup guide in the Resources section Setup \u00b6 Download the PowerShell app from the Microsoft Store This app is the latest version of PowerShell and includes the PSReadLine Module for autocomplete Install the requirements Install oh-my-posh winget install - -id = JanDeDobbeleer . OhMyPosh Install Terminal Icons Install-Module -Name Terminal-Icons -Repository PSGallery In the PowerShell profile, update absolute path to Oh My Posh theme if necessary, and comment out the Clear-Host command at the end for debugging purposes windows\\Microsoft.PowerShell_profile.ps1 oh-my-posh - -init - -shell pwsh - -config \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\poshthemes\\atomic_tweak_windows.json\" | Invoke-Expression Symbolic link the PowerShell profile to the Powershell directory in an Administrator PowerShell prompt New-Item -ItemType SymbolicLink -Path \"$env:USERPROFILE\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1\" -Value \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\windows\\Microsoft.PowerShell_profile.ps1\" PSReadLine feature is unsupported Install the latest release of PSReadLine (check here ). In December 2021, the latest release was v2.2.0-beta4: Install-Module -Name PSReadLine -RequiredVersion 2 . 2 . 0-beta4 -AllowPrerelease To get rid of the startup messages before prompt, you can uncomment the Clear-Host command at the end of the Powershell profile Why symbolic link? See my reasoning in the IDE page. Relevant Files in My Setup Repository \u00b6 poshthemes/atomic_tweak_windows.json windows/Microsoft.PowerShell_profile.ps1 Resources \u00b6 The PowerShell profile is from this setup guide Refer to the accompanying video that walks through the article if any issues arise","title":"PowerShell"},{"location":"setup/terminal/powershell/#powershell-setup","text":"PowerShell with file icons, autocomplete, and a custom theme. Followed the setup guide in the Resources section","title":"PowerShell Setup"},{"location":"setup/terminal/powershell/#setup","text":"Download the PowerShell app from the Microsoft Store This app is the latest version of PowerShell and includes the PSReadLine Module for autocomplete Install the requirements Install oh-my-posh winget install - -id = JanDeDobbeleer . OhMyPosh Install Terminal Icons Install-Module -Name Terminal-Icons -Repository PSGallery In the PowerShell profile, update absolute path to Oh My Posh theme if necessary, and comment out the Clear-Host command at the end for debugging purposes windows\\Microsoft.PowerShell_profile.ps1 oh-my-posh - -init - -shell pwsh - -config \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\poshthemes\\atomic_tweak_windows.json\" | Invoke-Expression Symbolic link the PowerShell profile to the Powershell directory in an Administrator PowerShell prompt New-Item -ItemType SymbolicLink -Path \"$env:USERPROFILE\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1\" -Value \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\windows\\Microsoft.PowerShell_profile.ps1\" PSReadLine feature is unsupported Install the latest release of PSReadLine (check here ). In December 2021, the latest release was v2.2.0-beta4: Install-Module -Name PSReadLine -RequiredVersion 2 . 2 . 0-beta4 -AllowPrerelease To get rid of the startup messages before prompt, you can uncomment the Clear-Host command at the end of the Powershell profile Why symbolic link? See my reasoning in the IDE page.","title":"Setup"},{"location":"setup/terminal/powershell/#relevant-files-in-my-setup-repository","text":"poshthemes/atomic_tweak_windows.json windows/Microsoft.PowerShell_profile.ps1","title":"Relevant Files in My Setup Repository"},{"location":"setup/terminal/powershell/#resources","text":"The PowerShell profile is from this setup guide Refer to the accompanying video that walks through the article if any issues arise","title":"Resources"},{"location":"setup/terminal/zsh/","text":"Zsh Setup \u00b6 Zsh is a shell for Linux (and thus WSL). My setup repository contains scripts that installs my packages, plugins, and configuration files. Packages, plugins, and configuration files installed by my scripts Package/Plugin/File Description Oh My Posh Theme engine Oh My Zsh Zsh framework for plugins and themes diff-so-fancy Human readable [git] diffs enhancd Make cd interfactive fzf Interactive list filter: files, command history, processes, etc. ripgrep Faster recursive search by ignoring files that are hidden (name starts with . ) or in a .gitignore file .vimrc Configuration file for Vim .zshrc Configuration file for Zsh ~/.zshrc.local .zshrc sources this, for machine-specific Zsh setup (untracked by setup repository) Setup \u00b6 Run commands from the home directory ( cd ~ ) Clone my setup repository git clone --depth = 1 https://github.com/patrick-5546/setup.git ~/.setup Check for existing .zshrc and .vimrc configuration files ls -A Delete/rename any existing configuration files rm .zshrc # delete .zshrc mv .vimrc .vimrc.old # rename .vimrc to .vimrc.old Run installation script If you have root (sudo) access If you don't have root (sudo) access ./.setup/install.sh ./.setup/install_no_sudo.sh Running without root access Without root access, the script won't be able to install Zsh, Oh My Posh, or ripgrep. If you are lucky, Zsh and/or ripgrep may already be installed on your machine. Workaround for Oh My Posh: install in ~/.local/bin mkdir -p ~/.local/bin wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O ~/.local/bin/oh-my-posh sudo chmod +x ~/.local/bin/oh-my-posh If oh-my-posh --version is not working in a new terminal, may need to manually add ~/.local/bin to the $PATH environment variable Check with echo $PATH | grep ~/.local/bin Add to path by adding export PATH=$PATH:~/.local/bin to your ~/.zshrc.local file Installing ripgrep in Ubuntu 18.04 ripgrep isn't in Ubuntu 18.04, so sudo apt-get install ripgrep in install.sh won't work Workaround: install ripgrep manually Make Zsh the default shell chsh -s $( which zsh ) Relevant Files in My Setup Repository \u00b6 Everything except windows/ Resources \u00b6 Oh My Zsh Plugins Get started using Git on WSL","title":"Zsh"},{"location":"setup/terminal/zsh/#zsh-setup","text":"Zsh is a shell for Linux (and thus WSL). My setup repository contains scripts that installs my packages, plugins, and configuration files. Packages, plugins, and configuration files installed by my scripts Package/Plugin/File Description Oh My Posh Theme engine Oh My Zsh Zsh framework for plugins and themes diff-so-fancy Human readable [git] diffs enhancd Make cd interfactive fzf Interactive list filter: files, command history, processes, etc. ripgrep Faster recursive search by ignoring files that are hidden (name starts with . ) or in a .gitignore file .vimrc Configuration file for Vim .zshrc Configuration file for Zsh ~/.zshrc.local .zshrc sources this, for machine-specific Zsh setup (untracked by setup repository)","title":"Zsh Setup"},{"location":"setup/terminal/zsh/#setup","text":"Run commands from the home directory ( cd ~ ) Clone my setup repository git clone --depth = 1 https://github.com/patrick-5546/setup.git ~/.setup Check for existing .zshrc and .vimrc configuration files ls -A Delete/rename any existing configuration files rm .zshrc # delete .zshrc mv .vimrc .vimrc.old # rename .vimrc to .vimrc.old Run installation script If you have root (sudo) access If you don't have root (sudo) access ./.setup/install.sh ./.setup/install_no_sudo.sh Running without root access Without root access, the script won't be able to install Zsh, Oh My Posh, or ripgrep. If you are lucky, Zsh and/or ripgrep may already be installed on your machine. Workaround for Oh My Posh: install in ~/.local/bin mkdir -p ~/.local/bin wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O ~/.local/bin/oh-my-posh sudo chmod +x ~/.local/bin/oh-my-posh If oh-my-posh --version is not working in a new terminal, may need to manually add ~/.local/bin to the $PATH environment variable Check with echo $PATH | grep ~/.local/bin Add to path by adding export PATH=$PATH:~/.local/bin to your ~/.zshrc.local file Installing ripgrep in Ubuntu 18.04 ripgrep isn't in Ubuntu 18.04, so sudo apt-get install ripgrep in install.sh won't work Workaround: install ripgrep manually Make Zsh the default shell chsh -s $( which zsh )","title":"Setup"},{"location":"setup/terminal/zsh/#relevant-files-in-my-setup-repository","text":"Everything except windows/","title":"Relevant Files in My Setup Repository"},{"location":"setup/terminal/zsh/#resources","text":"Oh My Zsh Plugins Get started using Git on WSL","title":"Resources"}]}