{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Patrick's Notes","text":"<p>Welcome to my personal notes on various programming-related topics. I have big plans for this website, though I'm not sure if I have the time to match; for a sneak peak, check out the open issues.</p>"},{"location":"#site-purpose","title":"Site Purpose","text":"<p>I created this website to:</p> <ol> <li> <p>Consolidate all my resources and references in one place. I just hate it when I recognize an error message but forgot how I resolved it. Or when I revisit a tool and forgot how it works. Thus, I plan to record what I learn here while it is fresh in my memory.</p> </li> <li> <p>Further my understanding of what I learn by writing it in my own words. This improves learning retention and serves as a resource that I can use to refresh my memory.</p> </li> <li> <p>Build skills related to software development, including Git, CI/CD, iterative development, and documentation.</p> </li> <li> <p>Inspire and guide others to take advantage of the powerful capabilities of popular coding-related software.</p> </li> </ol>"},{"location":"#site-contents","title":"Site Contents","text":"<ul> <li>Setup: My Windows and Linux configurations</li> <li>Internship Preparation: How I efficiently apply for internships and prepare for interviews</li> <li>Reference: Quick reference on how to use popular programming-related software</li> <li>About Me: Graphics related to my experiences</li> </ul>"},{"location":"profile/","title":"About Me","text":""},{"location":"profile/#hobbies","title":"Hobbies","text":""},{"location":"profile/#technology-stack-timeline","title":"Technology Stack Timeline","text":"<p>When I learned major programming languages, tools, and frameworks. Created using Visme.</p> <p>Feel free to check out my Linkedin profile or reach out to me to learn more about my experiences.</p> <p></p>"},{"location":"internship_prep/","title":"Internship Preparation Process","text":"<p>My notes on how to efficiently apply for internships and prepare for interviews, as well as topics covered in interviews that I have done. It is intended to be more of a supplementary than comprehensive resource, perhaps giving you a couple ideas on how to improve your own preparation process.</p> <p>If you have any questions for me, please don't hesitate to reach out.</p>"},{"location":"internship_prep/#credits","title":"Credits","text":"<ul> <li>A lot of my internship preparation notes have come from discussions that I have had with Roger Luo</li> <li>Most of my Hardware Reference notes were written when I was studying for the CPEN 311 final</li> </ul>"},{"location":"internship_prep/applications/","title":"Applications","text":"<p>My application strategy is to prepare as much as I can before companies start posting so that:</p> <ol> <li>The time it takes to apply for each position is minimized</li> <li>Whenever an interview opportunity arises, I am prepared</li> </ol> <p>In economic terms, my strategy has a high upfront cost, but minimal recurring costs.</p>"},{"location":"internship_prep/applications/#resume","title":"Resume","text":"<p>How your experiences and achievements make you the best candidate for the position</p>"},{"location":"internship_prep/applications/#technical-skills","title":"Technical skills","text":"<ul> <li>Copy vocabulary from job descriptions</li> <li>Organize skills into groups (i.e., languages, hardware, tools/frameworks)</li> </ul>"},{"location":"internship_prep/applications/#experiences","title":"Experiences","text":"<ul> <li>3-point structure<ol> <li>Overview/context/ of the experience</li> <li>Result/achievement (ideally quantitative)</li> <li>What you specifically did/learned</li> </ol> </li> <li>Recruiters don't look at a resume very long, and often read in an F-pattern<ul> <li>Clear sections and headers</li> <li>Concise sentences</li> <li>Phrase sentences so that keys words are at the beginning</li> </ul> </li> </ul>"},{"location":"internship_prep/applications/#length","title":"Length","text":"<ul> <li>1 page for US or larger companies, 2 pages for Canada or smaller companies</li> <li>Shorten resume by cutting experiences: consider relevance to the position and similarity to other experiences<ul> <li>Can put everything on LinkedIn and link to your profile in the resume</li> <li>Can have multiple resumes for different types of jobs (e.g., software, firmware, hardware)</li> </ul> </li> <li>Lengthen resume by padding experiences: consider mentioning transferrable soft skills<ul> <li>For example, Agile methodologies, proactive/self-motivated nature, leadership, communication, documentation</li> </ul> </li> <li>If you don't have many relevant experiences, considering adding sections on work/volunteer experience and non-technical interests to differentiate yourself from other applicants</li> </ul>"},{"location":"internship_prep/applications/#cover-letter","title":"Cover Letter","text":"<p>Quick to write, yet high quality &amp; personalized</p>"},{"location":"internship_prep/applications/#when-to-write-cover-letters","title":"When to write cover letters","text":"<p>For larger companies with lots of applicants, cover letters may not be weighed as heavily in the application process. Some companies make cover letters optional, or outright do not accept them. Here are some factors to consider when deciding whether to write a cover letter for a particular job when it is optional to do so:</p> <ul> <li>How much time do you have?   Although writing cover letters is time consuming, and the job search is often a matter of quantity,   quality cover letters should never be detrimental to your application; at the very least, writing one demonstrates   your desire for the job. Thus, prioritize writing cover letters for the jobs that you desire the most.</li> <li>How strong is your resume?   If you do not have a lot of relevant experience, use a cover letter to explain how you are a good candidate for the job.</li> </ul>"},{"location":"internship_prep/applications/#format","title":"Format","text":"<ol> <li>Introduction<ul> <li>Passion for role</li> <li>Passion for company products/services/achievements/work culture</li> <li>Mention personal contacts and other interactions with the company you have had</li> <li>General statement about what makes you a good fit<ul> <li>Include vocabulary from the job description</li> </ul> </li> </ul> </li> <li>Body<ul> <li>Describe relevant experience using the START technique<ul> <li>Situation - scene and context</li> <li>Task - goal</li> <li>Action - what you specifically did</li> <li>Result - achievement (make quantitative if possible), what you learned</li> <li>Transfer - how what you learned can be used in the position you are applying for</li> </ul> </li> </ul> </li> <li>Conclusion<ul> <li>Thank the hiring committee for their time</li> <li>Include how they can arrange an interview</li> </ul> </li> </ol>"},{"location":"internship_prep/applications/#create-templates","title":"Create templates","text":"<p>To reduce the time it takes to write a cover letter, prepare a template for each type of position you want to apply to:</p> <ul> <li>Testing</li> <li>Web/Mobile Application Development</li> <li>Data Analyst</li> <li>Gaming</li> <li>Hardware</li> <li>DevOps/Infrastructure/Site Reliability</li> <li>Robotics/Controls</li> </ul> <p>These templates will vary in the experience they describe in the body paragraph and maybe in the terms used in the introduction paragraph general statement.</p>"},{"location":"internship_prep/applications/#job-search","title":"Job Search","text":"<p>Manage your time effectively</p>"},{"location":"internship_prep/applications/#gather-information","title":"Gather information","text":"<ul> <li>Attend info sessions, workshops</li> <li>Reach out to people working at the company<ul> <li>Managers, recruiters, staff, interns</li> <li>Learn about the industry, company, and their personal experiences</li> <li>Ask them about open positions and referrals</li> <li>Mention them in your cover letter</li> </ul> </li> </ul>"},{"location":"internship_prep/applications/#analyze-results","title":"Analyze results","text":"<p>I kept track of my applications using a table similar to the one below. I use it to analyze the results of previous applications to determine which positions I should apply to next. For example, if I see that I did not have much success applying to positions with greater than # applicants, or that require xxxx skills, I would avoid applying to similar types of jobs in the future, or revise my resume and cover letter to strengthen those areas.</p> Position Company Application Deadline Resume/CL Template Technical Requisites # Applicants % Confidence Status Notes Embedded Systems Engineer Intel 01/11/21 Hardware Verilog, Linux, C/C++, Python 37 20% Rejected Need more relevant experience <p>I recommend creating this tracker using a software like Notion or Excel so that you can sort by column.</p>"},{"location":"internship_prep/interview_prep/","title":"General Interview Preparation","text":"<p>Prepare as much beforehand, as the time between being selected and the interview date could be less than a week</p>"},{"location":"internship_prep/interview_prep/#before-being-selected","title":"Before being selected","text":""},{"location":"internship_prep/interview_prep/#prepare-for-questions-about-resume-experiences","title":"Prepare for questions about resume experiences","text":"<p>For each technical experience on your resume, ensure that the source code is easily accessible with documentation and diagrams. For example, push it to a GitHub repository (making it private if required). This is helpful when explaining technical details during an interview</p> <p>Next, prepare for common interview questions related to your experiences:</p> <ul> <li>Describe a time when you had a conflict when working on a team, and how you resolved it<ul> <li>I have been asked this many, many times</li> </ul> </li> <li>Tell me about yourself<ul> <li>Come up with a couple responses for different types of jobs</li> </ul> </li> <li>Describe a problem that you solved</li> <li>Describe your process for debugging code</li> <li>Describe a leadership experience</li> </ul> <p>Good topics to practice talking about include:</p> <ul> <li>Collaborating with colleagues to find the best possible solution<ul> <li>Receptive to feedback and varying perspectives</li> <li>Each person has different strenghts</li> </ul> </li> <li>Bottom up approach - reusability, test each small part</li> <li>Besides performance, consider reliability, sustainable, and reparability</li> </ul>"},{"location":"internship_prep/interview_prep/#prepare-for-open-ended-technical-questions","title":"Prepare for open-ended technical questions","text":"<p>It is more important to be able to clearly explain your ongoing thought process than to solve the problem</p> <p>Video on technical interview preparation by Microsoft</p> <p>Use the STAR method:</p> <p>Situation</p> <ul> <li>Listen/read the problem carefully and multiple times</li> <li>Describe/write the problem in your own words</li> <li>State assumptions</li> <li>Don't be afraid to ask clarifying questions</li> </ul> <p>Task</p> <ul> <li>Describe/write a simple example</li> <li>Think about the inputs and outputs</li> </ul> <p>Action</p> <ul> <li>Demonstrate logical thinking<ul> <li>Give initial thoughts, broad overview</li> <li>Subdivide into different parts</li> </ul> </li> <li>Devise initial solution</li> <li>Walkthrough with a simple example to verify correctness</li> <li>Think about potential optimizations</li> </ul> <p>Results</p> <ul> <li>Test final solution</li> <li>Ask for feedback, or what they would do, and discuss from there</li> </ul>"},{"location":"internship_prep/interview_prep/#gain-interview-experience","title":"Gain interview experience","text":"<ul> <li>Any interview practice is good practice<ul> <li>Apply to as many positions as possible</li> <li>Talk with professors about research opportunities</li> <li>Make an appointment with your co-op advisor</li> <li>Ask a friend</li> </ul> </li> <li>Explain technical experiences so that even people not in the industry can follow</li> <li>Practice on-the-spot thinking; connect your answers with relevant experiences</li> </ul>"},{"location":"internship_prep/interview_prep/#after-being-selected","title":"After being selected","text":""},{"location":"internship_prep/interview_prep/#study-job-requisites","title":"Study job requisites","text":"<p>Be able to explain them in your own words and relate to your past experiences.</p>"},{"location":"internship_prep/interview_prep/#prepare-for-position-specific-questions","title":"Prepare for position-specific questions","text":"<ul> <li>Why do you want to work for the company/team/position?<ul> <li>Research reputation, work culture, products/services, etc.</li> </ul> </li> <li>Prepare questions for your interviewer intended to<ul> <li>Help decide if the position is right for you</li> <li>Demonstrate your enthusiasm and passion for the company/position and its products</li> </ul> </li> </ul>"},{"location":"internship_prep/interview_prep/#position-specific-technical-questions","title":"Position-specific technical questions","text":"<p>Places where you can find past/common interview questions include:</p> <ul> <li>Past or current employees and interns</li> <li>Glassdoor</li> <li>Reddit</li> <li>LeetCode</li> <li>Cracking the Coding Interview</li> <li>My hardware and software Reference and Questions pages briefly go over the content covered and questions asked in my past interviews<ul> <li>They are intended as a way to review and gauge your knowledge rather than to learn new topics</li> </ul> </li> </ul>"},{"location":"internship_prep/interview_prep/#after-the-interview","title":"After the interview","text":""},{"location":"internship_prep/interview_prep/#analyze-results","title":"Analyze results","text":"<p>Immediately after the interview, I like to summarize what happened:</p> <ul> <li>What were the different sections of the interview, and how much time was spent on each section?</li> <li>What technical questions were asked?</li> <li>What non-technical questions were asked?</li> </ul> <p>Then I can use this experience to better prepare for future interviews:</p> <ul> <li>Notes on how the interview went overall</li> <li>Research any technical questions that I was unsure of</li> <li>Prepare for any non-technical questions that I could answer better</li> </ul>"},{"location":"internship_prep/hardware/hw_questions/","title":"Hardware Questions","text":"<p>I have listed some hardware technical questions that were asked in my interviews at Intel, Microchip, Qualcomm, and Microsoft below. With the academic and extracurricular experience to be a candidate for more technical positions when seeking my second internship, the average question difficulty rose accordingly. The answers to some of these questions can be found in the Hardware Reference page.</p>"},{"location":"internship_prep/hardware/hw_questions/#seeking-my-first-internship","title":"Seeking my first internship","text":"<ul> <li>Difference between a latch and DFF</li> <li>Difference between a Mealy and Moore FSM</li> <li>Implement gates (AND, NOR, etc.) from 2:1 multiplexers</li> <li>Create a DFF with reset from a regular DFF</li> </ul>"},{"location":"internship_prep/hardware/hw_questions/#seeking-my-second-internship","title":"Seeking my second internship","text":"<ul> <li>Draw and compare the waveforms for a latch and DFF</li> <li>How to select between a Mealy and Moore FSM</li> <li>Implement a buffer and inverter from a NAND or XOR gate</li> <li>Implement DFFs (synchronous and asynchronous reset, enable) and latch in Verilog</li> <li>Different types of power dissipation</li> <li>Different types of adders</li> <li>Hardware multiplication and alternatives</li> <li>One hot vs binary FSM state encodings</li> <li>Causes of inferred latches</li> <li>Applications of latches</li> <li>Causes and fixes for setup and hold time violations</li> <li>Causes and fixes for clock domain crossings; metastability</li> <li>Gray code applications</li> <li>SystemVerilog vs Verilog<ul> <li>Purpose of for loops in SystemVerilog</li> </ul> </li> <li>Transistors</li> <li>RC circuits</li> <li>Clock jitter, skew</li> <li>Setup and hold slack</li> <li>Draw a state machine diagram of an elevator (more details about the elevator's functionality were given)</li> </ul>"},{"location":"internship_prep/hardware/hw_questions/#resources","title":"Resources","text":"<ul> <li>VLSI Interview Questions</li> </ul>"},{"location":"internship_prep/hardware/hw_reference/","title":"Hardware Reference","text":""},{"location":"internship_prep/hardware/hw_reference/#asic-vs-fpga-vs-processor","title":"ASIC vs FPGA vs Processor","text":"ASIC FPGA Processor Performance High Medium Low Power Consumption Low Medium High Flexibility None Somewhat General purpose Design Process Difficult, long Medium Easy, quick (software) Cost Cheaper for large volumes Cheaper for small volumes Cheapest (mass-produced)"},{"location":"internship_prep/hardware/hw_reference/#fpga-design-process","title":"FPGA Design Process","text":"(Left) FPGA Design Process; (Right) 3-Input LUT <ol> <li>Synthesis: break logic into LUTs<ul> <li>A \\(n\\)-input LUT can make any \\(n\\)-input function, combinational or sequential</li> </ul> </li> <li>Mapping/placing: place LUTs into CLBs such that<ul> <li>Connected LUTs are close to each other</li> <li>Critical path is approximately minimized</li> </ul> </li> <li>Routing: connecting logic blocks together<ul> <li>Uses programmable switches: NMOS acts as conductor when the configuration bit (part of bitstream) is 1, connecting the tracks</li> <li>Connects CLBs with segments of varying lengths<ul> <li>Shorter segments minimize delay, noise, and crosstalk</li> <li>Longer segments have extra capacitance and limited quantity, but minimize the number of segments needed</li> </ul> </li> </ul> </li> <li>Timing analysis: looks for timing violations<ul> <li>Path delay is sum of all logic and wire delays</li> </ul> </li> </ol>"},{"location":"internship_prep/hardware/hw_reference/#memory","title":"Memory","text":"<ul> <li>Types: DRAM (volatile, capacitor), SRAM (volatile, cross-coupled inverter), ROM (nonvolatile)</li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#caches","title":"Caches","text":"<ul> <li>Offer temporal (recently accessed in cache), and spatial (multi-word blocks) locality<ul> <li>Instructions tend to be more spatial, data could be both</li> <li>To better support temporal: decrease block size and number of sets, or increase associativity<ul> <li>Block size: number of bytes per cache line</li> <li>Associativity: number of cache lines per set</li> </ul> </li> <li>Memory mountains<ul> <li>Temporal: levels, based on which level of cache can fully contain the working set</li> <li>Spatial: throughput decreases with increasing stride length until stride length \u2265 block size</li> </ul> </li> </ul> </li> <li>Amdahl's law: speedup = \\(\\frac{1}{(1-a) + \\frac{a}{k}}\\), where \\(a\\) is the percentage of code sped up by \\(k\\) times<ul> <li>Increasing associativity decreases conflict misses, but decreases performance (specifically lookup and replacement times)</li> </ul> </li> <li>Write through is good for synchronization, write back is faster when modifying same cache line multiple times</li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#power-dissipation","title":"Power Dissipation","text":""},{"location":"internship_prep/hardware/hw_reference/#types-of-power-dissipation","title":"Types of Power Dissipation","text":"<p>Dynamic: every time a node is switched from 0 to 1 or 1 to 0, some power is dissipated</p> \\[ P_{dynamic} = \\alpha fCV^2 \\] <ul> <li>\\(\\alpha\\) is the activity factor: probability a node will switch</li> <li>\\(f\\) is the frequency</li> <li>\\(C\\) is the capacitance</li> <li>\\(V\\) is the voltage</li> </ul> <p>Static: every transistor on the chip leaks, even when it is not doing anything</p>"},{"location":"internship_prep/hardware/hw_reference/#power-dissipation-vs-transistor-size","title":"Power Dissipation vs Transistor Size","text":"<p>As digital circuits shrink (and chip voltages decrease):</p> <ul> <li>Dynamic power decreases: \\(V\\) and \\(C\\) decrease in dynamic power equation</li> <li>Static power increases: leakage current increases</li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#reducing-power-dissipation","title":"Reducing Power Dissipation","text":"<ul> <li>Custom chip<ul> <li>Turn off regions that are unused to reduce static power (dark silicon)</li> <li>Multiple threshold libraries</li> </ul> </li> <li>FPGA<ul> <li>Minimize area (less leakage, may allow for smaller FPGA)</li> </ul> </li> <li>General<ul> <li>Lower voltage</li> <li>Revise implementation (add instead of multiply, invert bus)</li> <li>Pipelining: adding flip flops prevents glitches from propagating, which reduces glitch power<ul> <li>Disadvantage: flip flops use power, which places extra burden on the clock tree</li> </ul> </li> </ul> </li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#timing","title":"Timing","text":""},{"location":"internship_prep/hardware/hw_reference/#gate-delay","title":"Gate Delay","text":"<ul> <li>Every wire and transistor has parasitic capacitance (physical property)</li> <li>Delay of logic gate is the time it takes to charge the capacitance on its output, which is the net capacitance of the parasitic capacitances of the wires and transistors<ul> <li>Proportional to \\(RC\\) (\\(nRC\\) for \\(n\\) gates, where \\(n\\) is the number of gates in the path)<ul> <li>\\(R\\) depends on size of logic gate transistor (bigger \u2192 lower \\(R\\)) and length of wire (longer \u2192 higher \\(R\\))</li> <li>\\(C\\) depends on the same things in the same ways as \\(R\\), but also depends on fanout (larger fanout \u2192 higher \\(C\\))<ul> <li>Fanout: number of inputs driven by an output<ul> <li>Reduce fanout by splitting net, but this increases the number of gates</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#modelling-delays","title":"Modelling Delays","text":""},{"location":"internship_prep/hardware/hw_reference/#setup-time","title":"Setup Time","text":"<p>How long input needs to be stable before clock edge to be accepted.</p> \\[ T_{\\text{clk}} \\geq T_{\\text{clk2qMax}} + T_{\\text{combinationalMax}} + T_{\\text{setup}} \\] <ul> <li>Setup violation causes metastability<ul> <li>Fix by slowing down clock or moving registers around to reduce length of critical path<ul> <li>For example, pipelining, which is best when critical path is much longer than other paths)</li> </ul> </li> </ul> </li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#hold-time","title":"Hold Time","text":"<p>How long input needs to be stable after clock edge to be accepted.</p> \\[ T_{\\text{clk2qMin}} + T_{\\text{combinationalMin}} \\geq T_{\\text{hold}} \\] <ul> <li>Hold time violation causes data loss<ul> <li>Could be caused by clock skew</li> <li>Fix by increasing gate/DFF delays or adding buffers to data path or earlier clock paths<ul> <li>Cannot be fixed by increasing clock period</li> </ul> </li> </ul> </li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#glitches","title":"Glitches","text":"<ul> <li>Glitch: undesired short-lived pulse that occurs before a signal settles to its intended value</li> <li>Caused by unequal arrival times of inputs on combinational gates + same output is generated by different values of state bits<ul> <li>Ex 1: XORing the bits 01 \u2192 0, transitioning to 11 or 00 \u2192 1, before settling at 10</li> <li>Ex 2: clock gating incorrectly such that the output of the AND gate (enable) glitches<ul> <li>Clock gating is used to reduce dynamic power</li> </ul> </li> <li>Any transition consumes power, so unnecessary transitions consume unnecessary power</li> </ul> </li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#glitches-in-fsms","title":"Glitches in FSMs","text":"<p>Effects</p> <ul> <li>Edges triggered inputs (i.e. clocks) may be falsely triggered</li> <li>Enables may glitch before being sampled, causing garbage to be read</li> <li>Hard to detect</li> </ul> <p>Avoiding glitches</p> <ul> <li>Try to make it so that only 1 input bit changes at a time</li> <li>Register next outputs<ul> <li>Quick fix, but adds one cycle delay, does not support direct dependence of outputs on inputs, requires extra registers</li> </ul> </li> <li>Eliminate combinational logic after state machine<ul> <li>Move before current state machine or next state machine</li> </ul> </li> <li>Require outputs to either be:<ul> <li>Driven from a state bit or its complement</li> <li>Driven by (simple) combinatorial logic that depends on a single state bit<ul> <li>Safest for signals that are constant for the duration of the state machine's operation</li> </ul> </li> </ul> </li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#clock-domain-crossings","title":"Clock Domain Crossings","text":"<ul> <li>Clock domain: all DFFs in each clock domain run on the same clock</li> <li>Signals that cross clock domains will likely cause timing violations</li> <li>Asynchronous signals also cause timing violations in a similar manner</li> <li>On a timing violation, output may get the right value, wrong value, or become metastable (value between 0 and 1 that resolves randomly)<ul> <li>May cause system-wide failure</li> </ul> </li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#metastability","title":"Metastability","text":"<p>If the time it takes for a metastable node to resolve is greater than setup slack (negative slack), then system-wide failure occurs.</p> <ul> <li>Quantitately measure with MTBF: average time between two failure-causing instances of metastability</li> </ul> \\[ \\text{MTBF}(t_{\\text{slack}}) = \\frac{e^{\\frac{t_{\\text{slack}}}{C_0}}}{C_1f_{\\text{clk}}f_{\\text{data}}} \\] <ul> <li>Increases exponentially with slack</li> <li>Maximize by synchronizing asynchronous inputs</li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#slack","title":"Slack","text":"<p>Time when it actually happens vs when it must happen (positive slack is when it happens before must).</p> <ul> <li>Setup: \\(T_{\\text{required}} - T_{\\text{arrival}}\\)</li> <li>Hold: \\(T_{\\text{arrival}} - T_{\\text{required}}\\)</li> <li>\\(T_{\\text{required}}\\): clock path<ul> <li>Reg2reg and input2reg: \\(T_{clk} + T_{setup}\\)</li> <li>Reg2output: unconstrained</li> </ul> </li> <li>\\(T_{\\text{arrival}}\\): data path<ul> <li>Reg2reg and reg2output: \\(T_{clk2q} + T_{combinational}\\)</li> <li>Input to reg: \\(T_{combinational}\\)</li> </ul> </li> </ul> <p>Reference: Setup and hold slack</p>"},{"location":"internship_prep/hardware/hw_reference/#practical-issues","title":"Practical Issues","text":"<ul> <li>Retiming in pipelining: move combinational logic from one side of DFF to another to balance the critical path length of each stage</li> <li>Clock skew: clock edge arrives at different components at different times (might be due to the difference in path lengths)<ul> <li>Implications<ul> <li>change in \\(F_{max}\\): changes setup time</li> <li>Failure of design: hold time violations and functional problems losing current value because second clock arrives too late</li> </ul> </li> <li>Fix using<ul> <li>Buffers</li> <li>H-tree network (route so that same distance to each flop)</li> <li>Global clocks that have dedicated routing to minimize clock skew; however, limited availability</li> </ul> </li> </ul> </li> <li>PLLs: mixed signal circuit that generates output clocks aligned to an input clock<ul> <li>Motivation: usually there is clock skew between the input and output clocks of a clock divider/multiplier, and routing a generated clock is unpredictable</li> <li>Can even generate output clocks with the same phase as input clock</li> </ul> </li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#arithmetic-circuits","title":"Arithmetic Circuits","text":""},{"location":"internship_prep/hardware/hw_reference/#adders","title":"Adders","text":""},{"location":"internship_prep/hardware/hw_reference/#1-bit-adders","title":"1-bit adders","text":"<ul> <li>Half adder: two 1-bit inputs, 2-bit output</li> <li>Full adder: half adder + carry in and out</li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#multi-bit-adders","title":"Multi-bit adders","text":"<p>There are several types of carry propagate adders:</p> <p>Ripple-carry (slow): chain of full adders that bitwise add N-bit inputs</p> <ul> <li>Delay: \\(t_{ripple} \\approx Nt_{FA}\\), where \\(t_{FA}\\) is the delay of a full adder<ul> <li>Proportional to N</li> </ul> </li> <li>FPGAs are optimized for ripple carry adders, so faster than other implementations when \\(N \u2264 16\\)</li> </ul> <p>Carry select (less slow): calculate higher-order bits for both cases of carry-in, then select correct case when carry in is available</p> <ul> <li>Requires more hardware, but slightly faster than ripple-carry adders</li> </ul> <p>Carry-lookahead (fast): compute carry out for \\(k\\)-bit blocks using generate and propagate signals</p> <ul> <li>\\(G_i = A_iB_i\\)<ul> <li>\\(G_{3:0} = G_3+P_3(G_2+P_2(G_1+P_1G_0))\\)</li> </ul> </li> <li>\\(P_i = A_i+B_i\\)<ul> <li>\\(P_{3:0} = P_3P_2P_1P_0\\)</li> </ul> </li> <li>\\(C_{out} = G_{in} + P_{in}C_{in}\\)</li> <li>Delay of 4-bit adder: \\(4 t_{PD}\\), where \\(t_{PD}\\) is the delay of a single AND/OR gate<ul> <li>All \\(G,P\\) terms available in \\(t_{PD}\\)</li> <li>\\(C\\) terms (sum of products) available in \\(2t_{PD}\\)</li> <li>Results from full adder (sum, no carry out) available in \\(t_{PD}\\)</li> </ul> </li> <li> <p>Not very scalable, so typical to make a N-bit CLA out of smaller \\(k\\)-bit CLAs</p> <ul> <li>Delay: \\(t_{CLA} = t_{pg} + t_{pg\\_block} + \\frac{N}{k-1}t_{AND\\_OR} + kt_{FA}\\)<ul> <li>\\(t_{pg}\\): delay to generate all \\(G_i,P_i\\)</li> <li>\\(t_{pg\\_block}\\): delay to generate all \\(G_{i:j},P_{i:j}\\) for every \\(k\\)-bit CLA</li> <li>\\(t_{AND\\_OR}\\): delay from \\(C_{in}\\) to \\(C_{out}\\) of the final AND/OR gate in a \\(k\\)-bit CLA</li> <li>\\(t_{CLA} = 4\\log_4(N)t_{PD}\\)<ul> <li>Proportional to \\(\\log N\\)</li> </ul> </li> </ul> </li> </ul> <p></p> </li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#miscellaneous-arithmetic-circuits","title":"Miscellaneous Arithmetic Circuits","text":"<ul> <li>Subtractor: take two's complement of second input</li> <li>Equality comparator: bitwise XNOR</li> <li>Less than comparator: subtractor; last (sign) bit is 1 when A &lt; B</li> <li>Shift less than: all 0's, except LSB is result of less than comparator (A &lt; B)</li> <li>Shifters: arithmetic shifters (<code>&lt;&lt;&lt;</code> <code>&gt;&gt;&gt;</code>) are the same as logical shifters (<code>&lt;&lt;</code> <code>&gt;&gt;</code>) except the right arithmetic shift is sign extended</li> <li>Division: most complex, always use multi-cycle dividers in practice</li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#multipliers","title":"Multipliers","text":"<p>Multiplication is a complex operation: avoid if possible</p> <ul> <li>Add instead of multiply: \\(7 \\times 2 \\rightarrow 7 + 7\\)</li> <li>Shift instead of multiply for powers of 2: \\(7 \\times 2 \\rightarrow 7 &lt;&lt; 2\\)</li> </ul> <p>1-bit x N-bit: AND operation</p> <p>N-bit x N-bit: sum of shifted 1-bit x N-bit for each bit in the second term (long multiplication method)</p> <p>Large multiplier: constructed out of smaller N-bit x N-bit multipliers</p> <ul> <li> <p>Let \\(A\\) be a \\(2N\\)-bit number, with \\(A_H\\) being the upper N bits and \\(A_L\\) being the lower N bits. Let \\(B,B_H,B_L\\) be defined a similar matter. Therefore,</p> \\[ \\displaylines{A = A_{2N-1}A_{2N-2}...A_0 = A_H \\times 2^N + A_L \\\\               B = B_{2N-1}B_{2N-2}...B_0 = B_H \\times 2^N + B_L} \\] <ul> <li>\\(2^N\\) shifts left by N bits</li> </ul> </li> <li> <p>The product of \\(A\\) and \\(B\\) is</p> \\[ A \\times B = A_HB_H2^{2N} + (A_HB_L+A_LB_H)2^N + A_LB_L \\] <ul> <li>\\(2N\\)-bit x \\(2N\\)-bit produces a \\(4N\\)-bit result</li> </ul> </li> </ul> <p>Signed multipliers subtract last number (two's complement) rather than add it</p> <p>Serial (multi-cycle) multiplier:</p> <pre><code>P = 0\nwhile B != 0:\n    if B(0) == 1:\n        P = P + A\n    A = A &lt;&lt; 1\n    B = B &gt;&gt; 1\n</code></pre>"},{"location":"internship_prep/hardware/hw_reference/#decimal-numbers","title":"Decimal Numbers","text":""},{"location":"internship_prep/hardware/hw_reference/#fixed-point","title":"Fixed Point","text":"<p>Like decimal numbers but base 2. For example,</p> \\[ 101.01 = 1 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0 + 0 \\times 2^{-1} + 1 \\times 2^{-2} = 5.25 \\] <ul> <li>N-bit representation has \\(M\\) integer bits (left of decimal point) and \\(N-M\\) fraction bits (right of decimal point)</li> <li>Arithmetic operations: align decimal then perform as usual<ul> <li>Multiplication and division result in loss of precision</li> </ul> </li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#floating-point","title":"Floating Point","text":"<p>Binary scientific notation:</p> \\[ \\pm 1.m \\times 2^i \\Leftrightarrow \\{\\text{sign}\\}1.\\{\\text{mantissa}\\} \\times \\{\\text{base}\\}^{\\{\\text{exponent}\\}} \\] <p>The floating point representation saves the sign, biased exponent, and mantissa fields of the number in binary scientific notation</p> <ul> <li>IEEE 754 single-precision (32-bits): 1 sign bit, 8 biased exponent bits, 23 mantissa bits</li> <li>IEEE 754 double-precision (64-bits): 1 sign bit, 11 biased exponent bits, 52 mantissa bits</li> <li>Bias exponent to be positive to circumvent the need for a signed exponent field<ul> <li>Bias is 127 for single-precision and 1023 for double-precision</li> </ul> </li> <li>Range<ul> <li>Largest positive: exponent is all 1s except LSB, mantissa is all 1s</li> <li>Smallest positive: exponent is all 0s except LSB, mantissa is all 0s</li> </ul> </li> <li> <p>Special cases</p> <ul> <li>Subnormal (smaller than what is normally possible): exponent all 0s, mantissa is interpreted as being preceded by 0<ul> <li>Smallest positive: mantissa is all 0's except the LSB</li> </ul> </li> </ul> Number Sign Biased Exponent Mantissa 0 X 00000000 00000000000000000000000 \\(\\infty\\) 0 11111111 00000000000000000000000 \\(-\\infty\\) 1 11111111 00000000000000000000000 NaN X 11111111 non-zero </li> </ul> <p>Example: write \\(-58.25_{10}\\) in 32-bit floating point</p> <ol> <li>Convert decimal to binary: \\(58.25_{10} = 111010.01_2\\)</li> <li>Write in binary scientific notation: \\(1.1101001 \\times 2^5\\)</li> <li>Fill in the fields<ul> <li>Sign bit: \\(1\\) (negative)</li> <li>Biased exponent: \\(127 + 5 = 132 = 10000100_2\\)</li> <li>Mantissa: \\(110 1001 0000 0000 0000 0000_2\\)</li> </ul> </li> </ol>"},{"location":"internship_prep/hardware/hw_reference/#fixed-vs-floating-point","title":"Fixed vs Floating Point","text":"<ul> <li>Fixed: simpler circuitry, smaller, less power consumption, cheaper</li> <li>Floating point: higher dynamic range of representable values<ul> <li>Not synthesizable unless explicitly accounted for; useful for simulation</li> </ul> </li> </ul>"},{"location":"internship_prep/hardware/hw_reference/#systemverilog","title":"SystemVerilog","text":"<ul> <li>Types of modules<ul> <li>Behavioral: describe what module does (gate level)</li> <li>Structural: describe how it is built from simpler modules (instantiates other modules)</li> </ul> </li> <li>Unlike regular Verilog, SystemVerilog supports OOP and generate statements<ul> <li>Generate statements are for readability; they don\u2019t change hardware implementation</li> </ul> </li> </ul>"},{"location":"internship_prep/software/sw_questions/","title":"Software Questions","text":"<p>I have listed some software technical questions that were asked in my interviews at Tesla, Amazon, and Google below.</p>"},{"location":"internship_prep/software/sw_questions/#questions-from-swe-interviews","title":"Questions from SWE interviews","text":"<p>Similar or even identical questions can be found on LeetCode.</p> <ul> <li>Parse string into dictionary</li> <li>Move all elements of a certain value in a list to the end</li> <li>Ping pong (simple multithreading)</li> <li>OOP (inheritance)</li> <li>Find the maximum MaximaCount out of all the categories in <code>categories</code><ul> <li><code>categories</code> is a string</li> <li>The MaximaCount of character <code>c</code> representing a category in <code>categories</code> is the number indices <code>i</code> such that the   frequency of <code>c</code> is maximum in the prefix of the string up to the index <code>i</code></li> </ul> </li> <li>Check similar passwords<ul> <li><code>newPasswords</code> and <code>oldPasswords</code> are lists of strings</li> <li>Return a list where the <code>i</code>th element is <code>\"YES\"</code> if <code>newPasswords[i]</code> and <code>oldPasswords[i]</code> are similar, else <code>\"NO\"</code><ul> <li>Passwords are similar if there exists a set of characters in the new password that can be incremented by 1   (e.g., <code>\"z\"</code> -&gt; <code>\"a</code>\", <code>\"a\"</code> -&gt; <code>\"b\"</code>) to make the old password a subsequence<ul> <li>Subsequence: a sequence that can be derived from the given sequence by deleting 0 or more elements without   changing the order of the remaining elements</li> </ul> </li> </ul> </li> </ul> </li> <li>Remove ancestors of a tree starting from the leaf nodes, removing newly created leaf nodes first</li> <li>Remove ancestors of a tree starting from the leaf nodes, removing newly created leaf nodes last</li> <li>Stock price fluctuation</li> <li>Given an equation as a string, calculate the final result<ul> <li>E.g., <code>\"add(5,mul(2,pow(5,2)))\"</code> -&gt; <code>55.0</code></li> </ul> </li> </ul>"},{"location":"internship_prep/software/sw_questions/#questions-from-hardware-embedded-interviews","title":"Questions from hardware &amp; embedded interviews","text":"<ul> <li>Multiply numbers up to 100 digits long</li> <li>Alphabetically sort a string</li> <li>Check, set, clear, and toggle a bit</li> <li>Polymorphism<ul> <li>See 40+ OOPs Interview Questions and Answers</li> </ul> </li> <li>Python questions<ul> <li>Datatypes</li> <li>List vs array</li> <li>Performance advantage of Numpy</li> </ul> </li> <li>C/C++ questions<ul> <li>See Top Embedded C Interview Questions</li> </ul> </li> </ul>"},{"location":"internship_prep/software/sw_reference/","title":"Software Reference","text":""},{"location":"internship_prep/software/sw_reference/#data-structures-algorithms","title":"Data Structures &amp; Algorithms","text":""},{"location":"internship_prep/software/sw_reference/#study-method","title":"Study Method","text":"<p>Which resources I use to study DSA and how I use them.</p>"},{"location":"internship_prep/software/sw_reference/#general","title":"General","text":"<p>Learn/review:</p> <ul> <li>The Tech Interview Handbook is one of the best resources for preparing for SWE interviews<ul> <li>Learn/review topics following the Algorithms Cheatsheet<ul> <li>Lists topics in priority order</li> <li>For each topic, provides a short summary, explains related implementation techniques, gives related LeetCode problems, and much more</li> </ul> </li> <li>Customize a LeetCode study plan according to your needs using Grind 75</li> </ul> </li> <li>Programiz DSA tutorials is a more comprehensive resource on DSA topics<ul> <li>Provides detailed explanations</li> <li>Gives example implementations in multiple popular programming languages</li> </ul> </li> <li>NeetCode.io is an excellent resource that classifies LeetCode problems by topic<ul> <li>Lists both Blind 75 and NeetCode 150 LeetCode problems</li> <li>Provides an algorithms roadmap</li> <li>Can be used to track your progress</li> <li>Has a number of courses, most of which require a paid membership</li> </ul> </li> </ul> <p>Implement:</p> <ul> <li>I implement key algorithms myself and commit them to a private repository</li> <li>I use the LeetCode VS Code extension   to solve LeetCode problems in VS Code<ul> <li>First I try to solve problems myself</li> <li>Then I compare it to the most upvoted solutions on LeetCode</li> <li>Next I comment what I could have done better</li> <li>Sometimes I reimplement my solution using what I learned</li> <li>I commit these solutions to a private repository</li> </ul> </li> </ul>"},{"location":"internship_prep/software/sw_reference/#before-an-online-assessment-or-interview","title":"Before an online assessment or interview","text":"<ol> <li>I create a new folder in my LeetCode solutions repo (see the section above for more details)<ul> <li>The file path can be customized using the <code>leetcode.filePath</code> VS Code setting</li> </ul> </li> <li>I solve Leetcode problems that the company has asked in the past<ul> <li>Search for relevant Reddit posts</li> <li>Can filter LeetCode problems by company using LeetCode Patterns</li> <li>There may be an up-to-date repository that sorts Leetcode problems asked by companies by frequency<ul> <li>Here is the repository for 2022 (last updated May 2022)</li> </ul> </li> </ul> </li> </ol>"},{"location":"internship_prep/software/sw_reference/#after-an-online-assessment-or-interview","title":"After an online assessment or interview","text":"<ol> <li>Record technical questions and solutions</li> <li>Finish, clean up, and add comments or research and implement better solution</li> <li>Commit to private repository</li> </ol>"},{"location":"internship_prep/software/sw_reference/#reference","title":"Reference","text":"<p>The notes I wrote while reviewing the main topics listed in the Google Technical Internships Interview Preparation guide. At the bottom of each section I included a relevant resource that you can go to for more.</p>"},{"location":"internship_prep/software/sw_reference/#merge-sort-vs-quicksort","title":"Merge sort vs quicksort","text":"<p>Comparing two popular sorting algorithms.</p> Basis for comparison Merge sort Quicksort Definition Merges two sorted lists of equal size Concatenates two sorted lists with elements that are less and greater than the pivot Space complexity \\(O(n)\\) \\(O(1)\\) (in place) Time complexity (worst case) \\(O(n\\log n)\\) \\(O(n^2)\\), random pivot minimizes chance of worst case Efficiency for large \\(n\\) Efficient for larger arrays, consistent speed Inefficient for larger arrays, but fast for small \\(n\\) Dependency of speed on \\(n\\) Consistent for any \\(n\\) Faster for small \\(n\\), slower for large \\(n\\) Preferred for Linked lists, because merging can be done in \\(O(1)\\) time and space given reference to the previous node Arrays, because quicksort requires lots of random access which arrays can do in \\(O(1)\\) since elements are contiguous <p>For more, see GeeksforGeeks quick sort vs merge sort article.</p>"},{"location":"internship_prep/software/sw_reference/#min-and-max-heaps","title":"Min and max heaps","text":"<p>A min heap is a complete tree where all paths from root to leaf are non-decreasing. Since the root node is always the minimum element, min heaps are useful for problems that require accessing or removing the minimum element efficiently. Similarly, max heaps are used to access or remove the maximum element efficiently.</p> Min heap function Description Insert Insert at the leftmost spot in the last level then heapify up in \\(O(h)=O(\\log n)\\) Remove min Swap the leftmost spot in the last level with the root (min) then heapify down in \\(O(h)=O(\\log n)\\) Build Heapify down from root in \\(O(n)\\) Heap sort Build then remove min \\(n\\) times makes non-ascending order in \\(O(n\\log n)\\); could reverse to make non-descending order <p>For more, see Programiz heap sort notes.</p>"},{"location":"internship_prep/software/sw_reference/#adjacency-list-vs-matrix","title":"Adjacency list vs matrix","text":"<p>Comparing two popular graph representations.</p> <p>Characteristics of these graphs:</p> <ul> <li>\\(n\\) vertices</li> <li>\\(m\\) edges</li> <li>No parallel edges</li> <li>No self-loops</li> </ul> Basis for comparison Adjacency list Adjacency matrix Representation Linked list of neighbors for each edge Rows and cols are the edges Space complexity \\(\\Theta(n+m)\\) \\(\\Theta(n^2)\\) incidentEdges(\\(v\\)) \\(\\text{deg}(v)\\) \\(\\Theta(n)\\) areAdjacent(\\(v\\), \\(w\\)) \\(\\text{min}(\\text{deg}(v), \\text{deg}(w))\\) \\(\\Theta(1)\\) insertVertex(\\(o\\)) \\(\\Theta(1)\\) \\(\\Theta(n)\\) amortized insertEdge(\\(v\\), \\(w\\), \\(o\\)) \\(\\Theta(1)\\) \\(\\Theta(1)\\) removeVertex(\\(v\\)) \\(\\text{deg}(v)\\) \\(\\Theta(n)\\) amortized removeEdge(\\(e\\)) \\(\\Theta(1)\\) \\(\\Theta(1)\\) removeEdge(\\(v\\), \\(w\\)) \\(\\Theta(\\text{min}(\\text{deg}(v), \\text{deg}(w)))\\) \\(\\Theta(1)\\) <p>For more, see Programiz adjacency list and adjacency matrix notes.</p>"},{"location":"internship_prep/software/sw_reference/#breadth-first-vs-depth-first-search","title":"Breadth-first vs depth-first search","text":"<p>Comparing two popular search algorithms.</p> Basis for comparision Bread-first search Depth-first search Edge types Discovery and cross Discovery and back Implemented using Queue Stack Used for Shortest path from root to any vertex Topological sort <p>Common features:</p> <ul> <li>Discovery edges make a spanning tree</li> <li>Can be used to detect cycles and count components</li> </ul> <p>For more, see Programiz BFS and DFS notes.</p>"},{"location":"internship_prep/software/sw_reference/#greedy-algorithms","title":"Greedy algorithms","text":"<ul> <li>Dijkstra: finds shortest path of directed graph with nonnegative edge weights<ul> <li>Checks\u00a0<code>D(u) + w(u, v)</code>\u00a0for being less\u00a0<code>D(v)</code>\u00a0in RELAX.</li> </ul> </li> <li>Kruskal: find MST using min heap of edge weights in \\(O(m\\log n)\\)</li> <li>Prim: find MST of undirected graph<ul> <li>Checks\u00a0<code>w(u, v)</code>\u00a0for being less than\u00a0<code>D(v)</code>\u00a0in RELAX.</li> </ul> </li> </ul> <p>For more, see Programiz greedy algorithms notes.</p>"},{"location":"internship_prep/software/sw_reference/#np-complete","title":"NP-complete","text":"<p>Definitions:</p> <ul> <li>\\(P\\): all decision problems that can be solved in polynomial time</li> <li>\\(NP\\): all decision problems for which the instances where the answer is \"yes\" have proofs that can be verified in   [nondeterministic] polynomial time<ul> <li>Has an efficient verifier, but may not have an efficient solver</li> </ul> </li> <li>NP-complete: all problems in \\(NP\\) which can be reduced to any other \\(NP\\) problem in polynomial time<ul> <li>Has an efficient verifier, but does not have an efficient solver</li> </ul> </li> <li>NP-hard: all problems that are reducible to a known NP-complete problem (like boolean satisfiability, SAT)<ul> <li>Any NP-complete problem can be reduced to any NP-hard problem in polynomial time \u2192   all NP-complete problems can be reduced to any NP-hard problem in polynomial time \u2192   if there is a solution to one NP-hard problem in polynomial time, there is a solution all \\(NP\\) problems in   polynomial time</li> </ul> </li> </ul> <p>For more, see this StackOverflow answer.</p> <p>Proving a problem \\(P\\) is NP-complete:</p> <ol> <li>Prove that \\(P\\) is in \\(NP\\)<ul> <li>Show what kind of proof for instances where the answer is \"yes\" can be checked in polynomial time</li> </ul> </li> <li>Prove that \\(P\\) can be reduced to a \\(NP\\) problem in polynomial time<ul> <li>Give a polynomial time algorithm that transforms instances of a known NP-complete problem into instances of \\(P\\)   with the same answer</li> </ul> </li> </ol> <p>Popular problems:</p> <ul> <li>Traveling salesman: Given a list of cities and the distances between each pair of cities,   what is the shortest possible route that visits each city exactly once and returns to the origin city?</li> <li>Knapsack: Given a set of items, each with a weight and a value,   determine the number of each item to include in a collection so that the total weight is less than or equal to   a given limit and the total value is as large as possible</li> </ul>"},{"location":"internship_prep/software/sw_reference/#software-development-concepts","title":"Software Development Concepts","text":"<p>Be able to explain concepts in your own words and give examples of you applying them.</p>"},{"location":"internship_prep/software/sw_reference/#agile","title":"Agile","text":"<ul> <li>Iterative software development</li> <li>Purpose: rapid delivery of high quality software</li> <li>Documenting and resolving issues</li> <li>Kanban vs Scrum</li> </ul>"},{"location":"internship_prep/software/sw_reference/#testing","title":"Testing","text":"<ul> <li>Test-driven development</li> <li>Black vs white box testing</li> <li>How to develop a test plan</li> <li>Types of tests: unit, integration, functional, regression</li> <li>Fault injection</li> <li>Corner cases</li> <li>Root-cause analysis</li> <li>Parts of a good bug report</li> </ul>"},{"location":"reference/bookmarks/","title":"Bookmarks","text":"<p>Miscellaneous references and tools that I use unrelated to the other pages.</p>"},{"location":"reference/bookmarks/#references","title":"References","text":"<ul> <li>GDB Commands</li> <li>JavaScript and HTML DOM Reference</li> <li>Regular Expression Tester</li> </ul>"},{"location":"reference/bookmarks/#tools","title":"Tools","text":"<ul> <li>Bitwarden - password manager</li> <li>Inkdrop - material design markdown notetaking app for developers</li> <li>Notion - notetaking and project management<ul> <li>Video introduction to Notion</li> <li>Students get the Personal Pro plan for free</li> </ul> </li> <li>TinyWow - various PDF, image, and video tools</li> <li>Wandb - better data analytics, tailored for machine learning applications<ul> <li>Example Wandb report</li> </ul> </li> </ul>"},{"location":"reference/mkdocs/","title":"Material for MkDocs","text":"<p>This website was created using Material for MkDocs, a simple yet powerful framework for creating documentation. All it requires is a Markdown file for every page, and a configuration file that connects everything together. With Material for MkDocs providing [somewhat] customizable features, frontend, and deployment methods, I can focus my time on the content of the site.</p>"},{"location":"reference/mkdocs/#useful-documentation-pages","title":"Useful Documentation Pages","text":"<ul> <li>Search for icons</li> <li>Admonition types</li> <li>Keyboard keys syntax</li> <li>Setup</li> <li>Reference</li> </ul>"},{"location":"reference/mkdocs/#setup","title":"Setup","text":""},{"location":"reference/mkdocs/#page-tree-example","title":"Page Tree Example","text":"<p>Based on this site. Paths in the page tree are relative to <code>docs/</code>.</p> <pre><code>nav:\n  - Home: index.md                      # Homepage, first tab\n  - Setup:                              # Second tab\n    - setup/index.md                    # Second tab homepage\n    - Settings: setup/settings.md       # Second tab first page\n  - Reference:                          # Third tab\n    - Mkdocs: reference/docker.md.md    # Third tab first page (no third tab homepage)\n</code></pre>"},{"location":"reference/mkdocs/#plugins","title":"Plugins","text":"<p>If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set.</p> <ul> <li>Automatic documentation generation using mkdocstrings</li> <li>Page revision time using mkdocs-git-revision-date-localized-plugin<ul> <li>Note: times are in UTC</li> </ul> </li> </ul>"},{"location":"reference/mkdocs/#reference","title":"Reference","text":"<p>Demonstrations of the features I use. View this page raw for the Markdown syntax used. View the documentation reference for what be in the configuration file to enable a feature.</p>"},{"location":"reference/mkdocs/#collapsible-blocks-code-block-formatting-embedding-external-files","title":"Collapsible blocks, code block formatting, embedding external files","text":"Click to toggle open/close <p>Syntax highlighting for inline code: Python's <code>range()</code> function...</p> Embed of docs/reference/mkdocs.md<pre><code>mkdocs-git-revision-date-localized-plugin==1.*\nmkdocs-material[imaging]~=9.0\n</code></pre>"},{"location":"reference/mkdocs/#content-tabs-icons-glossary","title":"Content tabs, icons, glossary","text":"<p>Markdown:</p>  docs/example.md includes/abbreviations.md <pre><code>1. Use the term (i.e. \"WSL\")\n2. Import glossary by adding to end of the file: --8&lt;-- \"includes/abbreviations.md\"\n</code></pre> <ol> <li>Define the term <pre><code>*[WSL]: Windows Subsystem for Linux\n</code></pre></li> </ol> <p>Result:</p> <p>WSL is a term in the glossary.</p>"},{"location":"reference/mkdocs/#table-keyboard-keys","title":"Table, keyboard keys","text":"Shortcut Description Alt + (Shift) + Tab Navigate between windows Win+Ctrl + Left/Right Navigate between virtual desktops F11 Fullscreen"},{"location":"reference/mkdocs/#task-list-inline-math-equations","title":"Task list, inline math equations","text":"<ul> <li> Result of task list</li> <li> Prove \\(e=mc^2\\)</li> </ul> <p>Bug: Line break workaround in math equations</p>"},{"location":"reference/mkdocs/#ci-cd-using-github-actions","title":"CI / CD Using GitHub Actions","text":""},{"location":"reference/mkdocs/#deploy","title":"Deploy","text":"<p>The Materials for MkDocs documentation gives an example deploy workflow. I modified it slightly to properly support page revision times using mkdocs-git-revision-date-localized-plugin. I also used encrypted secrets to use Google Analytics without exposing the key. This workflow is run on every push to the main branch</p>"},{"location":"reference/mkdocs/#deploy-workflow","title":"Deploy workflow","text":"Deploy workflow for this project .github/workflows/deploy.yml"},{"location":"reference/mkdocs/#lint","title":"Lint","text":""},{"location":"reference/mkdocs/#markdown-linter","title":"Markdown linter","text":"<p>I use markdownlint to check for programmatic and stylistic errors in the application's Markdown files.</p> <p>I configured the errors using a <code>.markdownlint.json</code> file in the project's root directory to support the syntax of Material for MkDocs features. This workflow is run on every push and pull request to the main branch.</p> markdownlint configuration for this project .markdownlint.json<pre><code>{\n  \"default\": true,\n  \"MD013\": {\n    \"line_length\": 180,\n    \"tables\": false\n  },\n  \"MD004\": {\n    \"style\": \"dash\"\n  },\n  \"MD007\": {\n    \"indent\": 4\n  },\n  \"MD033\": {\n    \"allowed_elements\": [\"figure\", \"figcaption\"]\n  },\n  \"MD035\": {\n    \"style\": \"---\"\n  },\n  \"MD040\": false,\n  \"MD041\": false,\n  \"MD046\": false\n}\n</code></pre> <p>markdownlint resources:</p> <ul> <li>markdownlint rules reference</li> <li>markdownlint extension for VS Code</li> </ul>"},{"location":"reference/mkdocs/#check-markdown-links","title":"Check Markdown links","text":"<p>I check for broken links using markdown-link-check. This action checks links to pages on the internet (<code>https://www.google.com</code>) and files in the repository (<code>./index.md</code>). However, it does not check whether a section exists in the file (<code>./index.md#overview</code>). This workflow is run on every push and pull request to the main branch, as well as on a schedule.</p>"},{"location":"reference/mkdocs/#lint-workflows","title":"Lint workflows","text":"Lint workflow for this project .github/workflows/lint.yml Scheduled Tasks workflow for this project .github/workflows/scheduled_tasks.yml<pre><code>name: Scheduled Tasks\n\non:\n  schedule:\n    # Every Saturday at 11:00am UTC\n    - cron: '0 11 * * 6'\n\njobs:\n  # https://github.com/gaurav-nelson/github-action-markdown-link-check\n  markdown-link-check:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Check out code\n      uses: actions/checkout@v2\n\n    - name: Check markdown pages for broken links\n      uses: gaurav-nelson/github-action-markdown-link-check@v1\n      with:\n        config-file: '.mlc_config.json'\n        folder-path: 'docs, includes'\n</code></pre>"},{"location":"reference/mkdocs/#resources","title":"Resources","text":"<ul> <li>Schedule workflow runs</li> </ul>"},{"location":"reference/mkdocs/#example-sites","title":"Example Sites","text":"<ul> <li>Material for MkDocs and Pymdown Extensions documentation</li> <li>up42<ul> <li>Uses the mkdocstrings plugin for the Code Reference</li> </ul> </li> <li>This site!</li> </ul>"},{"location":"reference/python/","title":"Python","text":""},{"location":"reference/python/#conventions","title":"Conventions","text":"<ul> <li>PEP 8 styling guideline walkthrough<ul> <li>Using the flake8 linter - checks for errors (including failing to comply with PEP 8 guidelines</li> </ul> </li> <li>Meaning and naming conventions around single and double underscores</li> </ul>"},{"location":"reference/python/#imports","title":"Imports","text":"<ul> <li>Recap on imports, absolute vs relative imports</li> <li>Python 2 vs 3 imports</li> </ul>"},{"location":"reference/python/#pip","title":"Pip","text":"<p>Package installer.</p> Command Description <code>pip install &lt;package&gt;</code> Install the latest version of a package <code>pip install &lt;package&gt;==&lt;version&gt;</code> Install the specified version of a package <code>pip install -r requirements.txt</code> Install the packages from a <code>requirements.txt</code> file <code>pip list --outdated</code> View outdated packages <code>pip install --upgrade &lt;package&gt;</code> Upgrade the desired packages <code>pip uninstall &lt;package&gt;</code> Uninstall a package <p>If pip has not been added to the path, replace <code>pip</code> with <code>python -m pip</code> in the commands above.</p>"},{"location":"reference/python/#pyenv","title":"Pyenv","text":"<p>Easily switch between multiple versions of Python.</p> <ul> <li>Installation</li> <li>Commands reference</li> </ul>"},{"location":"reference/python/#scripting","title":"Scripting","text":"<ul> <li>Built-in library for command-line parsing: argparse tutorial</li> <li>Built-in library for logging: logging tutorial</li> <li>Testing framework: PyTest tutorial</li> <li>Built-in exceptions</li> <li>Regular expressions tutorial</li> <li>Top data science libraries</li> </ul>"},{"location":"reference/python/#virtual-environments","title":"Virtual Environments","text":"<p>Bundle all the packages and their versions to run an application so that they do not conflict with the globally installed python packages.</p> <ol> <li> <p>Create virtual environment directory (suggested name: <code>.venv</code>).</p>  Windows Linux <pre><code>py -m venv .venv\n</code></pre> <pre><code>python3 -m venv .venv\n</code></pre> </li> <li> <p>Activate virtual environment. Use the active shell's corresponding <code>activate</code> script.</p>  Windows Powershell Linux <pre><code>.venv\\Scripts\\Activate.ps1\n</code></pre> <pre><code>source .venv/bin/activate\n</code></pre> </li> <li> <p>Install the required packages: pip section</p> </li> <li> <p>Create/update the <code>requirements.txt</code> file (to record the versions of packages used in the project)</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> </li> <li> <p>Exit the virtual environment</p> <pre><code>deactivate\n</code></pre> </li> </ol> <p>VS Code integration</p> <p>After selecting <code>.venv/bin/python</code> to be the Python interpreter, terminals and debuggers will run in the virtual environment by default.</p>"},{"location":"reference/python/#resources","title":"Resources","text":"<ul> <li>Virtual Environments and Packages</li> </ul>"},{"location":"reference/shortcuts/","title":"Windows Keyboard Shortcuts","text":"<p>Shortcuts with italicized descriptions are Windows 11 only.</p>"},{"location":"reference/shortcuts/#general","title":"General","text":"Shortcut Description Alt+Tab Switch between open windows and browser tabs Ctrl+Shift+Esc Open task manager Win Show or hide the start menu Win+A Show or hide the quick settings Win+D Show or hide the desktop Win+G Open Xbox Game Bar (built-in video capture) Win+L Lock the computer Win+N Open notification center and calendar Win+Shift+S Take a screenshot using Snipping Tool Win+Up Maximize window Win + Left / Right Maximize window to the left/right side of the screen F11 Full screen application"},{"location":"reference/shortcuts/#file-explorer","title":"File Explorer","text":"Shortcut Description Win+E Open File Explorer Ctrl+F Select the search box Ctrl+Shift+N Create a new folder"},{"location":"reference/shortcuts/#microsoft-edge","title":"Microsoft Edge","text":"Shortcut Description Ctrl+F Find on page (Shift) + Enter Navigate between matches to your Find Bar search Ctrl+H Open history Ctrl+L Select the URL in the address bar to edit Ctrl+R Refresh the current tab Ctrl+T Open a new tab and switch to it Ctrl+W Close the current tab Ctrl+Shift+W Close the current window Ctrl+Shift+Y Open Collections Ctrl+0 Reset zoom Ctrl + + / - Adjust zoom Ctrl + (Shift) + Tab Navigate between tabs Ctrl + left click Open link in new tab F12 Open Developer Tools"},{"location":"reference/shortcuts/#onenote","title":"OneNote","text":"<p>Specifically, the OneNote application from the Microsoft Store.</p> Shortcut Description Ctrl+F Open search box Down While searching, preview the next result Ctrl+N Create a new page at the end of the current section Ctrl+Alt+N Create a new page below the current page Ctrl+Alt+Shift+N Create a new sub-page below the current page Ctrl+T Create a new section Ctrl+. Toggle bulleted list formatting Ctrl+/ Toggle numbered list formatting Ctrl+Alt + - / + Hide and show navigation pane Alt+= Create equation Shift+Enter Insert a line break Tab at the end of a line Create a table"},{"location":"reference/shortcuts/#taskbar","title":"Taskbar","text":"Shortcut Description Shift + left click Open an instance of an app Ctrl+Shift + left click Open an app as an administrator"},{"location":"reference/shortcuts/#virtual-desktop","title":"Virtual Desktop","text":"Shortcut Description Win+Tab Open task view Win+Ctrl+D Add a virtual desktop Win+Ctrl + Left / Right Navigate between virtual desktops"},{"location":"reference/shortcuts/#windows-terminal","title":"Windows Terminal","text":"<p>My Windows Terminal Shortcuts can be found in the Terminal page.</p>"},{"location":"reference/shortcuts/#resources","title":"Resources","text":"<ul> <li>Keyboard shortcuts in Windows</li> <li>Keyboard shortcuts in Microsoft Edge</li> <li>Keyboard shortcuts in OneNote</li> </ul>"},{"location":"reference/ssh/","title":"SSH","text":""},{"location":"reference/ssh/#setup-ssh-keys","title":"Setup SSH Keys","text":"<p>SSH key-based authentication allows you SSH into remote machines without a password.</p> <p>Guide: Setup SSH keys</p> <p>Notes on the guide</p> <ul> <li>Although the guide is for Ubuntu 20.04, it should work for most Linux distributions<ul> <li>It also works in PowerShell, using the given alternative to <code>ssh-copy-id</code></li> </ul> </li> </ul>"},{"location":"reference/ssh/#other-resources","title":"Other Resources","text":"<ul> <li><code>ssh</code> command guide</li> <li>Specify the starting directory for a SSH session</li> <li> <p>Setup SSH keys on Synology DSM 6</p> Notes on the Synology guide <p>The command to restart the sshd service will likely not work. In this case, telnet in to restart the service</p> <pre><code>sudo synoservicectl --restart sshd  # restarting the sshd service may fail\ntelnet -l &lt;username&gt; &lt;host_name&gt;  # telnet into the NAS\nsudo synoservicectl --start sshd  # start the sshd service\n</code></pre> </li> </ul>"},{"location":"reference/unix/","title":"/ Linux/MacOS Commands","text":"<p>Linuxize.com has some amazing guides for common Linux/MacOS commands and tasks. If their site does not have cover the desired content, <code>man &lt;command&gt;</code> to view the full documentation of a command.</p>"},{"location":"reference/unix/#linuxize-basic-linux-commands","title":"Linuxize Basic Linux Commands","text":"<ul> <li>Covers man, pwd, cd, ls, cat, touch, mkdir, ln, rm, cp, mv, apt, dnf, chmod, chown, sudo, useradd, passwd, userdel, groupadd, groupdel, and usermod</li> </ul>"},{"location":"reference/unix/#alias","title":"alias","text":"<p>Aliases are custom commands that map to a longer command.</p> Command Description <code>alias &lt;alias&gt;=\"&lt;command&gt;\"</code> Create an alias <code>which &lt;alias/command&gt;</code> Locate an alias/command <code>alias</code> View the mappings of all aliases <p>My shell aliases can be found in <code>aliases.zsh</code>.</p> <p>Resources:</p> <ul> <li>Linuxize alias guide</li> </ul>"},{"location":"reference/unix/#du","title":"du","text":"<p>Estimates disk usage of the given files or directories.</p> Command Description <code>du -ha &lt;file/directory&gt;</code> Get size of each file within the directory recursively <code>du -h --max-depth=1 &lt;directory&gt;</code> Get size of directories up to the first level <code>du -hs</code> Get only the size of the current working directory <p>Resources:</p> <ul> <li>Linuxize du guide</li> </ul>"},{"location":"reference/unix/#find","title":"find","text":"<p>Recursively searches for files and directories.</p> Command Description <code>find -type f -iname &lt;filename&gt;</code> Search for files by name, ignoring case <code>find -type f -name '*.&lt;file_extension&gt;'</code> Search for files by extension <p>Resources:</p> <ul> <li>Linuxize find guide</li> </ul>"},{"location":"reference/unix/#less","title":"less","text":"<p>Read contents of a file or command output quickly and without filling up terminal.</p> Command Description <code>less &lt;filename&gt;</code> Read the contents of a file <p>| <code>&lt;command&gt; | less</code> | Read the standard output (what would be printed to the terminal) of <code>&lt;command&gt;</code> |</p> Commands inside less Command Description <code>h</code> Display help <code>q</code> Exit <code>g</code> Go to first line of file #<code>g</code> Go to line # <code>G</code> Go to last line of file <code>j</code>/<code>k</code> Move forward and backward by line <code>f</code>/<code>b</code> Move forward and backward by window <code>-N</code> Toggle line numbers <code>-S</code> Toggle chopping long lines <code>/&lt;string&gt;</code> Search for <code>&lt;string&gt;</code> <code>n</code>/<code>N</code> Navigate between search matches <p>Resources:</p> <ul> <li>Linuxize less guide</li> </ul>"},{"location":"reference/unix/#screen","title":"screen","text":"<p>I use screen to perform long-running tasks on a remote machine. It enables me to connect and disconnect from the machine (i.e. via SSH) without exiting the command.</p> Command Description <code>screen -S &lt;session_name&gt;</code> Start a named screen session <code>screen -d</code> Detach from current screen Ctrl+Alt then D Detach from current screen when a command is running <code>screen -ls</code> List running screens and their session IDs <code>screen -r &lt;session_id&gt;</code> Reattach to screen <code>screen -d -r &lt;session_id&gt;</code> Reattach to screen from inside another screen <code>exit</code> Terminate current screen <code>screen</code> in WSL <p>Error Message</p> <pre><code>$ screen\nCannot make directory '/run/screen': Permission denied\n</code></pre> <p>To Fix</p> <ol> <li>Create an alternate screen directory with the appropriate permissions <pre><code>mkdir ~/.screen &amp;&amp; chmod 700 ~/.screen\n</code></pre></li> <li>Point the <code>SCREENDIR</code> environment variable to that directory .bashrc file or equivalent<pre><code>export SCREENDIR=$HOME/.screen\n</code></pre></li> </ol> <p>Resources:</p> <ul> <li>Linuxize screen guide</li> </ul>"},{"location":"reference/unix/#additional-guides","title":"Additional Guides","text":"<ul> <li>Linuxize shebang guide - run script without having to specify the interpreter</li> <li>Linuxize add to the PATH environment variable</li> </ul>"},{"location":"reference/wsl/","title":"WSL","text":""},{"location":"reference/wsl/#backing-up-and-restoring-wsl-distributions","title":"Backing up and Restoring WSL Distributions","text":"<ol> <li> <p>Export a WSL distribution for backup/migration from PowerShell</p> <pre><code>wsl --export &lt;distribution_name&gt; &lt;filename&gt;\n</code></pre> </li> <li> <p>To import a WSL distribution from PowerShell</p> <pre><code>wsl --import &lt;distribution_name&gt; &lt;install_location&gt; &lt;filename&gt;\n</code></pre> </li> <li> <p>This new WSL distribution will start as the root user. To start as another user, add the following to <code>/etc/wsl.conf</code> from inside the distribution</p> wsl.conf<pre><code>[user]\ndefault=&lt;username&gt;\n</code></pre> </li> <li> <p><code>wsl --shutdown</code> from PowerShell and restart to see the change</p> </li> </ol>"},{"location":"reference/wsl/#more-wsl-commands","title":"More WSL Commands","text":"Command Description <code>wsl -l -v</code> List WSL distributions along with their state and version <code>wsl -t &lt;distribution_name&gt;</code> Terminate/shut down a WSL distribution <code>wsl --unregister &lt;distribution_name&gt;</code> Unregisters WSL distribution and deletes root filesystem <ul> <li><code>wsl --help</code> to see all WSL commands and their descriptions</li> </ul>"},{"location":"reference/wsl/#commands-inside-wsl-distributions","title":"Commands Inside WSL Distributions","text":"<ul> <li> <p>Sign in to Git using the Git Credential Manager in Windows</p> <pre><code>git config --global credential.helper \"/mnt/c/Program\\ Files/Git/mingw64/libexec/git-core/git-credential-manager-core.exe\"\n</code></pre> </li> <li> <p>Open a WSL file/directory using the Windows default program</p> <ul> <li>For example: File Explorer for directories, Excel for CSV files</li> </ul> <pre><code>wslview &lt;file_or_directory&gt;\n</code></pre> </li> </ul>"},{"location":"reference/wsl/#resources","title":"Resources","text":"<ul> <li>Install WSL</li> <li>Export and import WSL distributions</li> <li>Change default user in WSL 2</li> <li>Get started using Git on WSL</li> </ul>"},{"location":"reference/git/git_advanced/","title":"Advanced Git Features","text":"<p>Once you have mastered the basics, consider adding its more advanced features to your tool box.</p>"},{"location":"reference/git/git_advanced/#rebase","title":"Rebase","text":"<p>Rebase is a powerful, but if used incorrectly it can permanently mess up your Git history. Always remember to check the commit history with <code>git log</code> to ensure that it is what you want before force pushing it to the remote repository with <code>git push -f</code>.</p>"},{"location":"reference/git/git_advanced/#standard-mode","title":"Standard Mode","text":"<p>From git-rebase Documentation - Git</p> <p>Assume the following history exists and the current branch is \"topic\":</p> <pre><code>          A---B---C topic\n         /\n    D---E---F---G main\n</code></pre> <p>From this point, the result of either of the following commands:</p> <pre><code>git rebase main\ngit rebase main topic\n</code></pre> <p>would be:</p> <pre><code>                  A'--B'--C' topic\n                 /\n    D---E---F---G main\n</code></pre> <p>If the local main branch is outdated with the remote main branch, use</p> <pre><code>git rebase origin/main\n</code></pre> <p>to rebase the current branch onto the remote main branch.</p>"},{"location":"reference/git/git_advanced/#interactive-mode","title":"Interactive Mode","text":"<p>From git rebase | Atlassian Git Tutorial</p> <p>Running git rebase with the <code>-i</code> flag begins an interactive rebasing session. Instead of blindly moving all of the commits to the new base, interactive rebasing gives you the opportunity to alter individual commits in the process. This lets you clean up history by removing, splitting, and altering an existing series of commits.</p> <pre><code>git rebase -i main\n</code></pre> <p>rebases the current branch onto main but uses an interactive rebasing session. This opens an editor where you can enter commands for each commit to be rebased. These commands determine how individual commits will be transferred to the new base. You can also reorder the commit listing to change the order of the commits themselves. Once you've specified commands for each commit in the rebase, Git will begin playing back commits applying the rebase commands.</p> Interactive Rebasing Edit Commands <pre><code>pick 2231360 some old commit\npick ee2adc2 Adds new feature\n\n# Rebase 2cf755d..ee2adc2 onto 2cf755d (9 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n</code></pre>"},{"location":"reference/git/git_advanced/#resolving-conflicts","title":"Resolving Conflicts","text":"<p>From git-rebase Documentation - Git</p> <p>In case of conflict, git rebase will stop at the first problematic commit and leave conflict markers in the tree. You can use git diff to locate the markers (&lt;&lt;&lt;&lt;&lt;&lt;) and make edits to resolve the conflict. For each file you edit, you need to tell Git that the conflict has been resolved, typically this would be done with</p> <pre><code>git add &lt;filename&gt;\n</code></pre> <p>After resolving the conflict manually and updating the index with the desired resolution, you can continue the rebasing process with</p> <pre><code>git rebase --continue\n</code></pre> <p>Alternatively, you can undo the git rebase with</p> <pre><code>git rebase --abort\n</code></pre>"},{"location":"reference/git/git_advanced/#remote-repositories","title":"Remote Repositories","text":"<p>There may be cases where you want to keep mirrors of your repository.</p> <ul> <li>The original remote repository is given the identifier <code>origin</code> by default</li> </ul> Command Description <code>git remote add &lt;repo name&gt; &lt;repo base url&gt;.git</code> Add a remote repository and give it the identifier <code>&lt;repo name&gt;</code> <code>git push &lt;repo name&gt; --all</code> Push all branches to a remote repository <code>git remote -v</code> List remote repositories <code>git remote remove &lt;repo name&gt;</code> Remove a remote repository"},{"location":"reference/git/git_advanced/#submodules","title":"Submodules","text":"<p>Add a Git repository inside another Git repository, usually to serve as a dependency.</p> Command Description <code>git submodule add &lt;repo base url&gt;.git</code> Add a repository as a submodule of the current repository <code>git diff --submodule</code> Better diff for submodules from the parent repository <code>git submodule update --remote --merge</code> Update submodules to their latest remote commits <code>git submodule update --init --recursive</code> Recursively initialize and update submodules to the commits in the remote parent repository <code>git clone --recurse-submodules &lt;repo base url&gt;.git</code> Clone a repository and recursively initialize all its submodules <p>Resources:</p> <ul> <li>Submodule chapter in the Git book</li> <li>Create a submodule that tracks a specific branch</li> <li>Properly remove a submodule</li> </ul>"},{"location":"reference/git/git_advanced/#tags","title":"Tags","text":"<p>Tag a commit. I usually create tags as part of publishing a release on GitHub, but the CLI commands may come in handy if you want to delete a release and its associated tag.</p> Command Description <code>git tag -d &lt;tag name&gt;</code> Delete local tag <code>git tag -a &lt;tag name&gt; -m \"&lt;description&gt;\"</code> Create an annotated tag for the current commit <code>git push --tags</code> Push tags to the remote repository <code>git show &lt;tag name&gt;</code> See tag information <code>git checkout &lt;tag name&gt;</code> Checkout to the commit that a tag points to <p>Resources:</p> <ul> <li>Tagging - Git</li> </ul>"},{"location":"reference/git/git_advanced/#work-trees","title":"Work Trees","text":"<p>Git work trees allow you to have allow you to develop multiple branches of a repository at the same time.</p> Command Description <code>git clone --bare &lt;repo base url&gt;.git</code> Clone a repository as a bare repository <code>git worktree add &lt;directory&gt;</code> Create a work tree at the specified location, checking out to the branch of the same name or creating one if it does not exist <code>git worktree add -b &lt;branch name&gt; &lt;directory&gt;</code> Same as above, but needed if <code>&lt;branch name&gt;</code> contains forward slashes <code>git worktree list</code> List all work trees <code>git worktree remove &lt;directory&gt;</code> Remove a worktree at the specified location <p>Resources:</p> <ul> <li>Git's Best And Most Unknown Feature</li> </ul>"},{"location":"reference/git/git_commands/","title":"Git Commands","text":"<p>Useful Git commands that build on top of the add, commit, and push workflow.</p> <p>File Specifiers</p> <p>File specifiers are used in commands like <code>add</code>, <code>restore</code>, and <code>rm</code> to specify which file(s) to apply to.</p> Specifier Description <code>-u</code> Files in the remote repository that were modified in the current directory <code>.</code> Everything new or modified in current directory <code>&lt;path/to/directory&gt;</code> Everything new or modified in a directory <code>&lt;path/to/file&gt;</code> New or modified file <p>Use <code>git status</code> to check if the command had the desired outcome.</p>"},{"location":"reference/git/git_commands/#cherry-pick","title":"cherry-pick","text":"<p>Cherry picking is useful but not always best practice. It can create duplicate commits, and merging would be preferred in most scenarios. To avoid duplicate commits I do not merge the branch with the commit(s) I am cherry picking into the main branch. I use cherry picking to clean up a branch's commit history when changing which branch its PR is merging into.</p> Command Description <code>git cherry-pick &lt;commit hash&gt;</code> Add commit to the current branch <code>git cherry-pick &lt;commit A hash&gt;^..&lt;commit B hash&gt;</code> Add commits from A to B inclusive, where A is older than B, to the current branch"},{"location":"reference/git/git_commands/#log","title":"log","text":"Command Description <code>git log</code> Check the commit history of the current branch"},{"location":"reference/git/git_commands/#mv","title":"mv","text":"<p>Sometimes after moving a file and making changes to it Git isn't able to detect that the file was moved. Instead, it thinks the file was deleted and a new one was created, which wipes its file history. To preserve file history, commit the move before making any changes to the file. This is most easily done with the <code>git mv</code> command.</p> Command Description <code>git mv &lt;src&gt; &lt;dest or dest directory&gt;</code> Like <code>mv</code> but stages the move"},{"location":"reference/git/git_commands/#reset","title":"reset","text":"<p>Undo committed (but not pushed) changes.</p> Command Description <code>git reset HEAD~1</code> Unstage the changes made in last commit, but do not modify the files <code>git reset --hard HEAD~5</code> Undo the changes made in the last 5 commits"},{"location":"reference/git/git_commands/#restore","title":"restore","text":"<p>Undo uncommitted changes.</p> Command Description <code>git restore &lt;file specifier&gt;</code> Revert files to their state on the remote repository (delete local changes) <code>git restore --staged &lt;file specifier&gt;</code> Unstage/un-add files"},{"location":"reference/git/git_commands/#rm","title":"rm","text":"<p>Remove files</p> Command Description <code>git rm &lt;file specifier&gt;</code> Remove files from Git and delete them <code>git rm --cached &lt;file specifier&gt;</code> Remove files from Git but do not delete them"},{"location":"reference/git/git_commands/#stash","title":"stash","text":"<p>Stash uncommitted changes so that you can pull or switch branches.</p> Command Description <code>git stash</code> Stash changes <code>git stash pop</code> Restore changes"},{"location":"reference/git/git_contributing/","title":"Contributing to a Git Repository","text":"<p>For a walkthrough of the contribution process, read First Contributions.</p> <p>Comments on the First Contributions walkthrough</p> <ul> <li>If you have access to the repository, there is no need to fork it; clone and work on the repository itself</li> </ul>"},{"location":"reference/git/git_contributing/#goals","title":"Goals","text":"<ul> <li>Main branch only contains working code</li> <li>Collaborate with others effectively (i.e., code reviews)</li> <li>Clear, progressive development process</li> </ul>"},{"location":"reference/git/git_contributing/#issues","title":"Issues","text":"<ul> <li>Bug: Describe issue, steps to reproduce, expected behavior, screenshots, additional context</li> <li>Feature: Give context, describe solution, describe alternatives, additional context</li> <li>Link to relevant code, projects, labels, milestones, etc.</li> </ul>"},{"location":"reference/git/git_contributing/#commits","title":"Commits","text":"<ul> <li>Make a commit for each unit change, giving it a descriptive name<ul> <li>For example: \"added <code>&lt;function_name&gt;</code> function\", \"updated tests to match\"</li> </ul> </li> <li>At the end of a session <code>git push</code>, to update the remote repository with your changes</li> </ul>"},{"location":"reference/git/git_contributing/#pull-requests","title":"Pull requests","text":"<p>Compared to committing directly to the main branch, pull requests can be used to ensure that the code in the main branch is clear and correct through:</p> <ul> <li>Continuous integration: automated linting and testing</li> <li>Code reviews: getting someone to read over and test your code</li> </ul> <p>Creating a pull request:</p> <ul> <li>Describe changes, expected behavior, and how to verify</li> <li>Link pull request to the issue it resolves: linking a pull request to an issue</li> <li>Can create as a draft if incomplete, which disables merging<ul> <li>New commits to the branch will be automatically added to the pull request</li> </ul> </li> <li>Add reviewers to test the pull request</li> <li>Once the pull request is ready to merge into the main branch, I recommend the \"Squash and Merge\" merge method to keep the main branch commit history clear and concise, or \"Rebase and Merge\" for hotfixes and one off commits<ul> <li>Learn more about GitHub merge types and best practices here</li> </ul> </li> </ul>"},{"location":"reference/git/git_contributing/#updating-your-local-repository","title":"Updating your local repository","text":"Update the current local branch and the remote tracking branches for all other branches<pre><code>git pull --rebase\n</code></pre> <ul> <li>Why use <code>--rebase</code>?</li> <li>Make <code>git pull</code> rebase by default with <code>git config --global pull.rebase true</code></li> </ul> Update current local branch with commits in the main local branch<pre><code>git merge origin/main\n</code></pre> Delete remote tracking branches that were deleted from the remote repository<pre><code>git remote prune origin\n</code></pre> <ul> <li>Make <code>git pull</code> or <code>git fetch</code> prune by default with <code>git config --global fetch.prune true</code><ul> <li>Local branches tracking a remote that has been prunes are identified as gone in the output of <code>git branch -vv</code><ul> <li>Delete these branches with <code>git branch -D &lt;branch1&gt; &lt;branch2&gt; ...</code></li> </ul> </li> <li>Reference: Cleaning up old remote git branches</li> </ul> </li> </ul>"},{"location":"reference/git/git_contributing/#github-specific-best-practices","title":"GitHub-specific best practices","text":"<ul> <li>Labels: GitHub labels best practices</li> <li>Milestones and projects: Milestones vs. projects</li> <li>Releases: Releasing Projects on GitHub</li> <li>Discussions: gather feedback and ideas from non-code collaborators<ul> <li>Best practices for community conversations</li> </ul> </li> <li>Actions: automate, customize, and execute software development workflows<ul> <li>Actions documentation</li> <li>GitHub Marketplace - Actions</li> <li>Explanation of this project's workflows</li> <li>Encrypted secrets documentation</li> </ul> </li> <li>Wiki: host very basic documentation, GitHub Flavored Markdown only<ul> <li>Advanced Formatting in GitHub Markdown</li> <li>Render a code snippet in an issue</li> </ul> </li> <li>Choosing the right open source license</li> </ul>"},{"location":"setup/","title":"Setup","text":"<p>My Windows laptop configuration as a computer engineering student.</p>"},{"location":"setup/#philosophy","title":"Philosophy","text":""},{"location":"setup/#best-of-both-worlds","title":"Best of Both Worlds","text":"<p>Windows and Linux excel at different things:</p> <ul> <li>Windows has a better GUI and more powerful productivity apps</li> <li>Linux is better for programming</li> </ul> <p>I use each OS to their advantage by running Windows on my personal device and using WSL to get a Linux environment on it.</p> WSL vs dual-boot <p>Dual-booting Windows and Linux is another way of running both OS's on a device, but WSL offers very similar performance in the majority of tasks while being much more convenient: WSL distributions can be started in a matter of seconds and can be used simultaneously with Windows apps. Especially with WSL adding the support for Linux GUI apps in Windows 11, there are a dwindling number of reasons to dual-boot. Some reasons include WSL's poor filesystem performance and the computer having little RAM (&lt; 16GB).</p>"},{"location":"setup/#minimize-mouse-usage","title":"Minimize Mouse Usage","text":"<p>Every switch between using the mouse and keyboard takes time and energy, both of which I have little of. Thus, I use:</p> <ul> <li>Vim commands. See the IDE page to learn more.</li> <li>Keyboard shortcuts in Windows as much as possible. See the Windows Keyboard Shortcuts page for a list of the shortcuts I frequently use.</li> </ul>"},{"location":"setup/#same-experience-across-computers-and-programs","title":"Same Experience Across Computers and Programs","text":"<p>To have the same experience on all the computers I use (personal, work, school, homelab), I:</p> <ol> <li>Created a dotfiles repository that contains my dotfiles and an installation script</li> <li>Standardized keyboard shortcuts across programs<ul> <li>Largely based on my Vim and Microsoft Edge keyboard shortcuts</li> </ul> </li> <li>Standardized CLI configuration across shells</li> <li>Wrote these notes so that I remember how everything works</li> </ol>"},{"location":"setup/ide/","title":"IDE","text":"<p>As a computer engineer, a significant portion of my time is spent programming. After using a variety of IDEs I settled on Vim and VS Code, extensively configuring them to maximize my productivity.</p>"},{"location":"setup/ide/#showcase","title":"Showcase","text":"<p>This is what my VS Code configuration looked like when I was still using the setup repository. Currently my configuration looks mostly the same, but uses the Vim extension instead of the Neovim extension.</p> <p></p>"},{"location":"setup/ide/#vim-keybindings","title":"Vim Keybindings","text":"<p>My IDEs of choice support Vim keybindings, which significantly reduces my mouse usage while programming. After overcoming the steep learning curve, I was able to write code much faster.</p> <p>Here are some Vim learning resources that I recommend:</p> <ul> <li>Vim Tutorial</li> <li>Vim As Your Editor</li> <li>Mastering the Vim Language</li> <li>How to Do 90% of What Plugins Do (With Just Vim)</li> </ul> <p>I have extensively customized my Vim configuration based on the following configurations:</p> <ul> <li>amix/vimrc</li> <li>tylerlum/vim_configuration</li> </ul>"},{"location":"setup/ide/#vim","title":"Vim","text":"<p>I use Vim to quickly modify a file from the terminal. I do not use any plugins, opting to use Neovim or VS Code when working on projects. Vim is noticeably faster than Neovim with plugins or VS Code for large files.</p> <p>Configuration file: <code>.vimrc</code></p>"},{"location":"setup/ide/#neovim","title":"Neovim","text":"<p>Neovim is a fork of Vim which has powerful plugins that adds IDE features. I use it to edit projects in the CLI. Since configuring these plugins is complicated and breaks all the time (because Neovim is still in rapid development), I use the LazyVim distribution to manage all of this for me. And for anything else that I want, LazyVim makes it easy to add my own configuration and plugins.</p> <p>Configuration files: <code>.config/nvim</code></p>"},{"location":"setup/ide/#vs-code","title":"VS Code","text":"<p>VS Code has great support for debugging, remote development, Git, most programming languages, and much more through extensions. It is also extremely configurable, with its settings and keyboard shortcuts being able to be modified through a UI or JSON file.</p> <p>To get Vim keybindings in VS Code I use the Vim extension. You can enable various features in its settings, which include some Vim extensions and using a <code>.vimrc</code>.</p> <p>I use VS Code's built-in Settings Sync to sync my configuration, but have copied some of my configuration files to my dotfiles repository for your reference:</p> <ul> <li><code>reference_dotfiles/vscode/keybindings.json</code></li> <li><code>reference_dotfiles/vscode/settings.json</code></li> </ul> <p>Resources:</p> <ul> <li>VS Code user interface</li> </ul>"},{"location":"setup/ide/#extensions","title":"Extensions","text":"<p>In addition to the Vim extension and language and framework extension packs, I found the following extensions to be useful:</p> Extension Name Description Edit csv View and edit csv files with a table UI Git History View git log, file history, compare branches or commits GitLens See who committed each line of code and when they did it Live Share Extension Pack Real-time collaborative development Path Intellisense Autocomplete filenames Peacock Change workspace border color to be able to quickly identify workspaces Remote Development Support for development using WSL, SSH, and Docker toggle semicolon Ctrl+; to add or remove the semicolon at the end of a line vscode-icons Clean file icons for the file explorer vscode-pdf Display pdf file in VS Code"},{"location":"setup/ide/#quirks","title":"Quirks","text":"<p>Several quirks that I have noticed with my VS Code configuration:</p> <ul> <li>Undo and redo behavior is different in Vim and VS Code. Thus saving a file, making a change, then using U to undo will not bring the file back to its saved state<ul> <li>Workarounds: enable auto-saving or map U and Ctrl+R to the VS Code implementation of undo and redo</li> </ul> </li> <li>\"Quick Fix\" on Windows and Linux (Ctrl+,) is overridden by my toggle semicolon extension</li> </ul>"},{"location":"setup/ide/#software-infrastructure","title":"Software Infrastructure","text":"<p>VS Code has some amazing features that can be used to customize and automate your development environment for a project and share it with the project's developers.</p>"},{"location":"setup/ide/#workspace-settings","title":"Workspace Settings","text":"<p>Workspace settings customize the VS Code configurations of everyone who opens the workspace in VS Code. Besides the settings.json file, you can add launch configurations, recommended extensions, tasks, and much more. These files are stored in the <code>.vscode/</code> directory. Workspace settings override user settings.</p> <p>Example workspace settings: UBCSailbot/docs/.vscode, UBCSailbot/sailbot_workspace/sailbot.code-workspace.</p>"},{"location":"setup/ide/#dev-container","title":"Dev Container","text":"<p>Dev container wrap up your VS Code configuration with your dependencies in a Docker container. These files are stored in the <code>.devcontainer/</code> directory.</p> <p>Example dev container: UBCSailbot/sailbot_workspace/.devcontainer.</p>"},{"location":"setup/cli/common-cli/","title":"Common CLI","text":"<p>I use chezmoi to manage my dotfiles and installation scripts across computers, OS's, and shells. Its installation instructions can be found in my dotfiles repository's README.</p>"},{"location":"setup/cli/common-cli/#shell","title":"Shell","text":""},{"location":"setup/cli/common-cli/#aliases","title":"Aliases","text":"<p>I created aliases for my most frequently used commands, and tried to keep them consistent across operating systems.</p> <p>Configuration files:</p> <ul> <li>Unix: <code>.config/zsh/aliases.zsh</code></li> <li>Windows: <code>Documents/PowerShell/aliases.ps1</code></li> <li>Git (aliases are at the bottom): <code>.gitconfig</code></li> </ul>"},{"location":"setup/cli/common-cli/#functions","title":"Functions","text":"<p>Various helper functions are used in my shell configuration and aliases files.</p> <p>Configuration files:</p> <ul> <li>Unix: <code>.config/zsh/functions.zsh</code></li> <li>Windows: <code>Documents/PowerShell/functions.ps1</code></li> </ul>"},{"location":"setup/cli/common-cli/#software","title":"Software","text":""},{"location":"setup/cli/common-cli/#fd","title":"Fd","text":"<p>Fd is an alternative to <code>find</code> that is faster and more intuitive.</p>"},{"location":"setup/cli/common-cli/#git","title":"Git","text":"<p>See Contributing to a Git Repository and Git Commands for my notes on Git.</p> <p>Configuration file: <code>.gitconfig</code>.</p>"},{"location":"setup/cli/common-cli/#git-cli","title":"Git CLI","text":"<p>GitHub CLI brings GitHub functionality such as pull requests and issues to your terminal, but I mainly use it to login to GitHub.</p>"},{"location":"setup/cli/common-cli/#delta","title":"Delta","text":"<p>Delta is a syntax-highting pager for git, diff, and grep output. It makes <code>git diff</code> so much easier to understand.</p>"},{"location":"setup/cli/common-cli/#lazygit","title":"Lazygit","text":"<p>Lazygit is a TUI for git that makes viewing diffs and staging lines (in addition to files) easy.</p>"},{"location":"setup/cli/common-cli/#ripgrep","title":"Ripgrep","text":"<p>Ripgrep is an alternative to <code>grep</code> that is faster and respects your gitignore.</p>"},{"location":"setup/cli/common-cli/#lsd","title":"Lsd","text":"<p>Lsd is an alternative to <code>ls</code> that adds colors, icons, and much more.</p>"},{"location":"setup/cli/common-cli/#starship","title":"Starship","text":"<p>Starship is a minimal, blazing-fast, and customizable prompt for any shell. Since it is compatible with all major operating systems, I can use the same configuration file across operating systems to achieve a consistent aesthetic.</p> <p>Configuration file: <code>.config/starship.toml</code>.</p>"},{"location":"setup/cli/common-cli/#yazi","title":"Yazi","text":"<p>Yazi is a terminal file manager that can be used to view files and interactively navigate to directories.</p>"},{"location":"setup/cli/common-cli/#zoxide","title":"Zoxide","text":"<p>Zoxide is an alternative to <code>cd</code> that can jump to frequently directories with just a few letters instead of their entire path.</p>"},{"location":"setup/cli/unix-cli/","title":"Unix CLI","text":""},{"location":"setup/cli/unix-cli/#shell-zsh","title":"Shell: Zsh","text":"<p>Zsh is a shell for Unix.</p> <p>Configuration file: <code>.zshrc</code>.</p> <p>Resources:</p> <ul> <li>zsh: Syntax Highlighting, vi-mode, Autocomplete, more</li> </ul>"},{"location":"setup/cli/unix-cli/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>Zsh-syntax-highlighting brings syntax highlighting to Zsh. Known commands and aliases are green, unknown are red.</p>"},{"location":"setup/cli/unix-cli/#vi-mode","title":"Vi Mode","text":"<p>I use vi mode to bring vim keybindings to Zsh. To improve the experience, I also added vim keybindings to the tab complete menu, changed the cursor shape for different modes, and mapped <code>jk</code> to exit insert mode.</p>"},{"location":"setup/cli/unix-cli/#software","title":"Software","text":"<p>grm is a basic package manager for GitHub releases. I use a fork of it in my installation script because it is lightweight, fast, doesn't require sudo permissions, and works on both MacOS and Linux.</p> <p>Installation script: <code>run_install-unix.sh.tmpl</code>.</p>"},{"location":"setup/cli/unix-cli/#atuin","title":"Atuin","text":"<p>Atuin enhances shell history, saving additional information such as execution time and exit code. It can even synchronize history between machines! I mainly use it to interactively search through my command history, replacing Ctrl+R.</p> <p>Configuration files:</p> <ul> <li><code>.config/atuin/config.toml</code></li> </ul>"},{"location":"setup/cli/unix-cli/#bat","title":"Bat","text":"<p>Bat is an alternative to <code>cat</code> with syntax highlighting and Git integration.</p>"},{"location":"setup/cli/unix-cli/#bpytop","title":"Bpytop","text":"<p>Bpytop is a detailed and aesthetic CLI resource monitor.</p> <p>Configuration file: <code>.config/bpytop/bpytop.conf</code>.</p>"},{"location":"setup/cli/unix-cli/#dust","title":"Dust","text":"<p>Dust is an alternative to <code>du</code> that is more intuitive, visualizing disk usage.</p>"},{"location":"setup/cli/windows-cli/","title":"Windows CLI","text":""},{"location":"setup/cli/windows-cli/#shell-powershell-7","title":"Shell: PowerShell 7","text":"<p>PowerShell is a shell for Windows. PowerShell 7 is not the version that Windows includes, and will have to be installed.</p> <p>Configuration file: <code>Documents/PowerShell/Microsoft.PowerShell_profile.ps1</code>.</p>"},{"location":"setup/cli/windows-cli/#psreadline","title":"PSReadLine","text":"<p>This module brings the Unix CLI experience to PowerShell. I use it to add Vi mode, autocomplete options using Tab, and search for commands using Ctrl+R.</p>"},{"location":"setup/cli/windows-cli/#software","title":"Software","text":"<p>UniGetUI is a GUI for Windows package managers. I primarily use it to install software using WinGet, the official Windows package manager. The CLI of WinGet is pretty complex, so I find UniGetUI useful for managing it in an intuitive way.</p> <p>The complete list of apps I install using UniGetUI can be found here.</p>"},{"location":"setup/gui/windows-gui/","title":"Windows GUI","text":"<p>Some of my favorite Windows GUI applications include:</p> <ul> <li>Bitwarden: password manager that has apps for all my devices</li> <li>Komorebi: tiling window manager</li> <li>Microsoft To Do: task management; I especially like the \"My Day\" list</li> <li>Mozilla Thunderbird: email client, as Outlook doesn't play nice with Gmail</li> <li>NanaZip: file archiver with a modern UI, forked from 7-Zip</li> <li>OneNote: note taking, whether typed, handwritten, or annotated</li> <li>VLC: video player with powerful features that can play any type of video</li> <li>WizTree: quick and visual disk space analyzer</li> </ul>"},{"location":"setup/terminals/unix-terminal/","title":"Unix Terminal","text":""},{"location":"setup/terminals/unix-terminal/#showcase","title":"Showcase","text":"<p>This is what my Unix terminal configuration looks like on Ubuntu 18.04.</p> <p></p>"},{"location":"setup/terminals/unix-terminal/#alacritty","title":"Alacritty","text":"<p>Alacritty is a fast, aesthetic, and customizable terminal emulator.</p> <p>Configuration file: <code>.dot_alacritty.toml</code>.</p>"},{"location":"setup/terminals/unix-terminal/#tmux","title":"Tmux","text":"<p>Tmux is a customizable terminal emulator. It creates terminals (tabs or panes) using keyboard shortcuts. It helps with terminal organization, for example having separate terminals for git, build, and run commands. You can also detach and reattach to tmux sessions, which is especially useful for interacting with servers via the CLI.</p> <p>Configuration file: <code>.tmux.conf</code>.</p> <p>Resources:</p> <ul> <li>Useful Tmux Configuration Examples</li> <li>A Guide to Customizing your tmux.conf</li> </ul>"},{"location":"setup/terminals/windows-terminal/","title":"Windows Terminal","text":"<p>Windows Terminal is a terminal application to access shells such as PowerShell, WSL distributions, and SSH all in one place.</p> <p>It can be customized aesthetically and functionally to the moon:</p> <ul> <li>Aesthetically, there are countless resources online to serve as a starting point.</li> <li>Functionality, I went through each setting and customized them based on what I was familiar with (Ubuntu terminal, keybindings from my Vim configuration).</li> </ul>"},{"location":"setup/terminals/windows-terminal/#showcase","title":"Showcase","text":"<p>This is what my Windows Terminal configuration looked like when I was still using the setup repository. Currently my configuration looks a lot more like my Unix terminal configuration.</p> <p></p>"},{"location":"setup/terminals/windows-terminal/#setup","title":"Setup","text":"<ol> <li> <p>Install a Nerd Font</p> <ul> <li>The fonts I use can be found in <code>windows/fonts/</code>   of my setup repository (currently I only use FiraCode)</li> </ul> </li> <li> <p>My settings, themes, and profiles can be found in <code>reference_dotfiles/windows_terminal/windows_terminal_settings.json</code>    of the dotfiles repository</p> <ul> <li>The icons I use can be found in <code>windows/icons/</code> of my setup repository</li> </ul> </li> </ol>"},{"location":"setup/terminals/windows-terminal/#shortcuts","title":"Shortcuts","text":"<p>I have highlighted a few of the shortcuts that I regularly use. The shortcuts with the \"Similarity\" column italicized are ones that I modified from their default values. All the available shortcuts are listed in the <code>Actions</code> tab of the settings page.</p> Shortcut Description Similarity Ctrl+W Close pane Microsoft Edge Ctrl+Shift+W Close window Microsoft Edge Alt+Shift+D Duplicate pane Ctrl+Shift+D Duplicate tab Alt + J / H / L / K Move focus down/left/right/up My tmux setup Ctrl+Tab Next tab Microsoft Edge Ctrl+Shift+Space Open new tab dropdown Ctrl+Shift + # Switch to tab, index:# Ctrl+Shift+P Toggle command palette VS Code <p>I also removed some default shortcuts:</p> Shortcut Description Conflict Ctrl+V Copy text Vim visual block mode Ctrl+C Paste Unix interrupt signal <p>What are panes?</p> <p>A tab can be split into multiple panes, enabling you to run commands right next to each other. Check out the documentation page on panes to learn more.</p>"},{"location":"setup/terminals/windows-terminal/#resources","title":"Resources","text":"<ul> <li>Complete Nerd Fonts Release</li> <li>Windows Terminal Color Schemes</li> <li>Windows Terminal Documentation</li> <li>Windows Terminal 2.0 Roadmap</li> <li>Windows Terminal specify a starting directory for a SSH profile</li> <li>Windows Terminal open tab/pane in the current directory</li> </ul>"}]}