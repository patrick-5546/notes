{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Patrick's Notes \u00b6 Welcome to my personal notes on various programming-related topics. I have big plans for this website, though I'm not sure if I have the time to match; for a sneak peak, check out the open issues . Site Purpose \u00b6 I created this website to: Consolidate all my resources and references in one place. I just hate it when I recognize an error message but forgot how I resolved it. Or when I revisit a tool and forgot how it works. Thus, I plan to record what I learn here while it is fresh in my memory. Further my understanding of what I learn by writing it in my own words. This improves learning retention and serves as a resource that I can use to refresh my memory. Build skills related to software development, including Git, CI / CD , iterative development, and documentation. Inspire and guide others to take advantage of the powerful capabilities of popular coding-related software. Site Contents \u00b6 Setup: My Windows and Linux configurations Internship Preparation: How I efficiently apply for internships and prepare for interviews Reference: Quick reference on how to use popular programming-related software About Me: Graphics related to my experiences","title":"Home"},{"location":"#patricks-notes","text":"Welcome to my personal notes on various programming-related topics. I have big plans for this website, though I'm not sure if I have the time to match; for a sneak peak, check out the open issues .","title":"Patrick's Notes"},{"location":"#site-purpose","text":"I created this website to: Consolidate all my resources and references in one place. I just hate it when I recognize an error message but forgot how I resolved it. Or when I revisit a tool and forgot how it works. Thus, I plan to record what I learn here while it is fresh in my memory. Further my understanding of what I learn by writing it in my own words. This improves learning retention and serves as a resource that I can use to refresh my memory. Build skills related to software development, including Git, CI / CD , iterative development, and documentation. Inspire and guide others to take advantage of the powerful capabilities of popular coding-related software.","title":"Site Purpose"},{"location":"#site-contents","text":"Setup: My Windows and Linux configurations Internship Preparation: How I efficiently apply for internships and prepare for interviews Reference: Quick reference on how to use popular programming-related software About Me: Graphics related to my experiences","title":"Site Contents"},{"location":"profile/","text":"About Me \u00b6 Hobbies \u00b6 :fontawesome-solid-skiing: Technology Stack Timeline \u00b6 When I learned major programming languages, tools, and frameworks. Created using Visme . Feel free to check out my Linkedin profile or reach out to me to learn more about my experiences.","title":"About Me"},{"location":"profile/#about-me","text":"","title":"About Me"},{"location":"profile/#hobbies","text":":fontawesome-solid-skiing:","title":"Hobbies"},{"location":"profile/#technology-stack-timeline","text":"When I learned major programming languages, tools, and frameworks. Created using Visme . Feel free to check out my Linkedin profile or reach out to me to learn more about my experiences.","title":"Technology Stack Timeline"},{"location":"internship_prep/","text":"Internship Preparation Process \u00b6 My notes on how to efficiently apply for internships and prepare for interviews, as well as topics covered in interviews that I have done. It is intended to be more of a supplementary than comprehensive resource, perhaps giving you a couple ideas on how to improve your own preparation process. If you have any questions for me, please don't hesitate to reach out. Credits \u00b6 A lot of my internship preparation notes have come from discussions that I have had with Roger Luo Most of my Hardware Reference notes were written when I was studying for the CPEN 311 final","title":"Internship Preparation Process"},{"location":"internship_prep/#internship-preparation-process","text":"My notes on how to efficiently apply for internships and prepare for interviews, as well as topics covered in interviews that I have done. It is intended to be more of a supplementary than comprehensive resource, perhaps giving you a couple ideas on how to improve your own preparation process. If you have any questions for me, please don't hesitate to reach out.","title":"Internship Preparation Process"},{"location":"internship_prep/#credits","text":"A lot of my internship preparation notes have come from discussions that I have had with Roger Luo Most of my Hardware Reference notes were written when I was studying for the CPEN 311 final","title":"Credits"},{"location":"internship_prep/applications/","text":"Applications \u00b6 My application strategy is to prepare as much as I can before companies start posting so that: The time it takes to apply for each position is minimized Whenever an interview opportunity arises, I am prepared In economic terms, my strategy has a high upfront cost, but minimal recurring costs. Resume \u00b6 How your experiences and achievements make you the best candidate for the position Technical skills \u00b6 Copy vocabulary from job descriptions Organize skills into groups (i.e., languages, hardware, tools/frameworks) Experiences \u00b6 3-point structure Overview/context/ of the experience Result/achievement (ideally quantitative) What you specifically did/learned Recruiters don't look at a resume very long, and often read in an F-pattern Clear sections and headers Concise sentences Phrase sentences so that keys words are at the beginning Length \u00b6 1-page for larger companies, 2-page for smaller companies Cutting experiences: consider relevance to the position and similarity to other experiences Can put everything on LinkedIn and link to your profile in the resume Padding experiences: consider mentioning transferrable soft skills For example, Agile methodologies, proactive/self-motivated nature, leadership, communication, documentation If you don't have many relevant experiences, considering adding sections on work/volunteer experience and non-technical interests to differentiate yourself from other applicants Cover Letter \u00b6 Quick to write, yet high quality & personalized Format \u00b6 Introduction Passion for role Passion for company products/services/achievements/work culture Mention personal contacts and other interactions with the company you have had General statement about what makes you a good fit Include vocabulary from the job description Body Describe relevant experience using the START technique Situation - scene and context Task - goal Action - what you specifically did Result - achievement (make quantitative if possible), what you learned Transfer - how what you learned can be used in the position you are applying for Conclusion Thank the hiring committee for their time Include how they can arrange an interview Create templates \u00b6 To reduce the time it takes to write a cover letter, prepare a template for each type of position you want to apply to: Testing Web/Mobile Application Development Data Analyst Gaming Hardware DevOps/Infrastructure/Site Reliability Robotics/Controls These templates will vary in the experience they describe in the body paragraph and maybe also in the terms used in the introduction general statement. Job Search \u00b6 Manage your time effectively Gather information \u00b6 Attend info sessions, workshops Reach out to people working at the company Managers, recruiters, staff, interns Learn about the industry, company, and their personal experiences Ask them about open positions and referrals Mention them in your cover letter Stay organized, analyze results, iteratively improve \u00b6 I kept track of my applications using Notion: Applications List Example . I use it to analyze the results of previous applications in order to determine which positions I should apply to next. For example, if I see that I did not have much success applying to positions with greater than # applicants, or that require xxxx skills, I would avoid applying to similar types of jobs in the future, or revise my resume and cover letter to strengthen those areas.","title":"Applications"},{"location":"internship_prep/applications/#applications","text":"My application strategy is to prepare as much as I can before companies start posting so that: The time it takes to apply for each position is minimized Whenever an interview opportunity arises, I am prepared In economic terms, my strategy has a high upfront cost, but minimal recurring costs.","title":"Applications"},{"location":"internship_prep/applications/#resume","text":"How your experiences and achievements make you the best candidate for the position","title":"Resume"},{"location":"internship_prep/applications/#technical-skills","text":"Copy vocabulary from job descriptions Organize skills into groups (i.e., languages, hardware, tools/frameworks)","title":"Technical skills"},{"location":"internship_prep/applications/#experiences","text":"3-point structure Overview/context/ of the experience Result/achievement (ideally quantitative) What you specifically did/learned Recruiters don't look at a resume very long, and often read in an F-pattern Clear sections and headers Concise sentences Phrase sentences so that keys words are at the beginning","title":"Experiences"},{"location":"internship_prep/applications/#length","text":"1-page for larger companies, 2-page for smaller companies Cutting experiences: consider relevance to the position and similarity to other experiences Can put everything on LinkedIn and link to your profile in the resume Padding experiences: consider mentioning transferrable soft skills For example, Agile methodologies, proactive/self-motivated nature, leadership, communication, documentation If you don't have many relevant experiences, considering adding sections on work/volunteer experience and non-technical interests to differentiate yourself from other applicants","title":"Length"},{"location":"internship_prep/applications/#cover-letter","text":"Quick to write, yet high quality & personalized","title":"Cover Letter"},{"location":"internship_prep/applications/#format","text":"Introduction Passion for role Passion for company products/services/achievements/work culture Mention personal contacts and other interactions with the company you have had General statement about what makes you a good fit Include vocabulary from the job description Body Describe relevant experience using the START technique Situation - scene and context Task - goal Action - what you specifically did Result - achievement (make quantitative if possible), what you learned Transfer - how what you learned can be used in the position you are applying for Conclusion Thank the hiring committee for their time Include how they can arrange an interview","title":"Format"},{"location":"internship_prep/applications/#create-templates","text":"To reduce the time it takes to write a cover letter, prepare a template for each type of position you want to apply to: Testing Web/Mobile Application Development Data Analyst Gaming Hardware DevOps/Infrastructure/Site Reliability Robotics/Controls These templates will vary in the experience they describe in the body paragraph and maybe also in the terms used in the introduction general statement.","title":"Create templates"},{"location":"internship_prep/applications/#job-search","text":"Manage your time effectively","title":"Job Search"},{"location":"internship_prep/applications/#gather-information","text":"Attend info sessions, workshops Reach out to people working at the company Managers, recruiters, staff, interns Learn about the industry, company, and their personal experiences Ask them about open positions and referrals Mention them in your cover letter","title":"Gather information"},{"location":"internship_prep/applications/#stay-organized-analyze-results-iteratively-improve","text":"I kept track of my applications using Notion: Applications List Example . I use it to analyze the results of previous applications in order to determine which positions I should apply to next. For example, if I see that I did not have much success applying to positions with greater than # applicants, or that require xxxx skills, I would avoid applying to similar types of jobs in the future, or revise my resume and cover letter to strengthen those areas.","title":"Stay organized, analyze results, iteratively improve"},{"location":"internship_prep/interview_prep/","text":"General Interview Preparation \u00b6 Prepare as much beforehand, as the time between being selected and the interview date could be less than a week Before being selected \u00b6 Prepare for questions about resume experiences \u00b6 For each technical experience on your resume, ensure that the source code is easily accessible with documentation and diagrams. For example, push it to a GitHub repository (making it private if required). This is helpful when explaining technical details during an interview Next, prepare for common interview questions related to your experiences: Describe a time when you had a conflict when working on a team, and how you resolved it I have been asked this many times Tell me about yourself Come up with a couple responses for different types of jobs Describe a problem that you solved Describe your process for debugging code Describe a leadership experience Good topics to practice talking about include: Collaborating with colleagues to find the best possible solution Receptive to feedback and varying perspectives Each person has different strenghts Bottom up approach - reusability, test each small part Besides performance, consider reliability, sustainable, and reparability Prepare for open-ended technical questions \u00b6 It is more important to be able to clearly explain your ongoing thought process than to solve the problem Video on technical interview preparation Use the STAR method: Situation Listen/read the problem carefully and multiple times Describe/write the problem in your own words State assumptions Don't be afraid to ask clarifying questions Task Describe/write a simple example Think about the inputs and outputs Action Demonstrate logical thinking Give initial thoughts, broad overview Subdivide into different parts Devise initial solution Walkthrough with a simple example to verify correctness Think about potental optimizations Results Test final solution Ask for feedback, or what they would do, and discuss from there Gain interview experience \u00b6 Any interview practice is good practice Apply to as many positions as possible Talk with professors about research opportunities Make an appointment with your co-op advisor Ask a friend Explain technical experiences so that even people not in the industry can follow Practice on-the-spot thinking; connect your answers with relevant experiences After being selected \u00b6 Study job requisites \u00b6 Be able to explain them in your own words and relate to your past experiences. Prepare for position-specific questions \u00b6 Why do you want to work for the company/team/position? Research reputation, work culture, products/services, etc. Prepare questions for your interviewer intended to Help decide if the position is right for you Demonstrate your enthusiasm and passion for the company/position and its products Position-specific technical questions \u00b6 Places where you can find past/common interview questions include: Past or current employees and interns Glassdoor Reddit LeetCode Cracking the Coding Interview My hardware and software Reference and Questions pages briefly go over the content covered and questions asked in my past interviews They are intended as a way to review and gauge your knowledge rather than to learn new topics","title":"Interview Preparation"},{"location":"internship_prep/interview_prep/#general-interview-preparation","text":"Prepare as much beforehand, as the time between being selected and the interview date could be less than a week","title":"General Interview Preparation"},{"location":"internship_prep/interview_prep/#before-being-selected","text":"","title":"Before being selected"},{"location":"internship_prep/interview_prep/#prepare-for-questions-about-resume-experiences","text":"For each technical experience on your resume, ensure that the source code is easily accessible with documentation and diagrams. For example, push it to a GitHub repository (making it private if required). This is helpful when explaining technical details during an interview Next, prepare for common interview questions related to your experiences: Describe a time when you had a conflict when working on a team, and how you resolved it I have been asked this many times Tell me about yourself Come up with a couple responses for different types of jobs Describe a problem that you solved Describe your process for debugging code Describe a leadership experience Good topics to practice talking about include: Collaborating with colleagues to find the best possible solution Receptive to feedback and varying perspectives Each person has different strenghts Bottom up approach - reusability, test each small part Besides performance, consider reliability, sustainable, and reparability","title":"Prepare for questions about resume experiences"},{"location":"internship_prep/interview_prep/#prepare-for-open-ended-technical-questions","text":"It is more important to be able to clearly explain your ongoing thought process than to solve the problem Video on technical interview preparation Use the STAR method: Situation Listen/read the problem carefully and multiple times Describe/write the problem in your own words State assumptions Don't be afraid to ask clarifying questions Task Describe/write a simple example Think about the inputs and outputs Action Demonstrate logical thinking Give initial thoughts, broad overview Subdivide into different parts Devise initial solution Walkthrough with a simple example to verify correctness Think about potental optimizations Results Test final solution Ask for feedback, or what they would do, and discuss from there","title":"Prepare for open-ended technical questions"},{"location":"internship_prep/interview_prep/#gain-interview-experience","text":"Any interview practice is good practice Apply to as many positions as possible Talk with professors about research opportunities Make an appointment with your co-op advisor Ask a friend Explain technical experiences so that even people not in the industry can follow Practice on-the-spot thinking; connect your answers with relevant experiences","title":"Gain interview experience"},{"location":"internship_prep/interview_prep/#after-being-selected","text":"","title":"After being selected"},{"location":"internship_prep/interview_prep/#study-job-requisites","text":"Be able to explain them in your own words and relate to your past experiences.","title":"Study job requisites"},{"location":"internship_prep/interview_prep/#prepare-for-position-specific-questions","text":"Why do you want to work for the company/team/position? Research reputation, work culture, products/services, etc. Prepare questions for your interviewer intended to Help decide if the position is right for you Demonstrate your enthusiasm and passion for the company/position and its products","title":"Prepare for position-specific questions"},{"location":"internship_prep/interview_prep/#position-specific-technical-questions","text":"Places where you can find past/common interview questions include: Past or current employees and interns Glassdoor Reddit LeetCode Cracking the Coding Interview My hardware and software Reference and Questions pages briefly go over the content covered and questions asked in my past interviews They are intended as a way to review and gauge your knowledge rather than to learn new topics","title":"Position-specific technical questions"},{"location":"internship_prep/hardware/hw_questions/","text":"Hardware Questions \u00b6 I have listed some hardware technical questions that were asked in my interviews below. With the academic and extracurricular experience to be a candidate for more technical positions when seeking my second internship, the average question difficulty rose accordingly. The answers to some of these questions can be found in the Hardware Reference page. Seeking my first internship \u00b6 Difference between a latch and DFF Difference between a Mealy and Moore FSM Implement gates (AND, NOR, etc.) from 2:1 multiplexers Create a DFF with reset from a regular DFF Seeking my second internship \u00b6 Draw and compare the waveforms for a latch and DFF How to select between a Mealy and Moore FSM Implement a buffer and inverter from a NAND or XOR gate Implement DFFs (synchronous and asynchronous reset, enable) and latch in Verilog Different types of power dissipation Different types of adders Hardware multiplication and alternatives One hot vs binary FSM state encodings Causes of inferred latches Applications of latches Causes and fixes for setup and hold time violations Causes and fixes for clock domain crossings; metastability Gray code applications SystemVerilog vs Verilog Purpose of for loops in SystemVerilog Transistors RC circuits Clock jitter, skew Setup and hold slack Draw a state machine diagram of an elevator (more details about the elevator's functionality were given) Resources \u00b6 VLSI Interview Questions","title":"Questions"},{"location":"internship_prep/hardware/hw_questions/#hardware-questions","text":"I have listed some hardware technical questions that were asked in my interviews below. With the academic and extracurricular experience to be a candidate for more technical positions when seeking my second internship, the average question difficulty rose accordingly. The answers to some of these questions can be found in the Hardware Reference page.","title":"Hardware Questions"},{"location":"internship_prep/hardware/hw_questions/#seeking-my-first-internship","text":"Difference between a latch and DFF Difference between a Mealy and Moore FSM Implement gates (AND, NOR, etc.) from 2:1 multiplexers Create a DFF with reset from a regular DFF","title":"Seeking my first internship"},{"location":"internship_prep/hardware/hw_questions/#seeking-my-second-internship","text":"Draw and compare the waveforms for a latch and DFF How to select between a Mealy and Moore FSM Implement a buffer and inverter from a NAND or XOR gate Implement DFFs (synchronous and asynchronous reset, enable) and latch in Verilog Different types of power dissipation Different types of adders Hardware multiplication and alternatives One hot vs binary FSM state encodings Causes of inferred latches Applications of latches Causes and fixes for setup and hold time violations Causes and fixes for clock domain crossings; metastability Gray code applications SystemVerilog vs Verilog Purpose of for loops in SystemVerilog Transistors RC circuits Clock jitter, skew Setup and hold slack Draw a state machine diagram of an elevator (more details about the elevator's functionality were given)","title":"Seeking my second internship"},{"location":"internship_prep/hardware/hw_questions/#resources","text":"VLSI Interview Questions","title":"Resources"},{"location":"internship_prep/hardware/hw_reference/","text":"Hardware Reference \u00b6 ASIC vs FPGA vs Processor \u00b6 ASIC FPGA Processor Performance High Medium Low Power Consumption Low Medium High Flexibility None Somewhat General purpose Design Process Difficult, long Medium Easy, quick (software) Cost Cheaper for large volumes Cheaper for small volumes Cheapest (mass-produced) FPGA Design Process \u00b6 (Left) FPGA Design Process; (Right) 3-Input LUT Synthesis: break logic into LUTs A \\(n\\) -input LUT can make any \\(n\\) -input function, combinational or sequential Mapping/placing: place LUTs into CLBs such that Connected LUTs are close to each other Critical path is approximately minimized Routing: connecting logic blocks together Uses programmable switches: NMOS acts as conductor when the configuration bit (part of bitstream) is 1, connecting the tracks Connects CLBs with segments of varying lengths Shorter segments minimize delay, noise, and crosstalk Longer segments have extra capacitance and limited quantity, but minimize the number of segments needed Timing analysis: looks for timing violations Path delay is sum of all logic and wire delays Memory \u00b6 Types: DRAM (volatile, capacitor), SRAM (nonvolatile, cross-coupled inverter), ROM (nonvolatile) Caches \u00b6 Offer temporal (recently accessed in cache), and spatial (multi-word blocks) locality Instructions tend to be more spatial, data could be both To better support temporal: decrease block size and number of sets, or increase associativity Block size: number of bytes per cache line Associativity: number of cache lines per set Memory mountains Temporal: levels, based on which level of cache can fully contain the working set Spatial: throughput decreases with increasing stride length until stride length \u2265 block size Amdahl's law: speedup = \\(\\frac{1}{(1-a) + \\frac{a}{k}}\\) , where \\(a\\) is the percentage of code sped up by \\(k\\) times Increasing associativity decreases conflict misses, but decreases performance (specifically lookup and replacement times) Write through is good for synchronization, write back is faster when modifying same cache line multiple times Power Dissipation \u00b6 Types of Power Dissipation \u00b6 Dynamic: every time a node is switched from 0 to 1 or 1 to 0, some power is dissipated \\[ P_{dynamic} = \\alpha fCV^2 \\] \\(\\alpha\\) is the activity factor: probability a node will switch \\(f\\) is the frequency \\(C\\) is the capacitance \\(V\\) is the voltage Static: every transistor on the chip leaks, even when it is not doing anything Power Dissipation vs Transistor Size \u00b6 As digital circuits shrink (and chip voltages decrease): Dynamic power decreases: \\(V\\) and \\(C\\) decrease in dynamic power equation Static power increases: leakage current increases Reducing Power Dissipation \u00b6 Custom chip Turn off regions that are unused to reduce static power (dark silicon) Multiple threshold libraries FPGA Minimize area (less leakage, may allow for smaller FPGA ) General Lower voltage Revise implementation (add instead of multiply, invert bus) Pipelining: adding flip flops prevents glitches from propagating, which reduces glitch power Disadvantage: flip flops use power, which places extra burden on the clock tree Timing \u00b6 Gate Delay \u00b6 Every wire and transistor has parasitic capacitance (physical property) Delay of logic gate is the time it takes to charge the capacitance on its output, which is the net capacitance of the parasitic capacitances of the wires and transistors Proportional to \\(RC\\) ( \\(nRC\\) for \\(n\\) gates, where \\(n\\) is the number of gates in the path) \\(R\\) depends on size of logic gate transistor (bigger \u2192 lower \\(R\\) ) and length of wire (longer \u2192 higher \\(R\\) ) \\(C\\) depends on the same things in the same ways as \\(R\\) , but also depends on fanout (larger fanout \u2192 higher \\(C\\) ) Fanout: number of inputs driven by an output Reduce fanout by splitting net, but this increases the number of gates Modelling Delays \u00b6 Setup Time \u00b6 How long input needs to be stable before clock edge to be accepted. \\[ T_{\\text{clk}} \\geq T_{\\text{clk2qMax}} + T_{\\text{combinationalMax}} + T_{\\text{setup}} \\] Setup violation causes metastability Fix by slowing down clock or moving registers around to reduce length of critical path For example, pipelining, which is best when critical path is much longer than other paths) Hold Time \u00b6 How long input needs to be stable after clock edge to be accepted. \\[ T_{\\text{clk2qMin}} + T_{\\text{combinationalMin}} \\geq T_{\\text{hold}} \\] Hold time violation causes data loss Could be caused by clock skew Fix by increasing gate/DFF delays or adding buffers to data path or earlier clock paths Cannot be fixed by increasing clock period Glitches \u00b6 Glitch: undesired short-lived pulse that occurs before a signal settles to its intended value Caused by unequal arrival times of inputs on combinational gates + same output is generated by different values of state bits Ex 1: XORing the bits 01 \u2192 0, transitioning to 11 or 00 \u2192 1, before settling at 10 Ex 2: clock gating incorrectly such that the output of the AND gate (enable) glitches Clock gating is used to reduce dynamic power Any transition consumes power, so unnecessary transitions consume unnecessary power Glitches in FSMs \u00b6 Effects Edges triggered inputs (i.e. clocks) may be falsely triggered Enables may glitch before being sampled, causing garbage to be read Hard to detect Avoiding glitches Try to make it so that only 1 input bit changes at a time Register next outputs Quick fix, but adds one cycle delay, does not support direct dependence of outputs on inputs, requires extra registers Eliminate combinational logic after state machine Move before current state machine or next state machine Require outputs to either be: Driven from a state bit or its complement Driven by (simple) combinatorial logic that depends on a single state bit Safest for signals that are constant for the duration of the state machine's operation Clock Domain Crossings \u00b6 Clock domain: all DFFs in each clock domain run on the same clock Signals that cross clock domains will likely cause timing violations Asynchronous signals also cause timing violations in a similar manner On a timing violation, output may get the right value, wrong value, or become metastable (value between 0 and 1 that resolves randomly) May cause system-wide failure Metastability \u00b6 If the time it takes for a metastable node to resolve is greater than setup slack (negative slack), then system-wide failure occurs. Quantitately measure with MTBF : average time between two failure-causing instances of metastability \\[ \\text{MTBF}(t_{\\text{slack}}) = \\frac{e^{\\frac{t_{\\text{slack}}}{C_0}}}{C_1f_{\\text{clk}}f_{\\text{data}}} \\] Increases exponentially with slack Maximize by synchronizing asynchronous inputs Slack \u00b6 Time when it actually happens vs when it must happen (positive slack is when it happens before must). Setup: \\(T_{\\text{required}} - T_{\\text{arrival}}\\) Hold: \\(T_{\\text{arrival}} - T_{\\text{required}}\\) \\(T_{\\text{required}}\\) : clock path Reg2reg and input2reg: \\(T_{clk} + T_{setup}\\) Reg2output: unconstrained \\(T_{\\text{arrival}}\\) : data path Reg2reg and reg2output: \\(T_{clk2q} + T_{combinational}\\) Input to reg: \\(T_{combinational}\\) Reference: Setup and hold slack Practical Issues \u00b6 Retiming in pipelining: move combinational logic from one side of DFF to another to balance the critical path length of each stage Clock skew: clock edge arrives at different components at different times (might be due to the difference in path lengths) Implications change in \\(F_{max}\\) : changes setup time Failure of design: hold time violations and functional problems losing current value because second clock arrives too late Fix using Buffers H-tree network (route so that same distance to each flop) Global clocks that have dedicated routing to minimize clock skew; however, limited availability PLLs : mixed signal circuit that generates output clocks aligned to an input clock Motivation: usually there is clock skew between the input and output clocks of a clock divider/multiplier, and routing a generated clock is unpredictable Can even generate output clocks with the same phase as input clock Arithmetic Circuits \u00b6 Adders \u00b6 1-bit adders \u00b6 Half adder: two 1-bit inputs, 2-bit output Full adder: half adder + carry in and out Multi-bit adders \u00b6 There are several types of carry propagate adders: Ripple-carry (slow): chain of full adders that bitwise add N-bit inputs Delay: \\(t_{ripple} \\approx Nt_{FA}\\) , where \\(t_{FA}\\) is the delay of a full adder Proportional to N FPGAs are optimized for ripple carry adders, so faster than other implementations when \\(N \u2264 16\\) Carry select (less slow): calculate higher-order bits for both cases of carry-in, then select correct case when carry in is available Requires more hardware, but slightly faster than ripple-carry adders Carry-lookahead (fast): compute carry out for \\(k\\) -bit blocks using generate and propagate signals \\(G_i = A_iB_i\\) \\(G_{3:0} = G_3+P_3(G_2+P_2(G_1+P_1G_0))\\) \\(P_i = A_i+B_i\\) \\(P_{3:0} = P_3P_2P_1P_0\\) \\(C_{out} = G_{in} + P_{in}C_{in}\\) Delay of 4-bit adder: \\(4 t_{PD}\\) , where \\(t_{PD}\\) is the delay of a single AND/OR gate All \\(G,P\\) terms available in \\(t_{PD}\\) \\(C\\) terms (sum of products) available in \\(2t_{PD}\\) Results from full adder (sum, no carry out) available in \\(t_{PD}\\) Not very scalable, so typical to make a N-bit CLA out of smaller \\(k\\) -bit CLAs Delay: \\(t_{CLA} = t_{pg} + t_{pg\\_block} + \\frac{N}{k-1}t_{AND\\_OR} + kt_{FA}\\) \\(t_{pg}\\) : delay to generate all \\(G_i,P_i\\) \\(t_{pg\\_block}\\) : delay to generate all \\(G_{i:j},P_{i:j}\\) for every \\(k\\) -bit CLA \\(t_{AND\\_OR}\\) : delay from \\(C_{in}\\) to \\(C_{out}\\) of the final AND/OR gate in a \\(k\\) -bit CLA \\(t_{CLA} = 4\\log_4(N)t_{PD}\\) Proportional to \\(\\log N\\) Miscellaneous Arithmetic Circuits \u00b6 Subtractor: take two's complement of second input Equality comparator: AND all the bitwise XORs Less than comparator: subtractor; last (sign) bit is 1 when A < B Shift less than: all 0's, except LSB is result of less than comparator (A < B) Shifters: arithmetic shifters ( <<< >>> ) are the same as logical shifters ( << >> ) except the right arithmetic shift is sign extended Division: most complex, always use multi-cycle dividers in practice Multipliers \u00b6 Multiplication is a complex operation: avoid if possible Add instead of multiply: \\(7 \\times 2 \\rightarrow 7 + 7\\) Shift instead of multiply for powers of 2: \\(7 \\times 2 \\rightarrow 7 << 2\\) 1-bit x N-bit: AND operation N-bit x N-bit: sum of shifted 1-bit x N-bit for each bit in the second term (long multiplication method) Large multiplier: constructed out of smaller N-bit x N-bit multipliers Let \\(A\\) be a \\(2N\\) -bit number, with \\(A_H\\) being the upper N bits and \\(A_L\\) being the lower N bits. Let \\(B,B_H,B_L\\) be defined a similar matter. Therefore, \\[ \\displaylines{A = A_{2N-1}A_{2N-2}...A_0 = A_H \\times 2^N + A_L \\\\ B = B_{2N-1}B_{2N-2}...B_0 = B_H \\times 2^N + B_L} \\] \\(2^N\\) shifts left by N bits The product of \\(A\\) and \\(B\\) is \\[ A \\times B = A_HB_H2^{2N} + (A_HB_L+A_LB_H)2^N + A_LB_L \\] \\(2N\\) -bit x \\(2N\\) -bit produces a \\(4N\\) -bit result Signed multipliers subtract last number (two's complement) rather than add it Serial (multi-cycle) multiplier: P = 0 while B != 0: if B(0) == 1: P = P + A A = A << 1 B = B >> 1 Decimal Numbers \u00b6 Fixed Point \u00b6 Like decimal numbers but base 2. For example, \\[ 101.01 = 1 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0 + 0 \\times 2^{-1} + 1 \\times 2^{-2} = 5.25 \\] N-bit representation has \\(M\\) integer bits (left of decimal point) and \\(N-M\\) fraction bits (right of decimal point) Arithmetic operations: align decimal then perform as usual Multiplication and division result in loss of precision Floating Point \u00b6 Binary scientific notation: \\[ \\pm 1.m \\times 2^i \\Leftrightarrow \\{\\text{sign}\\}1.\\{\\text{mantissa}\\} \\times \\{\\text{base}\\}^{\\{\\text{exponent}\\}} \\] The floating point representation saves the sign, biased exponent, and mantissa fields of the number in binary scientific notation IEEE 754 single-precision (32-bits): 1 sign bit, 8 biased exponent bits, 23 mantissa bits IEEE 754 double-precision (64-bits): 1 sign bit, 11 biased exponent bits, 52 mantissa bits Bias exponent to be positive to circumvent the need for a signed exponent field Bias is 127 for single-precision and 1023 for double-precision Range Largest positive: exponent is all 1s except LSB , mantissa is all 1s Smallest positive: exponent is all 0s except LSB , mantissa is all 0s Special cases Subnormal (smaller than what is normally possible): exponent all 0s, mantissa is interpreted as being preceded by 0 Smallest positive: mantissa is all 0's except the LSB Number Sign Biased Exponent Mantissa 0 X 00000000 00000000000000000000000 \\(\\infty\\) 0 11111111 00000000000000000000000 \\(-\\infty\\) 1 11111111 00000000000000000000000 NaN X 11111111 non-zero Example: write \\(-58.25_{10}\\) in 32-bit floating point Convert decimal to binary: \\(58.25_{10} = 111010.01_2\\) Write in binary scientific notation: \\(1.1101001 \\times 2^5\\) Fill in the fields Sign bit: \\(1\\) (negative) Biased exponent: \\(127 + 5 = 132 = 10000100_2\\) Mantissa: \\(110 1001 0000 0000 0000 0000_2\\) Fixed vs Floating Point \u00b6 Fixed: simpler circuitry, smaller, less power consumption, cheaper Floating point: higher dynamic range of representable values Not synthesizable unless explicitly accounted for; useful for simulation SystemVerilog \u00b6 Types of modules Behavioral: describe what module does (gate level) Structural: describe how it is built from simpler modules (instantiates other modules) Unlike regular Verilog, SystemVerilog supports OOP and generate statements Generate statements are for readability; they don\u2019t change hardware implementation","title":"Reference"},{"location":"internship_prep/hardware/hw_reference/#hardware-reference","text":"","title":"Hardware Reference"},{"location":"internship_prep/hardware/hw_reference/#asic-vs-fpga-vs-processor","text":"ASIC FPGA Processor Performance High Medium Low Power Consumption Low Medium High Flexibility None Somewhat General purpose Design Process Difficult, long Medium Easy, quick (software) Cost Cheaper for large volumes Cheaper for small volumes Cheapest (mass-produced)","title":"ASIC vs FPGA vs Processor"},{"location":"internship_prep/hardware/hw_reference/#fpga-design-process","text":"(Left) FPGA Design Process; (Right) 3-Input LUT Synthesis: break logic into LUTs A \\(n\\) -input LUT can make any \\(n\\) -input function, combinational or sequential Mapping/placing: place LUTs into CLBs such that Connected LUTs are close to each other Critical path is approximately minimized Routing: connecting logic blocks together Uses programmable switches: NMOS acts as conductor when the configuration bit (part of bitstream) is 1, connecting the tracks Connects CLBs with segments of varying lengths Shorter segments minimize delay, noise, and crosstalk Longer segments have extra capacitance and limited quantity, but minimize the number of segments needed Timing analysis: looks for timing violations Path delay is sum of all logic and wire delays","title":"FPGA Design Process"},{"location":"internship_prep/hardware/hw_reference/#memory","text":"Types: DRAM (volatile, capacitor), SRAM (nonvolatile, cross-coupled inverter), ROM (nonvolatile)","title":"Memory"},{"location":"internship_prep/hardware/hw_reference/#caches","text":"Offer temporal (recently accessed in cache), and spatial (multi-word blocks) locality Instructions tend to be more spatial, data could be both To better support temporal: decrease block size and number of sets, or increase associativity Block size: number of bytes per cache line Associativity: number of cache lines per set Memory mountains Temporal: levels, based on which level of cache can fully contain the working set Spatial: throughput decreases with increasing stride length until stride length \u2265 block size Amdahl's law: speedup = \\(\\frac{1}{(1-a) + \\frac{a}{k}}\\) , where \\(a\\) is the percentage of code sped up by \\(k\\) times Increasing associativity decreases conflict misses, but decreases performance (specifically lookup and replacement times) Write through is good for synchronization, write back is faster when modifying same cache line multiple times","title":"Caches"},{"location":"internship_prep/hardware/hw_reference/#power-dissipation","text":"","title":"Power Dissipation"},{"location":"internship_prep/hardware/hw_reference/#types-of-power-dissipation","text":"Dynamic: every time a node is switched from 0 to 1 or 1 to 0, some power is dissipated \\[ P_{dynamic} = \\alpha fCV^2 \\] \\(\\alpha\\) is the activity factor: probability a node will switch \\(f\\) is the frequency \\(C\\) is the capacitance \\(V\\) is the voltage Static: every transistor on the chip leaks, even when it is not doing anything","title":"Types of Power Dissipation"},{"location":"internship_prep/hardware/hw_reference/#power-dissipation-vs-transistor-size","text":"As digital circuits shrink (and chip voltages decrease): Dynamic power decreases: \\(V\\) and \\(C\\) decrease in dynamic power equation Static power increases: leakage current increases","title":"Power Dissipation vs Transistor Size"},{"location":"internship_prep/hardware/hw_reference/#reducing-power-dissipation","text":"Custom chip Turn off regions that are unused to reduce static power (dark silicon) Multiple threshold libraries FPGA Minimize area (less leakage, may allow for smaller FPGA ) General Lower voltage Revise implementation (add instead of multiply, invert bus) Pipelining: adding flip flops prevents glitches from propagating, which reduces glitch power Disadvantage: flip flops use power, which places extra burden on the clock tree","title":"Reducing Power Dissipation"},{"location":"internship_prep/hardware/hw_reference/#timing","text":"","title":"Timing"},{"location":"internship_prep/hardware/hw_reference/#gate-delay","text":"Every wire and transistor has parasitic capacitance (physical property) Delay of logic gate is the time it takes to charge the capacitance on its output, which is the net capacitance of the parasitic capacitances of the wires and transistors Proportional to \\(RC\\) ( \\(nRC\\) for \\(n\\) gates, where \\(n\\) is the number of gates in the path) \\(R\\) depends on size of logic gate transistor (bigger \u2192 lower \\(R\\) ) and length of wire (longer \u2192 higher \\(R\\) ) \\(C\\) depends on the same things in the same ways as \\(R\\) , but also depends on fanout (larger fanout \u2192 higher \\(C\\) ) Fanout: number of inputs driven by an output Reduce fanout by splitting net, but this increases the number of gates","title":"Gate Delay"},{"location":"internship_prep/hardware/hw_reference/#modelling-delays","text":"","title":"Modelling Delays"},{"location":"internship_prep/hardware/hw_reference/#setup-time","text":"How long input needs to be stable before clock edge to be accepted. \\[ T_{\\text{clk}} \\geq T_{\\text{clk2qMax}} + T_{\\text{combinationalMax}} + T_{\\text{setup}} \\] Setup violation causes metastability Fix by slowing down clock or moving registers around to reduce length of critical path For example, pipelining, which is best when critical path is much longer than other paths)","title":"Setup Time"},{"location":"internship_prep/hardware/hw_reference/#hold-time","text":"How long input needs to be stable after clock edge to be accepted. \\[ T_{\\text{clk2qMin}} + T_{\\text{combinationalMin}} \\geq T_{\\text{hold}} \\] Hold time violation causes data loss Could be caused by clock skew Fix by increasing gate/DFF delays or adding buffers to data path or earlier clock paths Cannot be fixed by increasing clock period","title":"Hold Time"},{"location":"internship_prep/hardware/hw_reference/#glitches","text":"Glitch: undesired short-lived pulse that occurs before a signal settles to its intended value Caused by unequal arrival times of inputs on combinational gates + same output is generated by different values of state bits Ex 1: XORing the bits 01 \u2192 0, transitioning to 11 or 00 \u2192 1, before settling at 10 Ex 2: clock gating incorrectly such that the output of the AND gate (enable) glitches Clock gating is used to reduce dynamic power Any transition consumes power, so unnecessary transitions consume unnecessary power","title":"Glitches"},{"location":"internship_prep/hardware/hw_reference/#glitches-in-fsms","text":"Effects Edges triggered inputs (i.e. clocks) may be falsely triggered Enables may glitch before being sampled, causing garbage to be read Hard to detect Avoiding glitches Try to make it so that only 1 input bit changes at a time Register next outputs Quick fix, but adds one cycle delay, does not support direct dependence of outputs on inputs, requires extra registers Eliminate combinational logic after state machine Move before current state machine or next state machine Require outputs to either be: Driven from a state bit or its complement Driven by (simple) combinatorial logic that depends on a single state bit Safest for signals that are constant for the duration of the state machine's operation","title":"Glitches in FSMs"},{"location":"internship_prep/hardware/hw_reference/#clock-domain-crossings","text":"Clock domain: all DFFs in each clock domain run on the same clock Signals that cross clock domains will likely cause timing violations Asynchronous signals also cause timing violations in a similar manner On a timing violation, output may get the right value, wrong value, or become metastable (value between 0 and 1 that resolves randomly) May cause system-wide failure","title":"Clock Domain Crossings"},{"location":"internship_prep/hardware/hw_reference/#metastability","text":"If the time it takes for a metastable node to resolve is greater than setup slack (negative slack), then system-wide failure occurs. Quantitately measure with MTBF : average time between two failure-causing instances of metastability \\[ \\text{MTBF}(t_{\\text{slack}}) = \\frac{e^{\\frac{t_{\\text{slack}}}{C_0}}}{C_1f_{\\text{clk}}f_{\\text{data}}} \\] Increases exponentially with slack Maximize by synchronizing asynchronous inputs","title":"Metastability"},{"location":"internship_prep/hardware/hw_reference/#slack","text":"Time when it actually happens vs when it must happen (positive slack is when it happens before must). Setup: \\(T_{\\text{required}} - T_{\\text{arrival}}\\) Hold: \\(T_{\\text{arrival}} - T_{\\text{required}}\\) \\(T_{\\text{required}}\\) : clock path Reg2reg and input2reg: \\(T_{clk} + T_{setup}\\) Reg2output: unconstrained \\(T_{\\text{arrival}}\\) : data path Reg2reg and reg2output: \\(T_{clk2q} + T_{combinational}\\) Input to reg: \\(T_{combinational}\\) Reference: Setup and hold slack","title":"Slack"},{"location":"internship_prep/hardware/hw_reference/#practical-issues","text":"Retiming in pipelining: move combinational logic from one side of DFF to another to balance the critical path length of each stage Clock skew: clock edge arrives at different components at different times (might be due to the difference in path lengths) Implications change in \\(F_{max}\\) : changes setup time Failure of design: hold time violations and functional problems losing current value because second clock arrives too late Fix using Buffers H-tree network (route so that same distance to each flop) Global clocks that have dedicated routing to minimize clock skew; however, limited availability PLLs : mixed signal circuit that generates output clocks aligned to an input clock Motivation: usually there is clock skew between the input and output clocks of a clock divider/multiplier, and routing a generated clock is unpredictable Can even generate output clocks with the same phase as input clock","title":"Practical Issues"},{"location":"internship_prep/hardware/hw_reference/#arithmetic-circuits","text":"","title":"Arithmetic Circuits"},{"location":"internship_prep/hardware/hw_reference/#adders","text":"","title":"Adders"},{"location":"internship_prep/hardware/hw_reference/#1-bit-adders","text":"Half adder: two 1-bit inputs, 2-bit output Full adder: half adder + carry in and out","title":"1-bit adders"},{"location":"internship_prep/hardware/hw_reference/#multi-bit-adders","text":"There are several types of carry propagate adders: Ripple-carry (slow): chain of full adders that bitwise add N-bit inputs Delay: \\(t_{ripple} \\approx Nt_{FA}\\) , where \\(t_{FA}\\) is the delay of a full adder Proportional to N FPGAs are optimized for ripple carry adders, so faster than other implementations when \\(N \u2264 16\\) Carry select (less slow): calculate higher-order bits for both cases of carry-in, then select correct case when carry in is available Requires more hardware, but slightly faster than ripple-carry adders Carry-lookahead (fast): compute carry out for \\(k\\) -bit blocks using generate and propagate signals \\(G_i = A_iB_i\\) \\(G_{3:0} = G_3+P_3(G_2+P_2(G_1+P_1G_0))\\) \\(P_i = A_i+B_i\\) \\(P_{3:0} = P_3P_2P_1P_0\\) \\(C_{out} = G_{in} + P_{in}C_{in}\\) Delay of 4-bit adder: \\(4 t_{PD}\\) , where \\(t_{PD}\\) is the delay of a single AND/OR gate All \\(G,P\\) terms available in \\(t_{PD}\\) \\(C\\) terms (sum of products) available in \\(2t_{PD}\\) Results from full adder (sum, no carry out) available in \\(t_{PD}\\) Not very scalable, so typical to make a N-bit CLA out of smaller \\(k\\) -bit CLAs Delay: \\(t_{CLA} = t_{pg} + t_{pg\\_block} + \\frac{N}{k-1}t_{AND\\_OR} + kt_{FA}\\) \\(t_{pg}\\) : delay to generate all \\(G_i,P_i\\) \\(t_{pg\\_block}\\) : delay to generate all \\(G_{i:j},P_{i:j}\\) for every \\(k\\) -bit CLA \\(t_{AND\\_OR}\\) : delay from \\(C_{in}\\) to \\(C_{out}\\) of the final AND/OR gate in a \\(k\\) -bit CLA \\(t_{CLA} = 4\\log_4(N)t_{PD}\\) Proportional to \\(\\log N\\)","title":"Multi-bit adders"},{"location":"internship_prep/hardware/hw_reference/#miscellaneous-arithmetic-circuits","text":"Subtractor: take two's complement of second input Equality comparator: AND all the bitwise XORs Less than comparator: subtractor; last (sign) bit is 1 when A < B Shift less than: all 0's, except LSB is result of less than comparator (A < B) Shifters: arithmetic shifters ( <<< >>> ) are the same as logical shifters ( << >> ) except the right arithmetic shift is sign extended Division: most complex, always use multi-cycle dividers in practice","title":"Miscellaneous Arithmetic Circuits"},{"location":"internship_prep/hardware/hw_reference/#multipliers","text":"Multiplication is a complex operation: avoid if possible Add instead of multiply: \\(7 \\times 2 \\rightarrow 7 + 7\\) Shift instead of multiply for powers of 2: \\(7 \\times 2 \\rightarrow 7 << 2\\) 1-bit x N-bit: AND operation N-bit x N-bit: sum of shifted 1-bit x N-bit for each bit in the second term (long multiplication method) Large multiplier: constructed out of smaller N-bit x N-bit multipliers Let \\(A\\) be a \\(2N\\) -bit number, with \\(A_H\\) being the upper N bits and \\(A_L\\) being the lower N bits. Let \\(B,B_H,B_L\\) be defined a similar matter. Therefore, \\[ \\displaylines{A = A_{2N-1}A_{2N-2}...A_0 = A_H \\times 2^N + A_L \\\\ B = B_{2N-1}B_{2N-2}...B_0 = B_H \\times 2^N + B_L} \\] \\(2^N\\) shifts left by N bits The product of \\(A\\) and \\(B\\) is \\[ A \\times B = A_HB_H2^{2N} + (A_HB_L+A_LB_H)2^N + A_LB_L \\] \\(2N\\) -bit x \\(2N\\) -bit produces a \\(4N\\) -bit result Signed multipliers subtract last number (two's complement) rather than add it Serial (multi-cycle) multiplier: P = 0 while B != 0: if B(0) == 1: P = P + A A = A << 1 B = B >> 1","title":"Multipliers"},{"location":"internship_prep/hardware/hw_reference/#decimal-numbers","text":"","title":"Decimal Numbers"},{"location":"internship_prep/hardware/hw_reference/#fixed-point","text":"Like decimal numbers but base 2. For example, \\[ 101.01 = 1 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0 + 0 \\times 2^{-1} + 1 \\times 2^{-2} = 5.25 \\] N-bit representation has \\(M\\) integer bits (left of decimal point) and \\(N-M\\) fraction bits (right of decimal point) Arithmetic operations: align decimal then perform as usual Multiplication and division result in loss of precision","title":"Fixed Point"},{"location":"internship_prep/hardware/hw_reference/#floating-point","text":"Binary scientific notation: \\[ \\pm 1.m \\times 2^i \\Leftrightarrow \\{\\text{sign}\\}1.\\{\\text{mantissa}\\} \\times \\{\\text{base}\\}^{\\{\\text{exponent}\\}} \\] The floating point representation saves the sign, biased exponent, and mantissa fields of the number in binary scientific notation IEEE 754 single-precision (32-bits): 1 sign bit, 8 biased exponent bits, 23 mantissa bits IEEE 754 double-precision (64-bits): 1 sign bit, 11 biased exponent bits, 52 mantissa bits Bias exponent to be positive to circumvent the need for a signed exponent field Bias is 127 for single-precision and 1023 for double-precision Range Largest positive: exponent is all 1s except LSB , mantissa is all 1s Smallest positive: exponent is all 0s except LSB , mantissa is all 0s Special cases Subnormal (smaller than what is normally possible): exponent all 0s, mantissa is interpreted as being preceded by 0 Smallest positive: mantissa is all 0's except the LSB Number Sign Biased Exponent Mantissa 0 X 00000000 00000000000000000000000 \\(\\infty\\) 0 11111111 00000000000000000000000 \\(-\\infty\\) 1 11111111 00000000000000000000000 NaN X 11111111 non-zero Example: write \\(-58.25_{10}\\) in 32-bit floating point Convert decimal to binary: \\(58.25_{10} = 111010.01_2\\) Write in binary scientific notation: \\(1.1101001 \\times 2^5\\) Fill in the fields Sign bit: \\(1\\) (negative) Biased exponent: \\(127 + 5 = 132 = 10000100_2\\) Mantissa: \\(110 1001 0000 0000 0000 0000_2\\)","title":"Floating Point"},{"location":"internship_prep/hardware/hw_reference/#fixed-vs-floating-point","text":"Fixed: simpler circuitry, smaller, less power consumption, cheaper Floating point: higher dynamic range of representable values Not synthesizable unless explicitly accounted for; useful for simulation","title":"Fixed vs Floating Point"},{"location":"internship_prep/hardware/hw_reference/#systemverilog","text":"Types of modules Behavioral: describe what module does (gate level) Structural: describe how it is built from simpler modules (instantiates other modules) Unlike regular Verilog, SystemVerilog supports OOP and generate statements Generate statements are for readability; they don\u2019t change hardware implementation","title":"SystemVerilog"},{"location":"internship_prep/software/sw_questions/","text":"Software Questions \u00b6 Disclaimer My software-related interview experiences have largely come from interviews for hardware/embedded positions. If you have experience interviewing for software positions and want to contribute, feel free to contact me. I have listed some software technical questions that were asked in my interviews below. Software questions from hardware/embedded interviews \u00b6 Multiply numbers up to 100 digits long Alphabetically sort a string Check, set, clear, and toggle a bit Polymorphism See the Resources section Python questions Datatypes List vs array Performance advantage of Numpy C/C++ questions See the Resources section Resources \u00b6 40+ OOPs Interview Questions and Answers Top Embedded C Interview Questions","title":"Questions"},{"location":"internship_prep/software/sw_questions/#software-questions","text":"Disclaimer My software-related interview experiences have largely come from interviews for hardware/embedded positions. If you have experience interviewing for software positions and want to contribute, feel free to contact me. I have listed some software technical questions that were asked in my interviews below.","title":"Software Questions"},{"location":"internship_prep/software/sw_questions/#software-questions-from-hardwareembedded-interviews","text":"Multiply numbers up to 100 digits long Alphabetically sort a string Check, set, clear, and toggle a bit Polymorphism See the Resources section Python questions Datatypes List vs array Performance advantage of Numpy C/C++ questions See the Resources section","title":"Software questions from hardware/embedded interviews"},{"location":"internship_prep/software/sw_questions/#resources","text":"40+ OOPs Interview Questions and Answers Top Embedded C Interview Questions","title":"Resources"},{"location":"internship_prep/software/sw_reference/","text":"Software Reference \u00b6 Disclaimer My software-related interview experiences have largely come from interviews for hardware/embedded positions. If you have experience interviewing for software positions and want to contribute, feel free to contact me. Concepts \u00b6 Be able to explain concepts in your own words and give examples of you applying them. Agile software development \u00b6 Iterative software development Purpose: rapid delivery of high quality software Documenting and resolving issues Kanban vs Scrum Testing \u00b6 Test-driven development Black vs white box testing How to develop a test plan Types of tests: unit, integration, functional, regression Fault injection Corner cases Root-cause analysis Parts of a good bug report DevOps \u00b6 CI / CD Docker, Kubernetes","title":"Reference"},{"location":"internship_prep/software/sw_reference/#software-reference","text":"Disclaimer My software-related interview experiences have largely come from interviews for hardware/embedded positions. If you have experience interviewing for software positions and want to contribute, feel free to contact me.","title":"Software Reference"},{"location":"internship_prep/software/sw_reference/#concepts","text":"Be able to explain concepts in your own words and give examples of you applying them.","title":"Concepts"},{"location":"internship_prep/software/sw_reference/#agile-software-development","text":"Iterative software development Purpose: rapid delivery of high quality software Documenting and resolving issues Kanban vs Scrum","title":"Agile software development"},{"location":"internship_prep/software/sw_reference/#testing","text":"Test-driven development Black vs white box testing How to develop a test plan Types of tests: unit, integration, functional, regression Fault injection Corner cases Root-cause analysis Parts of a good bug report","title":"Testing"},{"location":"internship_prep/software/sw_reference/#devops","text":"CI / CD Docker, Kubernetes","title":"DevOps"},{"location":"reference/bookmarks/","text":"Bookmarks \u00b6 Miscellaneous references and tools that I use unrelated to the other pages. References \u00b6 GDB Commands JavaScript and HTML DOM Reference Regular Expression Tester Tools \u00b6 Bitwarden - password manager Inkdrop - material design markdown notetaking app for developers Notion - notetaking and project management Video introduction to Notion Students get the Personal Pro plan for free TinyWow - various PDF, image, and video tools Wandb - better data analytics, tailored for machine learning applications Example Wandb report","title":"Bookmarks"},{"location":"reference/bookmarks/#bookmarks","text":"Miscellaneous references and tools that I use unrelated to the other pages.","title":"Bookmarks"},{"location":"reference/bookmarks/#references","text":"GDB Commands JavaScript and HTML DOM Reference Regular Expression Tester","title":"References"},{"location":"reference/bookmarks/#tools","text":"Bitwarden - password manager Inkdrop - material design markdown notetaking app for developers Notion - notetaking and project management Video introduction to Notion Students get the Personal Pro plan for free TinyWow - various PDF, image, and video tools Wandb - better data analytics, tailored for machine learning applications Example Wandb report","title":"Tools"},{"location":"reference/linux/","text":"Linux Commands \u00b6 Linuxize.com has some amazing guides for common linux commands and tasks. If their site does not have cover the desired content, man <command> to view the full documentation of a command. Linuxize Basic Linux Commands \u00b6 Covers man, pwd, cd, ls, cat, touch, mkdir, ln, rm, cp, mv, apt, dnf, chmod, chown, sudo, useradd, passwd, userdel, groupadd, groupdel, and usermod alias \u00b6 Aliases are custom commands that map to a longer command. Command Description alias <alias>=\"<command>\" Create an alias which <alias/command> Locate an alias/command alias View the mappings of all aliases My aliases Run the commands to see what they do Oh My Zsh creates a lot of useful aliases, here are some that I regularly use: alias l = 'ls -lah' alias ll = 'ls -lh' alias md = 'mkdir -p' alias rd = 'rmdir' Aliases that I use from the Git plugin are detailed in the Commands page Aliases that I defined myself Section of my .zshrc file alias cls = 'clear' alias h = 'history' alias lt = 'ls -lahrt' alias llt = 'ls -lhrt' Resources: Linuxize alias guide du \u00b6 Estimates disk usage of the given files or directories. Command Description du -ha <file/directory> Get size of each file within the directory recursively du -h --max-depth=1 <directory> Get size of directories up to the first level du -hs Get only the size of the current working directory Resources: Linuxize du guide find \u00b6 Recursively searches for files and directories. Command Description find -type f -iname <filename> Search for files by name, ignoring case find -type f -name '*.<file_extension>' Search for files by extension Resources: Linuxize find guide less \u00b6 Read contents of a file or command output quickly and without filling up terminal. Command Description less <filename> Read the contents of a file <command> | less Read the standard output (what would be printed to the terminal) of <command> Commands inside less Command Description h Display help q Exit g Go to first line of file # g Go to line # G Go to last line of file j / k Move forward and backward by line f / b Move forward and backward by window -N Toggle line numbers -S Toggle chopping long lines /<string> Search for <string> n / N Navigate between search matches Resources: Linuxize less guide screen \u00b6 I use screen to perform long-running tasks on a remote machine. It enables me to connect and disconnect from the machine (i.e. via SSH ) without exiting the command. Command Description screen -S <session_name> Start a named screen session screen -d Detach from current screen Ctrl + Alt then D Detach from current screen when a command is running screen -ls List running screens and their session IDs screen -r <session_id> Reattach to screen screen -d -r <session_id> Reattach to screen from inside another screen exit Terminate current screen screen in WSL Error Message $ screen Cannot make directory '/run/screen': Permission denied To Fix Create an alternate screen directory with the appropriate permissions mkdir ~/.screen && chmod 700 ~/.screen Point the SCREENDIR environment variable to that directory .bashrc file or equivalent export SCREENDIR = $HOME /.screen Resources: Linuxize screen guide Additional Guides \u00b6 Linuxize shebang guide - run script without having to specify the interpreter Linuxize add to the PATH environment variable","title":"Linux Commands"},{"location":"reference/linux/#linux-commands","text":"Linuxize.com has some amazing guides for common linux commands and tasks. If their site does not have cover the desired content, man <command> to view the full documentation of a command.","title":" Linux Commands"},{"location":"reference/linux/#linuxize-basic-linux-commands","text":"Covers man, pwd, cd, ls, cat, touch, mkdir, ln, rm, cp, mv, apt, dnf, chmod, chown, sudo, useradd, passwd, userdel, groupadd, groupdel, and usermod","title":"Linuxize Basic Linux Commands"},{"location":"reference/linux/#alias","text":"Aliases are custom commands that map to a longer command. Command Description alias <alias>=\"<command>\" Create an alias which <alias/command> Locate an alias/command alias View the mappings of all aliases My aliases Run the commands to see what they do Oh My Zsh creates a lot of useful aliases, here are some that I regularly use: alias l = 'ls -lah' alias ll = 'ls -lh' alias md = 'mkdir -p' alias rd = 'rmdir' Aliases that I use from the Git plugin are detailed in the Commands page Aliases that I defined myself Section of my .zshrc file alias cls = 'clear' alias h = 'history' alias lt = 'ls -lahrt' alias llt = 'ls -lhrt' Resources: Linuxize alias guide","title":"alias"},{"location":"reference/linux/#du","text":"Estimates disk usage of the given files or directories. Command Description du -ha <file/directory> Get size of each file within the directory recursively du -h --max-depth=1 <directory> Get size of directories up to the first level du -hs Get only the size of the current working directory Resources: Linuxize du guide","title":"du"},{"location":"reference/linux/#find","text":"Recursively searches for files and directories. Command Description find -type f -iname <filename> Search for files by name, ignoring case find -type f -name '*.<file_extension>' Search for files by extension Resources: Linuxize find guide","title":"find"},{"location":"reference/linux/#less","text":"Read contents of a file or command output quickly and without filling up terminal. Command Description less <filename> Read the contents of a file <command> | less Read the standard output (what would be printed to the terminal) of <command> Commands inside less Command Description h Display help q Exit g Go to first line of file # g Go to line # G Go to last line of file j / k Move forward and backward by line f / b Move forward and backward by window -N Toggle line numbers -S Toggle chopping long lines /<string> Search for <string> n / N Navigate between search matches Resources: Linuxize less guide","title":"less"},{"location":"reference/linux/#screen","text":"I use screen to perform long-running tasks on a remote machine. It enables me to connect and disconnect from the machine (i.e. via SSH ) without exiting the command. Command Description screen -S <session_name> Start a named screen session screen -d Detach from current screen Ctrl + Alt then D Detach from current screen when a command is running screen -ls List running screens and their session IDs screen -r <session_id> Reattach to screen screen -d -r <session_id> Reattach to screen from inside another screen exit Terminate current screen screen in WSL Error Message $ screen Cannot make directory '/run/screen': Permission denied To Fix Create an alternate screen directory with the appropriate permissions mkdir ~/.screen && chmod 700 ~/.screen Point the SCREENDIR environment variable to that directory .bashrc file or equivalent export SCREENDIR = $HOME /.screen Resources: Linuxize screen guide","title":"screen"},{"location":"reference/linux/#additional-guides","text":"Linuxize shebang guide - run script without having to specify the interpreter Linuxize add to the PATH environment variable","title":"Additional Guides"},{"location":"reference/mkdocs/","text":"Material for MkDocs \u00b6 This website was created using Material for MkDocs, a simple yet powerful framework for creating documentation. All it requires is a Markdown file for every page, and a configuration file that connects everything together. With Material for MkDocs providing [somewhat] customizable features, frontend, and deployment methods, I can focus my time on the content of the site. Useful Documentation Pages \u00b6 Search for icons Admonition types Keyboard keys syntax Setup Reference Setup \u00b6 Page Tree Example \u00b6 Based on this site. Paths in the page tree are relative to docs/ . nav : - Home : index.md # Homepage, first tab - Setup : # Second tab - setup/index.md # Second tab homepage - Settings : setup/settings.md # Second tab first page - Reference : # Third tab - Mkdocs : reference/docker.md.md # Third tab first page (no third tab homepage) Plugins \u00b6 If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set. Automatic documentation generation using mkdocstrings Page revision time using mkdocs-git-revision-date-localized-plugin Note: times are in UTC Reference \u00b6 Demonstrations of the features I use. View this page raw for the Markdown syntax used. View the documentation reference for what be in the configuration file to enable a feature. Collapsible blocks, code block formatting, embedding external files \u00b6 Click to toggle open/close Syntax highlighting for inline code: Python's range () function... Embed of docs/reference/mkdocs.md 1 2 mkdocs - git - revision - date - localized - plugin == 1. * mkdocs - material == 8. * Content tabs, icons, glossary \u00b6 Markdown: docs/example.md includes/abbreviations.md 1. Use the term (i.e. \"WSL\") 2. Import glossary by adding to end of the file: --8<-- \"includes/abbreviations.md\" Define the term *[WSL]: Windows Subsystem for Linux Result: WSL is a term in the glossary. Table, keyboard keys \u00b6 Shortcut Description Alt + ( Shift ) + Tab Navigate between windows Win + Ctrl + Left / Right Navigate between virtual desktops F11 Fullscreen Task list, inline math equations \u00b6 Result of task list Prove \\(e=mc^2\\) Bug: Line break workaround in math equations CI / CD Using GitHub Actions \u00b6 Deploy \u00b6 The Materials for MkDocs documentation gives an example deploy workflow. I modified it slightly to properly support page revision times using mkdocs-git-revision-date-localized-plugin . I also used encrypted secrets to use Google Analytics without exposing the key. This workflow is run on every push to the main branch Deploy workflow \u00b6 Deploy workflow for this project .github/workflows/deploy.yml 1 Lint \u00b6 Markdown linter \u00b6 I use markdownlint to check for programmatic and stylistic errors in the application's Markdown files. I configured the errors using a .markdownlint.json file in the project's root directory to support the syntax of Material for MkDocs features. This workflow is run on every push and pull request to the main branch. markdownlint configuration for this project .markdownlint.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"default\" : true , \"MD013\" : { \"line_length\" : 180 }, \"MD004\" : { \"style\" : \"dash\" }, \"MD007\" : { \"indent\" : 4 }, \"MD033\" : { \"allowed_elements\" : [ \"figure\" , \"figcaption\" ] }, \"MD035\" : { \"style\" : \"---\" }, \"MD040\" : false , \"MD041\" : false , \"MD046\" : false } markdownlint resources: markdownlint rules reference markdownlint extension for VS Code Check Markdown links \u00b6 I check for broken links using markdown-link-check. This action checks links to pages on the internet ( https://www.google.com ) and files in the repository ( ./index.md ). However, it does not check whether a section exists in the file ( ./index.md#overview ). This workflow is run on every push and pull request to the main branch, as well as on a schedule. Lint workflows \u00b6 Lint workflow for this project .github/workflows/lint.yml 1 Scheduled Tasks workflow for this project .github/workflows/scheduled_tasks.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 name : Scheduled Tasks on : schedule : # Every Saturday at 11:00am UTC - cron : '0 11 * * 6' jobs : # https://github.com/gaurav-nelson/github-action-markdown-link-check markdown-link-check : runs-on : ubuntu-latest steps : - name : Check out code uses : actions/checkout@v2 - name : Check markdown pages for broken links uses : gaurav-nelson/github-action-markdown-link-check@v1 with : config-file : '.mlc_config.json' folder-path : 'docs, includes' Resources \u00b6 Schedule workflow runs Example Sites \u00b6 Material for MkDocs and Pymdown Extensions documentation up42 Uses the mkdocstrings plugin for the Code Reference This site!","title":"Material for MkDocs"},{"location":"reference/mkdocs/#material-for-mkdocs","text":"This website was created using Material for MkDocs, a simple yet powerful framework for creating documentation. All it requires is a Markdown file for every page, and a configuration file that connects everything together. With Material for MkDocs providing [somewhat] customizable features, frontend, and deployment methods, I can focus my time on the content of the site.","title":" Material for MkDocs"},{"location":"reference/mkdocs/#useful-documentation-pages","text":"Search for icons Admonition types Keyboard keys syntax Setup Reference","title":"Useful Documentation Pages"},{"location":"reference/mkdocs/#setup","text":"","title":"Setup"},{"location":"reference/mkdocs/#page-tree-example","text":"Based on this site. Paths in the page tree are relative to docs/ . nav : - Home : index.md # Homepage, first tab - Setup : # Second tab - setup/index.md # Second tab homepage - Settings : setup/settings.md # Second tab first page - Reference : # Third tab - Mkdocs : reference/docker.md.md # Third tab first page (no third tab homepage)","title":"Page Tree Example"},{"location":"reference/mkdocs/#plugins","text":"If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set. Automatic documentation generation using mkdocstrings Page revision time using mkdocs-git-revision-date-localized-plugin Note: times are in UTC","title":"Plugins"},{"location":"reference/mkdocs/#reference","text":"Demonstrations of the features I use. View this page raw for the Markdown syntax used. View the documentation reference for what be in the configuration file to enable a feature.","title":"Reference"},{"location":"reference/mkdocs/#collapsible-blocks-code-block-formatting-embedding-external-files","text":"Click to toggle open/close Syntax highlighting for inline code: Python's range () function... Embed of docs/reference/mkdocs.md 1 2 mkdocs - git - revision - date - localized - plugin == 1. * mkdocs - material == 8. *","title":"Collapsible blocks, code block formatting, embedding external files"},{"location":"reference/mkdocs/#content-tabs-icons-glossary","text":"Markdown: docs/example.md includes/abbreviations.md 1. Use the term (i.e. \"WSL\") 2. Import glossary by adding to end of the file: --8<-- \"includes/abbreviations.md\" Define the term *[WSL]: Windows Subsystem for Linux Result: WSL is a term in the glossary.","title":"Content tabs, icons, glossary"},{"location":"reference/mkdocs/#table-keyboard-keys","text":"Shortcut Description Alt + ( Shift ) + Tab Navigate between windows Win + Ctrl + Left / Right Navigate between virtual desktops F11 Fullscreen","title":"Table, keyboard keys"},{"location":"reference/mkdocs/#task-list-inline-math-equations","text":"Result of task list Prove \\(e=mc^2\\) Bug: Line break workaround in math equations","title":"Task list, inline math equations"},{"location":"reference/mkdocs/#ci-cd-using-github-actions","text":"","title":"CI / CD Using GitHub Actions"},{"location":"reference/mkdocs/#deploy","text":"The Materials for MkDocs documentation gives an example deploy workflow. I modified it slightly to properly support page revision times using mkdocs-git-revision-date-localized-plugin . I also used encrypted secrets to use Google Analytics without exposing the key. This workflow is run on every push to the main branch","title":"Deploy"},{"location":"reference/mkdocs/#deploy-workflow","text":"Deploy workflow for this project .github/workflows/deploy.yml 1","title":"Deploy workflow"},{"location":"reference/mkdocs/#lint","text":"","title":"Lint"},{"location":"reference/mkdocs/#markdown-linter","text":"I use markdownlint to check for programmatic and stylistic errors in the application's Markdown files. I configured the errors using a .markdownlint.json file in the project's root directory to support the syntax of Material for MkDocs features. This workflow is run on every push and pull request to the main branch. markdownlint configuration for this project .markdownlint.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"default\" : true , \"MD013\" : { \"line_length\" : 180 }, \"MD004\" : { \"style\" : \"dash\" }, \"MD007\" : { \"indent\" : 4 }, \"MD033\" : { \"allowed_elements\" : [ \"figure\" , \"figcaption\" ] }, \"MD035\" : { \"style\" : \"---\" }, \"MD040\" : false , \"MD041\" : false , \"MD046\" : false } markdownlint resources: markdownlint rules reference markdownlint extension for VS Code","title":"Markdown linter"},{"location":"reference/mkdocs/#check-markdown-links","text":"I check for broken links using markdown-link-check. This action checks links to pages on the internet ( https://www.google.com ) and files in the repository ( ./index.md ). However, it does not check whether a section exists in the file ( ./index.md#overview ). This workflow is run on every push and pull request to the main branch, as well as on a schedule.","title":"Check Markdown links"},{"location":"reference/mkdocs/#lint-workflows","text":"Lint workflow for this project .github/workflows/lint.yml 1 Scheduled Tasks workflow for this project .github/workflows/scheduled_tasks.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 name : Scheduled Tasks on : schedule : # Every Saturday at 11:00am UTC - cron : '0 11 * * 6' jobs : # https://github.com/gaurav-nelson/github-action-markdown-link-check markdown-link-check : runs-on : ubuntu-latest steps : - name : Check out code uses : actions/checkout@v2 - name : Check markdown pages for broken links uses : gaurav-nelson/github-action-markdown-link-check@v1 with : config-file : '.mlc_config.json' folder-path : 'docs, includes'","title":"Lint workflows"},{"location":"reference/mkdocs/#resources","text":"Schedule workflow runs","title":"Resources"},{"location":"reference/mkdocs/#example-sites","text":"Material for MkDocs and Pymdown Extensions documentation up42 Uses the mkdocstrings plugin for the Code Reference This site!","title":"Example Sites"},{"location":"reference/python/","text":"Python \u00b6 Conventions \u00b6 PEP 8 styling guideline walkthrough Using the flake8 linter - checks for errors (including failing to comply with PEP 8 guidelines Meaning and naming conventions around single and double underscores Imports \u00b6 Recap on imports, absolute vs relative imports Python 2 vs 3 imports Pip \u00b6 Package installer. Command Description pip install <package> Install the latest version of a package pip install <package>==<version> Install the specified version of a package pip install -r requirements.txt Install the packages from a requirements.txt file pip list --outdated View outdated packages pip install --upgrade <package> Upgrade the desired packages pip uninstall <package> Uninstall a package If pip has not been added to the path, replace pip with python -m pip in the commands above. Pyenv \u00b6 Easily switch between multiple versions of Python. Installation Commands reference Scripting \u00b6 Built-in library for command-line parsing: argparse tutorial Built-in library for logging: logging tutorial Testing framework: PyTest tutorial Built-in exceptions Regular expressions tutorial Top data science libraries Virtual Environments \u00b6 Bundle all the packages and their versions to run an application so that they do not conflict with the globally installed python packages. Create virtual environment directory (suggested name: .venv ). Windows Linux py -m venv .venv python3 -m venv .venv Activate virtual environment. Use the active shell's corresponding activate script. Windows Powershell Linux .venv\\Scripts\\Activate.ps1 source .venv/bin/activate Install the required packages: pip section Create/update the requirements.txt file (to record the versions of packages used in the project) pip freeze > requirements.txt Exit the virtual environment deactivate VS Code integration After selecting .venv/bin/python to be the Python interpreter, terminals and debuggers will run in the virtual environment by default. Resources \u00b6 Virtual Environments and Packages","title":"Python"},{"location":"reference/python/#python","text":"","title":" Python"},{"location":"reference/python/#conventions","text":"PEP 8 styling guideline walkthrough Using the flake8 linter - checks for errors (including failing to comply with PEP 8 guidelines Meaning and naming conventions around single and double underscores","title":"Conventions"},{"location":"reference/python/#imports","text":"Recap on imports, absolute vs relative imports Python 2 vs 3 imports","title":"Imports"},{"location":"reference/python/#pip","text":"Package installer. Command Description pip install <package> Install the latest version of a package pip install <package>==<version> Install the specified version of a package pip install -r requirements.txt Install the packages from a requirements.txt file pip list --outdated View outdated packages pip install --upgrade <package> Upgrade the desired packages pip uninstall <package> Uninstall a package If pip has not been added to the path, replace pip with python -m pip in the commands above.","title":"Pip"},{"location":"reference/python/#pyenv","text":"Easily switch between multiple versions of Python. Installation Commands reference","title":"Pyenv"},{"location":"reference/python/#scripting","text":"Built-in library for command-line parsing: argparse tutorial Built-in library for logging: logging tutorial Testing framework: PyTest tutorial Built-in exceptions Regular expressions tutorial Top data science libraries","title":"Scripting"},{"location":"reference/python/#virtual-environments","text":"Bundle all the packages and their versions to run an application so that they do not conflict with the globally installed python packages. Create virtual environment directory (suggested name: .venv ). Windows Linux py -m venv .venv python3 -m venv .venv Activate virtual environment. Use the active shell's corresponding activate script. Windows Powershell Linux .venv\\Scripts\\Activate.ps1 source .venv/bin/activate Install the required packages: pip section Create/update the requirements.txt file (to record the versions of packages used in the project) pip freeze > requirements.txt Exit the virtual environment deactivate VS Code integration After selecting .venv/bin/python to be the Python interpreter, terminals and debuggers will run in the virtual environment by default.","title":"Virtual Environments"},{"location":"reference/python/#resources","text":"Virtual Environments and Packages","title":"Resources"},{"location":"reference/shortcuts/","text":"Windows Keyboard Shortcuts \u00b6 Shortcuts with italicized descriptions are Windows 11 only. General \u00b6 Shortcut Description Alt + Tab Switch between open windows and browser tabs Ctrl + Shift + Esc Open task manager Win Show or hide the start menu Win + A Show or hide the quick settings Win + D Show or hide the desktop Win + G Open Xbox Game Bar (built-in video capture) Win + L Lock the computer Win + N Open notification center and calendar Win + Shift + S Take a screenshot using Snipping Tool Win + Up Maximize window Win + Left / Right Maximize window to the left/right side of the screen F11 Full screen application File Explorer \u00b6 Shortcut Description Win + E Open File Explorer Ctrl + F Select the search box Ctrl + Shift + N Create a new folder Microsoft Edge \u00b6 Shortcut Description Ctrl + F Find on page ( Shift ) + Enter Navigate between matches to your Find Bar search Ctrl + H Open history Ctrl + L Select the URL in the address bar to edit Ctrl + R Refresh the current tab Ctrl + T Open a new tab and switch to it Ctrl + W Close the current tab Ctrl + Shift + W Close the current window Ctrl + Shift + Y Open Collections Ctrl + 0 Reset zoom Ctrl + + / - Adjust zoom Ctrl + ( Shift ) + Tab Navigate between tabs Ctrl + left click Open link in new tab F12 Open Developer Tools OneNote \u00b6 Specifically, the OneNote application from the Microsoft Store. Shortcut Description Ctrl + F Open search box Down While searching, preview the next result Ctrl + N Create a new page at the end of the current section Ctrl + Alt + N Create a new page below the current page Ctrl + Alt + Shift + N Create a new sub-page below the current page Ctrl + T Create a new section Ctrl + . Toggle bulleted list formatting Ctrl + / Toggle numbered list formatting Ctrl + Alt + - / + Hide and show navigation pane Alt + = Create equation Shift + Enter Insert a line break Tab at the end of a line Create a table Taskbar \u00b6 Shortcut Description Shift + left click Open an instance of an app Ctrl + Shift + left click Open an app as an administrator Virtual Desktop \u00b6 Shortcut Description Win + Tab Open task view Win + Ctrl + D Add a virtual desktop Win + Ctrl + Left / Right Navigate between virtual desktops Windows Terminal \u00b6 My Windows Terminal Shortcuts can be found in the Terminal page . Resources \u00b6 Keyboard shortcuts in Windows Keyboard shortcuts in Microsoft Edge Keyboard shortcuts in OneNote","title":"Windows Shortcuts"},{"location":"reference/shortcuts/#windows-keyboard-shortcuts","text":"Shortcuts with italicized descriptions are Windows 11 only.","title":" Windows Keyboard Shortcuts"},{"location":"reference/shortcuts/#general","text":"Shortcut Description Alt + Tab Switch between open windows and browser tabs Ctrl + Shift + Esc Open task manager Win Show or hide the start menu Win + A Show or hide the quick settings Win + D Show or hide the desktop Win + G Open Xbox Game Bar (built-in video capture) Win + L Lock the computer Win + N Open notification center and calendar Win + Shift + S Take a screenshot using Snipping Tool Win + Up Maximize window Win + Left / Right Maximize window to the left/right side of the screen F11 Full screen application","title":"General"},{"location":"reference/shortcuts/#file-explorer","text":"Shortcut Description Win + E Open File Explorer Ctrl + F Select the search box Ctrl + Shift + N Create a new folder","title":"File Explorer"},{"location":"reference/shortcuts/#microsoft-edge","text":"Shortcut Description Ctrl + F Find on page ( Shift ) + Enter Navigate between matches to your Find Bar search Ctrl + H Open history Ctrl + L Select the URL in the address bar to edit Ctrl + R Refresh the current tab Ctrl + T Open a new tab and switch to it Ctrl + W Close the current tab Ctrl + Shift + W Close the current window Ctrl + Shift + Y Open Collections Ctrl + 0 Reset zoom Ctrl + + / - Adjust zoom Ctrl + ( Shift ) + Tab Navigate between tabs Ctrl + left click Open link in new tab F12 Open Developer Tools","title":"Microsoft Edge"},{"location":"reference/shortcuts/#onenote","text":"Specifically, the OneNote application from the Microsoft Store. Shortcut Description Ctrl + F Open search box Down While searching, preview the next result Ctrl + N Create a new page at the end of the current section Ctrl + Alt + N Create a new page below the current page Ctrl + Alt + Shift + N Create a new sub-page below the current page Ctrl + T Create a new section Ctrl + . Toggle bulleted list formatting Ctrl + / Toggle numbered list formatting Ctrl + Alt + - / + Hide and show navigation pane Alt + = Create equation Shift + Enter Insert a line break Tab at the end of a line Create a table","title":"OneNote"},{"location":"reference/shortcuts/#taskbar","text":"Shortcut Description Shift + left click Open an instance of an app Ctrl + Shift + left click Open an app as an administrator","title":"Taskbar"},{"location":"reference/shortcuts/#virtual-desktop","text":"Shortcut Description Win + Tab Open task view Win + Ctrl + D Add a virtual desktop Win + Ctrl + Left / Right Navigate between virtual desktops","title":"Virtual Desktop"},{"location":"reference/shortcuts/#windows-terminal","text":"My Windows Terminal Shortcuts can be found in the Terminal page .","title":"Windows Terminal"},{"location":"reference/shortcuts/#resources","text":"Keyboard shortcuts in Windows Keyboard shortcuts in Microsoft Edge Keyboard shortcuts in OneNote","title":"Resources"},{"location":"reference/ssh/","text":"SSH \u00b6 Setup SSH Keys \u00b6 SSH key-based authentication allows you SSH into remote machines without a password. Guide: Setup SSH keys Notes on the guide Although the guide is for Ubuntu 20.04, it should work for most Linux distributions It also works in PowerShell, using the given alternative to ssh-copy-id Other Resources \u00b6 ssh command guide Specify the starting directory for a SSH session Setup SSH keys on Synology DSM 6 Notes on the Synology guide The command to restart the sshd service will likely not work. In this case, telnet in to restart the service sudo synoservicectl --restart sshd # restarting the sshd service may fail telnet -l <username> <host_name> # telnet into the NAS sudo synoservicectl --start sshd # start the sshd service","title":"SSH"},{"location":"reference/ssh/#ssh","text":"","title":" SSH"},{"location":"reference/ssh/#setup-ssh-keys","text":"SSH key-based authentication allows you SSH into remote machines without a password. Guide: Setup SSH keys Notes on the guide Although the guide is for Ubuntu 20.04, it should work for most Linux distributions It also works in PowerShell, using the given alternative to ssh-copy-id","title":"Setup SSH Keys"},{"location":"reference/ssh/#other-resources","text":"ssh command guide Specify the starting directory for a SSH session Setup SSH keys on Synology DSM 6 Notes on the Synology guide The command to restart the sshd service will likely not work. In this case, telnet in to restart the service sudo synoservicectl --restart sshd # restarting the sshd service may fail telnet -l <username> <host_name> # telnet into the NAS sudo synoservicectl --start sshd # start the sshd service","title":"Other Resources"},{"location":"reference/wsl/","text":"WSL \u00b6 Backing up and Restoring WSL Distributions \u00b6 Export a WSL distribution for backup/migration from PowerShell wsl - -export < distribution_name > < filename > To import a WSL distribution from PowerShell wsl - -import < distribution_name > < install_location > < filename > This new WSL distribution will start as the root user. To start as another user, add the following to /etc/wsl.conf from inside the distribution wsl.conf 1 2 [ user ] default=<username> wsl - -shutdown from PowerShell and restart to see the change More WSL Commands \u00b6 Command Description wsl -l -v List WSL distributions along with their state and version wsl -t <distribution_name> Terminate/shut down a WSL distribution wsl --unregister <distribution_name> Unregisters WSL distribution and deletes root filesystem wsl --help to see all WSL commands and their descriptions Commands Inside WSL Distributions \u00b6 Sign in to Git using the Git Credential Manager in Windows git config --global credential.helper \"/mnt/c/Program\\ Files/Git/mingw64/libexec/git-core/git-credential-manager-core.exe\" Open a WSL file/directory using the Windows default program For example: File Explorer for directories, Excel for CSV files wslview <file_or_directory> Resources \u00b6 Install WSL Export and import WSL distributions Change default user in WSL 2 Get started using Git on WSL","title":"WSL"},{"location":"reference/wsl/#wsl","text":"","title":" WSL"},{"location":"reference/wsl/#backing-up-and-restoring-wsl-distributions","text":"Export a WSL distribution for backup/migration from PowerShell wsl - -export < distribution_name > < filename > To import a WSL distribution from PowerShell wsl - -import < distribution_name > < install_location > < filename > This new WSL distribution will start as the root user. To start as another user, add the following to /etc/wsl.conf from inside the distribution wsl.conf 1 2 [ user ] default=<username> wsl - -shutdown from PowerShell and restart to see the change","title":"Backing up and Restoring WSL Distributions"},{"location":"reference/wsl/#more-wsl-commands","text":"Command Description wsl -l -v List WSL distributions along with their state and version wsl -t <distribution_name> Terminate/shut down a WSL distribution wsl --unregister <distribution_name> Unregisters WSL distribution and deletes root filesystem wsl --help to see all WSL commands and their descriptions","title":"More WSL Commands"},{"location":"reference/wsl/#commands-inside-wsl-distributions","text":"Sign in to Git using the Git Credential Manager in Windows git config --global credential.helper \"/mnt/c/Program\\ Files/Git/mingw64/libexec/git-core/git-credential-manager-core.exe\" Open a WSL file/directory using the Windows default program For example: File Explorer for directories, Excel for CSV files wslview <file_or_directory>","title":"Commands Inside WSL Distributions"},{"location":"reference/wsl/#resources","text":"Install WSL Export and import WSL distributions Change default user in WSL 2 Get started using Git on WSL","title":"Resources"},{"location":"reference/git/git_commands/","text":"Git Commands \u00b6 File specifiers Specifier Description . Everything new/modified in current directory -u Files in the remote repository that were modified in the current directory <path/to/file_name> Specific file Use git status to check if the command had the desired outcome Restore \u00b6 Undo uncommitted changes. Command Description git restore <file_specifier> Revert files to their state on the remote repository (delete local changes) git restore --staged <file_specifier> Unstage/un-add files Reset \u00b6 Undo committed (but not pushed) changes. Command Description git log Check the commit history of the current branch git reset HEAD~1 Unstage the changes made in last commit, but do not modify the files git reset --hard HEAD~5 Undo the changes made in the last 5 commits Rm \u00b6 Remove files Command Description git rm <file_specifier> Remove files from Git and delete them git rm --cached <file_specifier> Remove files from Git but do not delete them Stash \u00b6 Stash uncommitted changes so that you can pull or switch branches. Command Description git stash Stash changes git stash pop Restore changes Tags \u00b6 Tag a commit (i.e., release version, milestone). Command Description git tag -a <tag_name> -m \"<description>\" Create an annotated tag for the current commit git push --tags Push tags to the remote repository git show <tag_name> See tag information git checkout <tag_name> Checkout to the commit that a tag points to git tag -d <tag_name> Delete local tag git push origin --delete <tag_name> Delete tag from the remote repository Resources: Tagging chapter in the Git book Manage remote repositories \u00b6 There may be cases where you want to keep mirrors of your repository. The original remote repository is given the identifier origin by default Command Description git remote add <repo_name> <repository_base_url> Add a remote repository and give it the identifier <repo_name> git push <repo_name> --all Push all branches to a remote repository git remote -v List remote repositories git remote remove <repo_name> Remove a remote repository Submodules \u00b6 Manage a Git repository from inside another Git repository. Command Description git submodule add <repository_base_url> Add a repository as a submodule of the current repository git diff --submodule Better diff for submodules from the parent repository git submodule update --remote --merge Update submodules to their latest remote commmits git submodule update --init --recursive Recursively initialize and update submodules to the commits in the remote parent repository git clone --recurse-submodules <repo_base_url> Clone a repository and recursively initialize all its submodules Resources: Submodule chapter in the Git book Create a submodule that tracks a specific branch Properly remove a submodule Oh My Zsh Git plugin aliases \u00b6 The Zsh Git plugin provides many aliases; I have listed the ones I regularly use below. ga = 'git add' gb = 'git branch' gbD = 'git branch -D' gco = 'git checkout' gcb = 'git checkout -b' gcm = 'git checkout $(git_main_branch)' gcl = 'git clone --recurse-submodules' gcmsg = 'git commit -m' gd = 'git diff' gdca = 'git diff --cached' gmom = 'git merge origin/$(git_main_branch)' gl = 'git pull' gp = 'git push' gpsup = 'git push --set-upstream origin $(git_current_branch)' gra = 'git remote add' grv = 'git remote -v' grrm = 'git remote remove' grh = 'git reset' grhh = 'git reset --hard' grs = 'git restore' grst = 'git restore --staged' grm = 'git rm' grmc = 'git rm --cached' gst = 'git status' gsu = 'git submodule update'","title":"Git Commands"},{"location":"reference/git/git_commands/#git-commands","text":"File specifiers Specifier Description . Everything new/modified in current directory -u Files in the remote repository that were modified in the current directory <path/to/file_name> Specific file Use git status to check if the command had the desired outcome","title":" Git Commands"},{"location":"reference/git/git_commands/#restore","text":"Undo uncommitted changes. Command Description git restore <file_specifier> Revert files to their state on the remote repository (delete local changes) git restore --staged <file_specifier> Unstage/un-add files","title":"Restore"},{"location":"reference/git/git_commands/#reset","text":"Undo committed (but not pushed) changes. Command Description git log Check the commit history of the current branch git reset HEAD~1 Unstage the changes made in last commit, but do not modify the files git reset --hard HEAD~5 Undo the changes made in the last 5 commits","title":"Reset"},{"location":"reference/git/git_commands/#rm","text":"Remove files Command Description git rm <file_specifier> Remove files from Git and delete them git rm --cached <file_specifier> Remove files from Git but do not delete them","title":"Rm"},{"location":"reference/git/git_commands/#stash","text":"Stash uncommitted changes so that you can pull or switch branches. Command Description git stash Stash changes git stash pop Restore changes","title":"Stash"},{"location":"reference/git/git_commands/#tags","text":"Tag a commit (i.e., release version, milestone). Command Description git tag -a <tag_name> -m \"<description>\" Create an annotated tag for the current commit git push --tags Push tags to the remote repository git show <tag_name> See tag information git checkout <tag_name> Checkout to the commit that a tag points to git tag -d <tag_name> Delete local tag git push origin --delete <tag_name> Delete tag from the remote repository Resources: Tagging chapter in the Git book","title":"Tags"},{"location":"reference/git/git_commands/#manage-remote-repositories","text":"There may be cases where you want to keep mirrors of your repository. The original remote repository is given the identifier origin by default Command Description git remote add <repo_name> <repository_base_url> Add a remote repository and give it the identifier <repo_name> git push <repo_name> --all Push all branches to a remote repository git remote -v List remote repositories git remote remove <repo_name> Remove a remote repository","title":"Manage remote repositories"},{"location":"reference/git/git_commands/#submodules","text":"Manage a Git repository from inside another Git repository. Command Description git submodule add <repository_base_url> Add a repository as a submodule of the current repository git diff --submodule Better diff for submodules from the parent repository git submodule update --remote --merge Update submodules to their latest remote commmits git submodule update --init --recursive Recursively initialize and update submodules to the commits in the remote parent repository git clone --recurse-submodules <repo_base_url> Clone a repository and recursively initialize all its submodules Resources: Submodule chapter in the Git book Create a submodule that tracks a specific branch Properly remove a submodule","title":"Submodules"},{"location":"reference/git/git_commands/#oh-my-zsh-git-plugin-aliases","text":"The Zsh Git plugin provides many aliases; I have listed the ones I regularly use below. ga = 'git add' gb = 'git branch' gbD = 'git branch -D' gco = 'git checkout' gcb = 'git checkout -b' gcm = 'git checkout $(git_main_branch)' gcl = 'git clone --recurse-submodules' gcmsg = 'git commit -m' gd = 'git diff' gdca = 'git diff --cached' gmom = 'git merge origin/$(git_main_branch)' gl = 'git pull' gp = 'git push' gpsup = 'git push --set-upstream origin $(git_current_branch)' gra = 'git remote add' grv = 'git remote -v' grrm = 'git remote remove' grh = 'git reset' grhh = 'git reset --hard' grs = 'git restore' grst = 'git restore --staged' grm = 'git rm' grmc = 'git rm --cached' gst = 'git status' gsu = 'git submodule update'","title":"Oh My Zsh Git plugin aliases"},{"location":"reference/git/git_contributing/","text":"Contributing to a Git Repository \u00b6 For a walkthrough of the contribution process, read First Contributions . Comments on the First Contributions walkthrough If you have access to the repository, there is no need to fork it; clone and work on the repository itself Goals \u00b6 Main branch only contains working code Collaborate with others effectively (i.e., code reviews) Clear, progressive development process Issues \u00b6 Bug: Describe issue, steps to reproduce, expected behavior, screenshots, additional context Feature: Give context, describe solution, describe alternatives, additional context Link to relevant code, projects, labels, milestones, etc. Commits \u00b6 Make a commit for each unit change, giving it a descriptive name For example: \"added <function_name> function\", \"updated tests to match\" At the end of a session git push , to update the remote repository with your changes Pull requests \u00b6 Compared to committing directly to the main branch, pull requests can be used to ensure that the code in the main branch is clear and correct through: Continuous integration: automated linting and testing Code reviews: getting someone to read over and test your code Creating a pull request: Describe changes, expected behavior, and how to verify Link pull request to the issue it resolves: linking a pull request to an issue Can create as a draft if incomplete, which disables merging New commits to the branch will be automatically added to the pull request Add reviewers to test the pull request Once the pull request is ready to merge into the main branch, I recommend the \"Squash and Merge\" merge method to keep the main branch commit history clear and concise, or \"Rebase and Merge\" for hotfixes and one off commits Learn more about GitHub merge types and best practices here Updating your local repository \u00b6 Update the current local branch and the remote tracking branches for all other branches git pull --rebase Why use --rebase ? Make git pull rebase by default with git config --global pull.rebase true Update current local branch with commits in the main local branch git merge origin/main Delete remote tracking branches that were deleted from the remote repository git remote prune origin Make git pull or git fetch prune by default with git config --global fetch.prune true Local branches tracking a remote that has been prunes are identified as gone in the output of git branch -vv Delete these branches with git branch -D <branch1> <branch2> ... Reference: Cleaning up old remote git branches GitHub-specific best practices \u00b6 Labels: GitHub labels best practices Milestones and projects: Milestones vs. projects Discussions: gather feedback and ideas from non-code collaborators Best practices for community conversations Actions: automate, customize, and execute software development workflows Actions documentation GitHub Marketplace - Actions Explanation of this project's workflows Encrypted secrets documentation Wiki: host very basic documentation, GitHub Flavored Markdown only Advanced Formatting in GitHub Markdown Render a code snippet in an issue Choosing the right open source license","title":"Git Contribution Process"},{"location":"reference/git/git_contributing/#contributing-to-a-git-repository","text":"For a walkthrough of the contribution process, read First Contributions . Comments on the First Contributions walkthrough If you have access to the repository, there is no need to fork it; clone and work on the repository itself","title":" Contributing to a Git Repository"},{"location":"reference/git/git_contributing/#goals","text":"Main branch only contains working code Collaborate with others effectively (i.e., code reviews) Clear, progressive development process","title":"Goals"},{"location":"reference/git/git_contributing/#issues","text":"Bug: Describe issue, steps to reproduce, expected behavior, screenshots, additional context Feature: Give context, describe solution, describe alternatives, additional context Link to relevant code, projects, labels, milestones, etc.","title":"Issues"},{"location":"reference/git/git_contributing/#commits","text":"Make a commit for each unit change, giving it a descriptive name For example: \"added <function_name> function\", \"updated tests to match\" At the end of a session git push , to update the remote repository with your changes","title":"Commits"},{"location":"reference/git/git_contributing/#pull-requests","text":"Compared to committing directly to the main branch, pull requests can be used to ensure that the code in the main branch is clear and correct through: Continuous integration: automated linting and testing Code reviews: getting someone to read over and test your code Creating a pull request: Describe changes, expected behavior, and how to verify Link pull request to the issue it resolves: linking a pull request to an issue Can create as a draft if incomplete, which disables merging New commits to the branch will be automatically added to the pull request Add reviewers to test the pull request Once the pull request is ready to merge into the main branch, I recommend the \"Squash and Merge\" merge method to keep the main branch commit history clear and concise, or \"Rebase and Merge\" for hotfixes and one off commits Learn more about GitHub merge types and best practices here","title":"Pull requests"},{"location":"reference/git/git_contributing/#updating-your-local-repository","text":"Update the current local branch and the remote tracking branches for all other branches git pull --rebase Why use --rebase ? Make git pull rebase by default with git config --global pull.rebase true Update current local branch with commits in the main local branch git merge origin/main Delete remote tracking branches that were deleted from the remote repository git remote prune origin Make git pull or git fetch prune by default with git config --global fetch.prune true Local branches tracking a remote that has been prunes are identified as gone in the output of git branch -vv Delete these branches with git branch -D <branch1> <branch2> ... Reference: Cleaning up old remote git branches","title":"Updating your local repository"},{"location":"reference/git/git_contributing/#github-specific-best-practices","text":"Labels: GitHub labels best practices Milestones and projects: Milestones vs. projects Discussions: gather feedback and ideas from non-code collaborators Best practices for community conversations Actions: automate, customize, and execute software development workflows Actions documentation GitHub Marketplace - Actions Explanation of this project's workflows Encrypted secrets documentation Wiki: host very basic documentation, GitHub Flavored Markdown only Advanced Formatting in GitHub Markdown Render a code snippet in an issue Choosing the right open source license","title":"GitHub-specific best practices"},{"location":"setup/","text":"Setup \u00b6 My Windows laptop configuration as a computer engineering student. Philosophy \u00b6 Best of Both Worlds \u00b6 Windows and Linux excel at different things: Windows has a better GUI and more powerful productivity apps Linux is better for programming I use each OS to their advantage by running Windows on my personal device and using WSL to get a Linux environment on it. WSL vs dual-boot Dual-booting Windows and Linux was popular in the past, but WSL offers very similar performance in the majority of tasks while being much more convenient: WSL distributions can be started in a matter of seconds and can be used simultaneously with Windows apps. Especially with WSL adding the support for Linux GUI apps in Windows 11, there are a dwindling number of reasons to dual-boot. One such reason is that the computer has little RAM (< 16GB). Minimize Mouse Usage \u00b6 Every switch between using the mouse and keyboard takes time and energy, both of which I have little of. Thus, I use: Vim commands to write text/code without the need for a mouse. See the IDE page to learn more. Keyboard shortcuts in Windows as much as possible. Same Keyboard Shortcuts Across Programs \u00b6 To minimize the number of keyboard shortcuts I need to memorize, I configure the programs I use to have the same keyboard shortcuts. Consistent Across Computers \u00b6 To have the same experience on all the computers I use (personal, work, research, homelab), I: Created a setup repository that contains all my configuration files and a script that installs my Linux packages and Zsh plugins Wrote these notes so that I remember how everything works","title":"Setup"},{"location":"setup/#setup","text":"My Windows laptop configuration as a computer engineering student.","title":"Setup"},{"location":"setup/#philosophy","text":"","title":"Philosophy"},{"location":"setup/#best-of-both-worlds","text":"Windows and Linux excel at different things: Windows has a better GUI and more powerful productivity apps Linux is better for programming I use each OS to their advantage by running Windows on my personal device and using WSL to get a Linux environment on it. WSL vs dual-boot Dual-booting Windows and Linux was popular in the past, but WSL offers very similar performance in the majority of tasks while being much more convenient: WSL distributions can be started in a matter of seconds and can be used simultaneously with Windows apps. Especially with WSL adding the support for Linux GUI apps in Windows 11, there are a dwindling number of reasons to dual-boot. One such reason is that the computer has little RAM (< 16GB).","title":"Best of Both Worlds"},{"location":"setup/#minimize-mouse-usage","text":"Every switch between using the mouse and keyboard takes time and energy, both of which I have little of. Thus, I use: Vim commands to write text/code without the need for a mouse. See the IDE page to learn more. Keyboard shortcuts in Windows as much as possible.","title":"Minimize Mouse Usage"},{"location":"setup/#same-keyboard-shortcuts-across-programs","text":"To minimize the number of keyboard shortcuts I need to memorize, I configure the programs I use to have the same keyboard shortcuts.","title":"Same Keyboard Shortcuts Across Programs"},{"location":"setup/#consistent-across-computers","text":"To have the same experience on all the computers I use (personal, work, research, homelab), I: Created a setup repository that contains all my configuration files and a script that installs my Linux packages and Zsh plugins Wrote these notes so that I remember how everything works","title":"Consistent Across Computers"},{"location":"setup/ide/","text":"IDE Setup \u00b6 Demo \u00b6 Background \u00b6 Vim Neovim VS Code Followed the setup guide in the Resources section. My IDE of choice starts with Vim. Its main advantages are that it can be run in a terminal and used without every having to touch the mouse. Once the steep learning curve is overcome, coding becomes much faster. However Vim is primarily a text editor and does not natively support the features expected from a full IDE. On the other hand, VS Code supports debugging, remote development, Git, and much more through extensions. To get the best of both world's I connect a Vim backend to a VS Code frontend using VS Code's Neovim extension. Rather than emulating Vim functionality like other extensions do, this extension communicates with the Neovim executable. The disadvantage of emulation is performance and functionality that is dependent on its developers implementing them. That is not to say that I don't use Vim/Neovim by itself at all. It is convenient for making small changes to a file directly in the CLI , and is noticeably faster for large files. Learn about Vim and My IDE Setup \u00b6 Recommended Vim video tutorials: Vim Tutorial , Mastering the Vim Language , How to Do 90% of What Plugins Do (With Just Vim) The setup guide in the Resources section also demonstrates its capabilities Read the relevant files in my setup repository Quirks \u00b6 Several quirks that I have noticed with my VS Code configuration: R + Shift + K to replace a character with K will not work because Shift + K is used to open the description box Workaround: remap Shift + K , or replace in insert mode Undo and redo behavior is different in Vim and VS Code. Thus saving a file, making a change, then using U to undo will not bring the file back to its saved state Workaround: save every time, or map U and Ctrl + R to the VS Code implementation of undo and redo The Markdown All in One extension causes vscode-neovim bug out occassionally and other undesired behaviors Setup \u00b6 Install Neovim Symbolic link .vimrc to the home directory in an Administrator PowerShell prompt New-Item -ItemType Symboliclink -Path \"$env:USERPROFILE\\.vimrc\" -Value \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\.vimrc\" Make a directory named nvim in $env:LOCALAPPDATA and symbolic link init.vim to it in an Administrator PowerShell prompt New-Item -ItemType Symboliclink -Path \"$env:LOCALAPPDATA\\nvim\\init.vim\" -Value \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\windows\\init.vim\" Install VS Code winget install - -id Microsoft . VisualStudioCode Install the VSCode Neovim , Which Key , and Settings Cycler extensions Other useful VS Code extensions Extension Name Description Edit csv View and edit csv files with a table UI Git History View git log, file history, compare branches or commits GitLens See who commited each line of code and when they did it Live Share Extension Pack Real-time collaborative development (like Google Docs for programming) Peacock Change workspace border color to be able to quickly identify workspaces Remote Development Support for development using WSL , SSH, and Docker toggle semicolon Ctrl + ; to add or remove the semicolon at the end of a line vscode-icons Clean file icons for the file explorer vscode-pdf Display pdf file in VS Code <language/framework> Extension Pack Popular extensions for the other languages and frameworks you use Why symbolic link? \u00b6 A symbolic link is a file that points to another file. For example, I want my configuration files (i.e. $env:USERPROFILE\\.vimrc ) to point to files in my setup repository (i.e. $env:USERPROFILE\\Programming\\git_projects\\.setup\\.vimrc ). This enables updates I pull for my setup repository to be instantly applied to my setup. If this functionality does not matter to you, there is no need to symbolic link files. Relevant Files in My Setup Repository \u00b6 .vimrc windows/init.vim windows/vscode_sample_keybindings.json windows/vscode_sample_settings.json Resources \u00b6 VS Code / Neovim integration setup guide: VSCode with embedded Neovim init.vim without my changes settings.json and keybindings.json without my changes Vim configuration: tylerlum/vim_configuration , amix/vimrc Workaround :number and :relativenu not working in VS Code","title":"IDE"},{"location":"setup/ide/#ide-setup","text":"","title":"IDE Setup"},{"location":"setup/ide/#demo","text":"","title":"Demo"},{"location":"setup/ide/#background","text":"Vim Neovim VS Code Followed the setup guide in the Resources section. My IDE of choice starts with Vim. Its main advantages are that it can be run in a terminal and used without every having to touch the mouse. Once the steep learning curve is overcome, coding becomes much faster. However Vim is primarily a text editor and does not natively support the features expected from a full IDE. On the other hand, VS Code supports debugging, remote development, Git, and much more through extensions. To get the best of both world's I connect a Vim backend to a VS Code frontend using VS Code's Neovim extension. Rather than emulating Vim functionality like other extensions do, this extension communicates with the Neovim executable. The disadvantage of emulation is performance and functionality that is dependent on its developers implementing them. That is not to say that I don't use Vim/Neovim by itself at all. It is convenient for making small changes to a file directly in the CLI , and is noticeably faster for large files.","title":"Background"},{"location":"setup/ide/#learn-about-vim-and-my-ide-setup","text":"Recommended Vim video tutorials: Vim Tutorial , Mastering the Vim Language , How to Do 90% of What Plugins Do (With Just Vim) The setup guide in the Resources section also demonstrates its capabilities Read the relevant files in my setup repository","title":"Learn about Vim and My IDE Setup"},{"location":"setup/ide/#quirks","text":"Several quirks that I have noticed with my VS Code configuration: R + Shift + K to replace a character with K will not work because Shift + K is used to open the description box Workaround: remap Shift + K , or replace in insert mode Undo and redo behavior is different in Vim and VS Code. Thus saving a file, making a change, then using U to undo will not bring the file back to its saved state Workaround: save every time, or map U and Ctrl + R to the VS Code implementation of undo and redo The Markdown All in One extension causes vscode-neovim bug out occassionally and other undesired behaviors","title":"Quirks"},{"location":"setup/ide/#setup","text":"Install Neovim Symbolic link .vimrc to the home directory in an Administrator PowerShell prompt New-Item -ItemType Symboliclink -Path \"$env:USERPROFILE\\.vimrc\" -Value \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\.vimrc\" Make a directory named nvim in $env:LOCALAPPDATA and symbolic link init.vim to it in an Administrator PowerShell prompt New-Item -ItemType Symboliclink -Path \"$env:LOCALAPPDATA\\nvim\\init.vim\" -Value \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\windows\\init.vim\" Install VS Code winget install - -id Microsoft . VisualStudioCode Install the VSCode Neovim , Which Key , and Settings Cycler extensions Other useful VS Code extensions Extension Name Description Edit csv View and edit csv files with a table UI Git History View git log, file history, compare branches or commits GitLens See who commited each line of code and when they did it Live Share Extension Pack Real-time collaborative development (like Google Docs for programming) Peacock Change workspace border color to be able to quickly identify workspaces Remote Development Support for development using WSL , SSH, and Docker toggle semicolon Ctrl + ; to add or remove the semicolon at the end of a line vscode-icons Clean file icons for the file explorer vscode-pdf Display pdf file in VS Code <language/framework> Extension Pack Popular extensions for the other languages and frameworks you use","title":"Setup"},{"location":"setup/ide/#why-symbolic-link","text":"A symbolic link is a file that points to another file. For example, I want my configuration files (i.e. $env:USERPROFILE\\.vimrc ) to point to files in my setup repository (i.e. $env:USERPROFILE\\Programming\\git_projects\\.setup\\.vimrc ). This enables updates I pull for my setup repository to be instantly applied to my setup. If this functionality does not matter to you, there is no need to symbolic link files.","title":"Why symbolic link?"},{"location":"setup/ide/#relevant-files-in-my-setup-repository","text":".vimrc windows/init.vim windows/vscode_sample_keybindings.json windows/vscode_sample_settings.json","title":"Relevant Files in My Setup Repository"},{"location":"setup/ide/#resources","text":"VS Code / Neovim integration setup guide: VSCode with embedded Neovim init.vim without my changes settings.json and keybindings.json without my changes Vim configuration: tylerlum/vim_configuration , amix/vimrc Workaround :number and :relativenu not working in VS Code","title":"Resources"},{"location":"setup/software/","text":"Other Software \u00b6 Debloat Windows \u00b6 One click system tweaks and troubleshooting. To run, paste the following command into an Adminstrator PowerShell prompt: iex (( New-Object System . Net . WebClient ). DownloadString ( 'https://git.io/JJ8R4' )) Watch the video at the end of this article for an explanation of each option. Recommended options: Essential Tweaks [If dual-booting] Set Time to UTC Winget \u00b6 Using a package manager such as winget allows software to be quickly and easily installed, upgraded, and uninstalled using the terminal. Winget is relatively new and thus does not yet support as many packages as other package managers. However, it is quickly growing, built into Windows 11, and compatible with other package managers and the standard Windows Installer. I have been using Chocolatey to get packages that are not yet available on winget, but this has become increasingly rare. Useful applications I installed using a package manager Application Name Description 7zip Compress and extract files of different formats Microsoft PowerToys Set of utilities for customizing Windows TeamViewer Remote desktop software TreeSize Free Disk space manager, shows sizes of folders including all subfolders VLC Media player supporting most of media codecs and video formats; basic video editor Winget quick reference \u00b6 Works with applications installed via other means By default, opens the installer window just like double clicking on an installation file -h will attempt to run command without the needs for user input Command Description winget search <query> Search for an app matching the query winget install --id <app_id> Install app winget list List all installed apps (outdated apps have something in the Available column winget list <query> List installed apps matching the query winget upgrade --id <app_id> Upgrade app winget upgrade --all Upgrade all apps winget uninstall --id <app_id> Uninstall app Winget resources \u00b6 winget command reference and examples Search winget packages, generate command that installs the desired packages Chocolatey quick reference Run the following commands in an Administrator PowerShell prompt: -y confirms all prompts so that the command runs without the need for user input Command Description choco install <package1> <package2> -y Install packages choco list -l List packages installed using Chocolatey choco pin add -n <package> Keep package at current version choco pin list List pinned packages choco pin remove -n <package> Allow package to be upgraded choco outdated List outdated packages choco upgrade <package> -y Upgrade package choco upgrade all -y Upgrade all packages choco uninstall <package> -y Uninstall package Installing Chocolatey Search Chocolatey packages Chocolatey command reference and examples Microsoft Store \u00b6 All applications, including those from the Microsoft Store, can be managed using winget. However, it is easier to manage Microsoft Store applications using the Microsoft Store app. Useful applications I installed using the Microsoft Store Application Name Description EarTrumpet Control the volume of each application (and system sounds) individually Microsoft To Do To do list OneNote (for Windows 10) Note-taking Snip & Sketch Take, annotate, and save screenshots","title":"Other Software"},{"location":"setup/software/#other-software","text":"","title":"Other Software"},{"location":"setup/software/#debloat-windows","text":"One click system tweaks and troubleshooting. To run, paste the following command into an Adminstrator PowerShell prompt: iex (( New-Object System . Net . WebClient ). DownloadString ( 'https://git.io/JJ8R4' )) Watch the video at the end of this article for an explanation of each option. Recommended options: Essential Tweaks [If dual-booting] Set Time to UTC","title":"Debloat Windows"},{"location":"setup/software/#winget","text":"Using a package manager such as winget allows software to be quickly and easily installed, upgraded, and uninstalled using the terminal. Winget is relatively new and thus does not yet support as many packages as other package managers. However, it is quickly growing, built into Windows 11, and compatible with other package managers and the standard Windows Installer. I have been using Chocolatey to get packages that are not yet available on winget, but this has become increasingly rare. Useful applications I installed using a package manager Application Name Description 7zip Compress and extract files of different formats Microsoft PowerToys Set of utilities for customizing Windows TeamViewer Remote desktop software TreeSize Free Disk space manager, shows sizes of folders including all subfolders VLC Media player supporting most of media codecs and video formats; basic video editor","title":"Winget"},{"location":"setup/software/#winget-quick-reference","text":"Works with applications installed via other means By default, opens the installer window just like double clicking on an installation file -h will attempt to run command without the needs for user input Command Description winget search <query> Search for an app matching the query winget install --id <app_id> Install app winget list List all installed apps (outdated apps have something in the Available column winget list <query> List installed apps matching the query winget upgrade --id <app_id> Upgrade app winget upgrade --all Upgrade all apps winget uninstall --id <app_id> Uninstall app","title":"Winget quick reference"},{"location":"setup/software/#winget-resources","text":"winget command reference and examples Search winget packages, generate command that installs the desired packages Chocolatey quick reference Run the following commands in an Administrator PowerShell prompt: -y confirms all prompts so that the command runs without the need for user input Command Description choco install <package1> <package2> -y Install packages choco list -l List packages installed using Chocolatey choco pin add -n <package> Keep package at current version choco pin list List pinned packages choco pin remove -n <package> Allow package to be upgraded choco outdated List outdated packages choco upgrade <package> -y Upgrade package choco upgrade all -y Upgrade all packages choco uninstall <package> -y Uninstall package Installing Chocolatey Search Chocolatey packages Chocolatey command reference and examples","title":"Winget resources"},{"location":"setup/software/#microsoft-store","text":"All applications, including those from the Microsoft Store, can be managed using winget. However, it is easier to manage Microsoft Store applications using the Microsoft Store app. Useful applications I installed using the Microsoft Store Application Name Description EarTrumpet Control the volume of each application (and system sounds) individually Microsoft To Do To do list OneNote (for Windows 10) Note-taking Snip & Sketch Take, annotate, and save screenshots","title":"Microsoft Store"},{"location":"setup/terminal/","text":"Terminal Setup \u00b6 Demo \u00b6 Software Stack \u00b6 Windows Terminal \u00b6 Windows Terminal is a terminal application to access shells such as PowerShell, WSL distributions, and SSH all in one place. It can be customized aesthetically and functionally to the moon: Aesthetically, there are countless resources online to serve as a starting point. Functionality, I went through each setting and customized them based on what I was familiar with (Ubuntu terminal, keybindings from my Vim configuration). Oh My Posh \u00b6 Oh My Posh is a theme engine for any shell. Since it is compatible with all the major operating systems, I can use the same custom theme (based on atomic ) for all my Windows Terminal shells. Customizing Oh My Posh themes to use in Windows Terminal I would recommend against right-aligning segments, as their formatting gets messed up when resizing panes. To open tabs/panes in the current directory, add \"osc99\" : true , to your Oh My Posh theme. Setup \u00b6 Clone my setup repository git clone - -depth = 1 https :// github . com / patrick - 5546 / setup . git \"$env:USERPROFILE\\git_projects\\.setup\" Install fonts that support symbols used by Oh My Posh (i.e., Nerd Fonts ) My fonts can be extracted from windows\\fonts.zip My settings, themes, and profiles can be found in windows\\windows_terminal_settings.json . To symbolic link: New-Item -ItemType SymbolicLink -Path \"$env:LOCALAPPDATA\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json\" -Value \"$env:USERPROFILE\\git_projects\\.setup\\windows\\windows_terminal_settings.json\" The PowerShell and Zsh pages detail how I setup these shells to use in Windows Terminal Add Git Bash to Windows Terminal Windows Terminal Shortcuts \u00b6 I have highlighted a few of the shortcuts that I regularly use. The shorcuts with italicized descriptions are ones I customized. All the available shortcuts are listed in the Actions tab of the settings page. Shortcut Description Ctrl + Shift + P Toggle command palette (same as VS Code) Ctrl + Shift + W Close windows (from Microsoft Edge) Ctrl + Shift + Space Open new tab dropdown Ctrl + Shift + # Open profile # in a new tab Ctrl + T Duplicate current tab (from Microsoft Edge) Ctrl + Tab Cycle forwards between tabs (same as Microsoft Edge) Ctrl + W Close tab (from Microsoft Edge) Alt + Shift + D Split pane the long way Ctrl + H / J / K / L Move between panes (from my IDE configuration) Ctrl + Q Close pane What are panes? A tab can be split into multiple panes, enabling you to run commands right next to each other. Check out the documentation page on panes to learn more. Relevant Files in My Setup Repository \u00b6 windows/fonts/ windows/icons/ windows/windows_terminal_settings.json Resources \u00b6 Windows Terminal Color Schemes Windows Terminal Documentation Windows Terminal 2.0 Roadmap Windows Terminal specify a starting directory for a SSH profile Windows Terminal open tab/pane in the current directory Solution for Zsh Oh My Posh documentation and included themes Complete Nerd Fonts Release Powershell -NoLogo parameter render spaces between blocks","title":"Terminal Setup"},{"location":"setup/terminal/#terminal-setup","text":"","title":"Terminal Setup"},{"location":"setup/terminal/#demo","text":"","title":"Demo"},{"location":"setup/terminal/#software-stack","text":"","title":"Software Stack"},{"location":"setup/terminal/#windows-terminal","text":"Windows Terminal is a terminal application to access shells such as PowerShell, WSL distributions, and SSH all in one place. It can be customized aesthetically and functionally to the moon: Aesthetically, there are countless resources online to serve as a starting point. Functionality, I went through each setting and customized them based on what I was familiar with (Ubuntu terminal, keybindings from my Vim configuration).","title":"Windows Terminal"},{"location":"setup/terminal/#oh-my-posh","text":"Oh My Posh is a theme engine for any shell. Since it is compatible with all the major operating systems, I can use the same custom theme (based on atomic ) for all my Windows Terminal shells. Customizing Oh My Posh themes to use in Windows Terminal I would recommend against right-aligning segments, as their formatting gets messed up when resizing panes. To open tabs/panes in the current directory, add \"osc99\" : true , to your Oh My Posh theme.","title":"Oh My Posh"},{"location":"setup/terminal/#setup","text":"Clone my setup repository git clone - -depth = 1 https :// github . com / patrick - 5546 / setup . git \"$env:USERPROFILE\\git_projects\\.setup\" Install fonts that support symbols used by Oh My Posh (i.e., Nerd Fonts ) My fonts can be extracted from windows\\fonts.zip My settings, themes, and profiles can be found in windows\\windows_terminal_settings.json . To symbolic link: New-Item -ItemType SymbolicLink -Path \"$env:LOCALAPPDATA\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json\" -Value \"$env:USERPROFILE\\git_projects\\.setup\\windows\\windows_terminal_settings.json\" The PowerShell and Zsh pages detail how I setup these shells to use in Windows Terminal Add Git Bash to Windows Terminal","title":"Setup"},{"location":"setup/terminal/#windows-terminal-shortcuts","text":"I have highlighted a few of the shortcuts that I regularly use. The shorcuts with italicized descriptions are ones I customized. All the available shortcuts are listed in the Actions tab of the settings page. Shortcut Description Ctrl + Shift + P Toggle command palette (same as VS Code) Ctrl + Shift + W Close windows (from Microsoft Edge) Ctrl + Shift + Space Open new tab dropdown Ctrl + Shift + # Open profile # in a new tab Ctrl + T Duplicate current tab (from Microsoft Edge) Ctrl + Tab Cycle forwards between tabs (same as Microsoft Edge) Ctrl + W Close tab (from Microsoft Edge) Alt + Shift + D Split pane the long way Ctrl + H / J / K / L Move between panes (from my IDE configuration) Ctrl + Q Close pane What are panes? A tab can be split into multiple panes, enabling you to run commands right next to each other. Check out the documentation page on panes to learn more.","title":"Windows Terminal Shortcuts"},{"location":"setup/terminal/#relevant-files-in-my-setup-repository","text":"windows/fonts/ windows/icons/ windows/windows_terminal_settings.json","title":"Relevant Files in My Setup Repository"},{"location":"setup/terminal/#resources","text":"Windows Terminal Color Schemes Windows Terminal Documentation Windows Terminal 2.0 Roadmap Windows Terminal specify a starting directory for a SSH profile Windows Terminal open tab/pane in the current directory Solution for Zsh Oh My Posh documentation and included themes Complete Nerd Fonts Release Powershell -NoLogo parameter render spaces between blocks","title":"Resources"},{"location":"setup/terminal/powershell/","text":"PowerShell Setup \u00b6 PowerShell with file icons, autocomplete, and a custom theme. Followed the setup guide in the Resources section Setup \u00b6 Download the PowerShell app from the Microsoft Store This app is the latest version of PowerShell and includes the PSReadLine Module for autocomplete Install the requirements Install oh-my-posh winget install - -id = JanDeDobbeleer . OhMyPosh Install Terminal Icons Install-Module -Name Terminal-Icons -Repository PSGallery In the PowerShell profile, update absolute path to Oh My Posh theme if necessary, and comment out the Clear-Host command at the end for debugging purposes windows\\Microsoft.PowerShell_profile.ps1 oh-my-posh - -init - -shell pwsh - -config \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\poshthemes\\atomic_tweak_windows.json\" | Invoke-Expression Symbolic link the PowerShell profile to the Powershell directory in an Administrator PowerShell prompt New-Item -ItemType SymbolicLink -Path \"$env:USERPROFILE\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1\" -Value \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\windows\\Microsoft.PowerShell_profile.ps1\" PSReadLine feature is unsupported Install the latest release of PSReadLine (check here ). In December 2021, the latest release was v2.2.0-beta4: Install-Module -Name PSReadLine -RequiredVersion 2 . 2 . 0-beta4 -AllowPrerelease To get rid of the startup messages before prompt, you can uncomment the Clear-Host command at the end of the Powershell profile Using Git Bash , navigate to the setup repository and run the git configuration file ./windows/git_config_windows.sh Why symbolic link? See my reasoning in the IDE page. Relevant Files in My Setup Repository \u00b6 poshthemes/atomic_tweak_windows.json windows/git_config_windows.sh windows/Microsoft.PowerShell_profile.ps1 Resources \u00b6 The PowerShell profile is from this setup guide Refer to the accompanying video that walks through the article if any issues arise","title":"PowerShell"},{"location":"setup/terminal/powershell/#powershell-setup","text":"PowerShell with file icons, autocomplete, and a custom theme. Followed the setup guide in the Resources section","title":"PowerShell Setup"},{"location":"setup/terminal/powershell/#setup","text":"Download the PowerShell app from the Microsoft Store This app is the latest version of PowerShell and includes the PSReadLine Module for autocomplete Install the requirements Install oh-my-posh winget install - -id = JanDeDobbeleer . OhMyPosh Install Terminal Icons Install-Module -Name Terminal-Icons -Repository PSGallery In the PowerShell profile, update absolute path to Oh My Posh theme if necessary, and comment out the Clear-Host command at the end for debugging purposes windows\\Microsoft.PowerShell_profile.ps1 oh-my-posh - -init - -shell pwsh - -config \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\poshthemes\\atomic_tweak_windows.json\" | Invoke-Expression Symbolic link the PowerShell profile to the Powershell directory in an Administrator PowerShell prompt New-Item -ItemType SymbolicLink -Path \"$env:USERPROFILE\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1\" -Value \"$env:USERPROFILE\\Programming\\git_projects\\.setup\\windows\\Microsoft.PowerShell_profile.ps1\" PSReadLine feature is unsupported Install the latest release of PSReadLine (check here ). In December 2021, the latest release was v2.2.0-beta4: Install-Module -Name PSReadLine -RequiredVersion 2 . 2 . 0-beta4 -AllowPrerelease To get rid of the startup messages before prompt, you can uncomment the Clear-Host command at the end of the Powershell profile Using Git Bash , navigate to the setup repository and run the git configuration file ./windows/git_config_windows.sh Why symbolic link? See my reasoning in the IDE page.","title":"Setup"},{"location":"setup/terminal/powershell/#relevant-files-in-my-setup-repository","text":"poshthemes/atomic_tweak_windows.json windows/git_config_windows.sh windows/Microsoft.PowerShell_profile.ps1","title":"Relevant Files in My Setup Repository"},{"location":"setup/terminal/powershell/#resources","text":"The PowerShell profile is from this setup guide Refer to the accompanying video that walks through the article if any issues arise","title":"Resources"},{"location":"setup/terminal/zsh/","text":"Zsh Setup \u00b6 Zsh is a shell for Linux (and thus WSL). My setup repository contains scripts that installs my packages, plugins, and configuration files. My Packages, Plugins, and Configuration Files \u00b6 Package/Plugin/File Description Oh My Posh Theme engine Oh My Zsh Zsh framework for plugins and themes diff-so-fancy Human readable [git] diffs enhancd Make cd interfactive fzf Interactive list filter: files, command history, processes, etc. ripgrep Faster recursive search by ignoring files that are hidden (name starts with . ) or in a .gitignore file .vimrc Configuration file for Vim .zshrc Configuration file for Zsh ~/.zshrc.local .zshrc sources this, for machine-specific Zsh setup (untracked by setup repository) Setup \u00b6 Run commands from the home directory ( cd ~ ) Clone my setup repository git clone --depth = 1 https://github.com/patrick-5546/setup.git ~/.setup Check for existing .zshrc and .vimrc configuration files ls -A Delete/rename any existing configuration files rm .zshrc # delete .zshrc mv .vimrc .vimrc.old # rename .vimrc to .vimrc.old Run installation script If you have root (sudo) access If you don't have root (sudo) access ./.setup/install.sh ./.setup/install_no_sudo.sh Running without root access Without root access, the script won't be able to install Zsh, Oh My Posh, or ripgrep. If you are lucky, Zsh and/or ripgrep may already be installed on your machine. Workaround for Oh My Posh: install in ~/.local/bin mkdir -p ~/.local/bin wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O ~/.local/bin/oh-my-posh sudo chmod +x ~/.local/bin/oh-my-posh If oh-my-posh --version is not working in a new terminal, may need to manually add ~/.local/bin to the $PATH environment variable Check with echo $PATH | grep ~/.local/bin Add to path by adding export PATH=$PATH:~/.local/bin to your ~/.zshrc.local file Installing ripgrep in Ubuntu 18.04 ripgrep isn't in Ubuntu 18.04, so sudo apt-get install ripgrep in install.sh won't work Workaround: install ripgrep manually Make Zsh the default shell chsh -s $( which zsh ) Relevant Files in My Setup Repository \u00b6 Everything except windows/ Resources \u00b6 Oh My Zsh Plugins","title":"Zsh"},{"location":"setup/terminal/zsh/#zsh-setup","text":"Zsh is a shell for Linux (and thus WSL). My setup repository contains scripts that installs my packages, plugins, and configuration files.","title":"Zsh Setup"},{"location":"setup/terminal/zsh/#my-packages-plugins-and-configuration-files","text":"Package/Plugin/File Description Oh My Posh Theme engine Oh My Zsh Zsh framework for plugins and themes diff-so-fancy Human readable [git] diffs enhancd Make cd interfactive fzf Interactive list filter: files, command history, processes, etc. ripgrep Faster recursive search by ignoring files that are hidden (name starts with . ) or in a .gitignore file .vimrc Configuration file for Vim .zshrc Configuration file for Zsh ~/.zshrc.local .zshrc sources this, for machine-specific Zsh setup (untracked by setup repository)","title":"My Packages, Plugins, and Configuration Files"},{"location":"setup/terminal/zsh/#setup","text":"Run commands from the home directory ( cd ~ ) Clone my setup repository git clone --depth = 1 https://github.com/patrick-5546/setup.git ~/.setup Check for existing .zshrc and .vimrc configuration files ls -A Delete/rename any existing configuration files rm .zshrc # delete .zshrc mv .vimrc .vimrc.old # rename .vimrc to .vimrc.old Run installation script If you have root (sudo) access If you don't have root (sudo) access ./.setup/install.sh ./.setup/install_no_sudo.sh Running without root access Without root access, the script won't be able to install Zsh, Oh My Posh, or ripgrep. If you are lucky, Zsh and/or ripgrep may already be installed on your machine. Workaround for Oh My Posh: install in ~/.local/bin mkdir -p ~/.local/bin wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O ~/.local/bin/oh-my-posh sudo chmod +x ~/.local/bin/oh-my-posh If oh-my-posh --version is not working in a new terminal, may need to manually add ~/.local/bin to the $PATH environment variable Check with echo $PATH | grep ~/.local/bin Add to path by adding export PATH=$PATH:~/.local/bin to your ~/.zshrc.local file Installing ripgrep in Ubuntu 18.04 ripgrep isn't in Ubuntu 18.04, so sudo apt-get install ripgrep in install.sh won't work Workaround: install ripgrep manually Make Zsh the default shell chsh -s $( which zsh )","title":"Setup"},{"location":"setup/terminal/zsh/#relevant-files-in-my-setup-repository","text":"Everything except windows/","title":"Relevant Files in My Setup Repository"},{"location":"setup/terminal/zsh/#resources","text":"Oh My Zsh Plugins","title":"Resources"}]}